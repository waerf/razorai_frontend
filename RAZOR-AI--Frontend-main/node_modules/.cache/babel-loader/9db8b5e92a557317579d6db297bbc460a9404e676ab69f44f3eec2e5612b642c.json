{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mapActions, mapState } from 'vuex';\nimport { subscribeAgent as apiSubscribeAgent } from '../utils/api';\nexport default {\n  name: 'RobotMarketPage',\n  data() {\n    return {\n      searchKeyword: '',\n      currentSearchMode: 'tag',\n      showSearchResults: false,\n      searchResults: [],\n      categoryDialogVisible: false,\n      categoryDialogTitle: '',\n      categoryDetailRobots: [],\n      subscriptionDialogVisible: false,\n      currentRobotForSubscription: null,\n      subscriptionForm: {\n        type: 'monthly',\n        duration: 1\n      },\n      subscriptionCost: 0,\n      loading: false\n    };\n  },\n  computed: {\n    ...mapState('user', ['isLoggedIn', 'userName', 'userId']),\n    ...mapState('agent', {\n      textRobots: state => state.textAgents,\n      imageRobots: state => state.imageAgents,\n      videoRobots: state => state.videoAgents,\n      haveSubscribed: state => state.haveSubscribed\n    }),\n    currentSearchModeText() {\n      const modes = {\n        tag: '按标签搜索',\n        name: '按名称搜索',\n        description: '按描述搜索'\n      };\n      return modes[this.currentSearchMode];\n    },\n    allRobots() {\n      return [...this.textRobots, ...this.imageRobots, ...this.videoRobots];\n    }\n  },\n  created() {\n    this.getAllAgentsData();\n    this.getUserSubscriptions();\n  },\n  methods: {\n    ...mapActions('agent', ['fetchAllAgentsData', 'fetchAgentDetail', 'fetchUserSubscriptions']),\n    async getAllAgentsData() {\n      this.loading = true;\n      try {\n        await this.fetchAllAgentsData();\n        console.log('获取机器人数据成功');\n      } catch (error) {\n        console.error('获取机器人数据失败:', error);\n        this.$message.error('获取机器人数据失败');\n      } finally {\n        this.loading = false;\n      }\n    },\n    async getUserSubscriptions() {\n      if (!this.userId) return;\n      try {\n        await this.fetchUserSubscriptions(this.userId);\n        console.log('获取用户订阅信息成功');\n      } catch (error) {\n        console.error('获取用户订阅信息失败:', error);\n      }\n    },\n    setSearchMode(mode) {\n      this.currentSearchMode = mode;\n      this.performSearch();\n    },\n    performSearch() {\n      if (!this.searchKeyword.trim()) {\n        this.showSearchResults = false;\n        return;\n      }\n      const keyword = this.searchKeyword.toLowerCase();\n      this.searchResults = this.allRobots.filter(robot => {\n        switch (this.currentSearchMode) {\n          case 'name':\n            return robot.name && robot.name.toLowerCase().includes(keyword);\n          case 'description':\n            return robot.description && robot.description.toLowerCase().includes(keyword);\n          case 'tag':\n          default:\n            return robot.name && robot.name.toLowerCase().includes(keyword) || robot.description && robot.description.toLowerCase().includes(keyword);\n        }\n      });\n      this.showSearchResults = true;\n    },\n    showCategoryDetail(categoryType) {\n      const titles = {\n        text: '文本对话机器人',\n        image: '图片生成机器人',\n        video: '音视频机器人'\n      };\n      this.categoryDialogTitle = titles[categoryType];\n      this.categoryDetailRobots = this.getRobotsByType(categoryType);\n      this.categoryDialogVisible = true;\n    },\n    showRobotDetail(robotId) {\n      this.$router.push({\n        name: 'RobotDetail',\n        params: {\n          id: robotId\n        }\n      });\n    },\n    subscribeRobot(robotId) {\n      if (!this.isLoggedIn) {\n        this.$message.warning('请先登录');\n        return;\n      }\n      if (this.isSubscribed(robotId)) {\n        this.$message.info('您已订阅该机器人');\n        return;\n      }\n      const robot = this.allRobots.find(r => r.id === robotId);\n      if (robot) {\n        this.currentRobotForSubscription = robot;\n        this.calculateCost();\n        this.subscriptionDialogVisible = true;\n      }\n    },\n    async confirmSubscription() {\n      if (!this.currentRobotForSubscription) return;\n      try {\n        const payload = {\n          agent_id: this.currentRobotForSubscription.id,\n          user_id: this.userId,\n          subscription_type: this.subscriptionForm.type,\n          duration: this.subscriptionForm.duration\n        };\n        const response = await apiSubscribeAgent(payload);\n        if (response.status === 200) {\n          this.$message.success('订阅成功！');\n          this.subscriptionDialogVisible = false;\n          this.getUserSubscriptions(); // 刷新订阅状态\n        } else {\n          this.$message.error('订阅失败，请稍后重试');\n        }\n      } catch (error) {\n        console.error('订阅失败:', error);\n        this.$message.error('订阅失败，请稍后重试');\n      }\n    },\n    calculateCost() {\n      if (!this.currentRobotForSubscription) return;\n      const basePrice = this.currentRobotForSubscription.price || 100;\n      const multiplier = this.subscriptionForm.type === 'yearly' ? 10 : 1;\n      this.subscriptionCost = basePrice * multiplier * this.subscriptionForm.duration;\n    },\n    isSubscribed(robotId) {\n      return this.haveSubscribed.some(sub => sub.agent_id === robotId && sub.status);\n    },\n    getRobotsByType(type) {\n      switch (type) {\n        case 'text':\n          return this.textRobots;\n        case 'image':\n          return this.imageRobots;\n        case 'video':\n          return this.videoRobots;\n        default:\n          return [];\n      }\n    },\n    getRobotImage(type) {\n      switch (type) {\n        case 1:\n          return require('@/assets/images/Agents/textAgent.png');\n        case 2:\n          return require('@/assets/images/Agents/imageAgent.png');\n        case 3:\n          return require('@/assets/images/Agents/videoAgent.png');\n        default:\n          return require('@/assets/images/Agents/baseAgent.png');\n      }\n    },\n    truncate(text, length = 50) {\n      if (!text) return '';\n      return text.length > length ? text.slice(0, length) + '...' : text;\n    },\n    formatPrice(price) {\n      return price ? `${price} 积分` : '免费';\n    }\n  }\n};","map":{"version":3,"names":["mapActions","mapState","subscribeAgent","apiSubscribeAgent","name","data","searchKeyword","currentSearchMode","showSearchResults","searchResults","categoryDialogVisible","categoryDialogTitle","categoryDetailRobots","subscriptionDialogVisible","currentRobotForSubscription","subscriptionForm","type","duration","subscriptionCost","loading","computed","textRobots","state","textAgents","imageRobots","imageAgents","videoRobots","videoAgents","haveSubscribed","currentSearchModeText","modes","tag","description","allRobots","created","getAllAgentsData","getUserSubscriptions","methods","fetchAllAgentsData","console","log","error","$message","userId","fetchUserSubscriptions","setSearchMode","mode","performSearch","trim","keyword","toLowerCase","filter","robot","includes","showCategoryDetail","categoryType","titles","text","image","video","getRobotsByType","showRobotDetail","robotId","$router","push","params","id","subscribeRobot","isLoggedIn","warning","isSubscribed","info","find","r","calculateCost","confirmSubscription","payload","agent_id","user_id","subscription_type","response","status","success","basePrice","price","multiplier","some","sub","getRobotImage","require","truncate","length","slice","formatPrice"],"sources":["src/views/RobotMarketPage.vue"],"sourcesContent":["<template>\r\n  <div class=\"robot-market\">\r\n    <!-- 搜索区域 -->\r\n    <div class=\"search-container\">\r\n      <div class=\"search-wrapper\">\r\n        <div class=\"search-mode-selector\">\r\n          <el-dropdown @command=\"setSearchMode\">\r\n            <el-button class=\"search-mode-btn\">\r\n              {{ currentSearchModeText }}\r\n              <i class=\"el-icon-arrow-down\"></i>\r\n            </el-button>\r\n            <el-dropdown-menu slot=\"dropdown\">\r\n              <el-dropdown-item command=\"tag\">按标签搜索</el-dropdown-item>\r\n              <el-dropdown-item command=\"name\">按名称搜索</el-dropdown-item>\r\n              <el-dropdown-item command=\"description\">按描述搜索</el-dropdown-item>\r\n            </el-dropdown-menu>\r\n          </el-dropdown>\r\n        </div>\r\n        <el-input\r\n          v-model=\"searchKeyword\"\r\n          class=\"search-input\"\r\n          placeholder=\"搜索机器人...\"\r\n          @input=\"performSearch\"\r\n          clearable\r\n        >\r\n          <el-button slot=\"append\" icon=\"el-icon-search\" @click=\"performSearch\"></el-button>\r\n        </el-input>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 搜索结果 -->\r\n    <div v-if=\"showSearchResults\" class=\"search-results\">\r\n      <h2 class=\"section-title\">搜索结果 ({{ searchResults.length }})</h2>\r\n      <div class=\"robots-grid\">\r\n        <el-card\r\n          v-for=\"robot in searchResults\"\r\n          :key=\"robot.id\"\r\n          class=\"robot-card\"\r\n          @click.native=\"showRobotDetail(robot.id)\"\r\n        >\r\n          <div class=\"robot-header\">\r\n            <img :src=\"getRobotImage(robot.type)\" alt=\"robot\" class=\"robot-logo\" />\r\n            <div class=\"robot-name\">{{ robot.name }}</div>\r\n          </div>\r\n          <div class=\"robot-description\">{{ truncate(robot.description, 80) }}</div>\r\n          <div class=\"robot-rating-price\">\r\n            <div class=\"robot-rating\">\r\n              <i class=\"el-icon-star-on\" style=\"color: #ffc107;\"></i>\r\n              {{ robot.rating || 4.5 }}\r\n            </div>\r\n            <div class=\"robot-price\">{{ formatPrice(robot.price) }}</div>\r\n          </div>\r\n          <div class=\"robot-actions\">\r\n            <el-button size=\"mini\" @click.stop=\"showRobotDetail(robot.id)\">查看详情</el-button>\r\n            <el-button\r\n              type=\"primary\"\r\n              size=\"mini\"\r\n              :class=\"{ 'subscribed': isSubscribed(robot.id) }\"\r\n              @click.stop=\"subscribeRobot(robot.id)\"\r\n            >\r\n              {{ isSubscribed(robot.id) ? '已订阅' : '订阅' }}\r\n            </el-button>\r\n          </div>\r\n        </el-card>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 机器人分类展示 -->\r\n    <div v-else class=\"robots-container\">\r\n      <!-- 文本机器人 -->\r\n      <div class=\"category-section\">\r\n        <div class=\"category-header\">\r\n          <h3 class=\"category-title\">\r\n            <i class=\"el-icon-document\"></i>\r\n            文本对话机器人\r\n          </h3>\r\n          <el-button class=\"view-more-btn\" @click=\"showCategoryDetail('text')\">查看更多</el-button>\r\n        </div>\r\n        <div class=\"robots-grid\">\r\n          <el-card\r\n            v-for=\"robot in textRobots.slice(0, 4)\"\r\n            :key=\"robot.id\"\r\n            class=\"robot-card\"\r\n            @click.native=\"showRobotDetail(robot.id)\"\r\n          >\r\n            <div class=\"robot-header\">\r\n              <img :src=\"getRobotImage(robot.type)\" alt=\"robot\" class=\"robot-logo\" />\r\n              <div class=\"robot-name\">{{ robot.name }}</div>\r\n            </div>\r\n            <div class=\"robot-description\">{{ truncate(robot.description, 80) }}</div>\r\n            <div class=\"robot-rating-price\">\r\n              <div class=\"robot-rating\">\r\n                <i class=\"el-icon-star-on\" style=\"color: #ffc107;\"></i>\r\n                {{ robot.rating || 4.5 }}\r\n              </div>\r\n              <div class=\"robot-price\">{{ formatPrice(robot.price) }}</div>\r\n            </div>\r\n            <div class=\"robot-actions\">\r\n              <el-button size=\"mini\" @click.stop=\"showRobotDetail(robot.id)\">查看详情</el-button>\r\n              <el-button\r\n                type=\"primary\"\r\n                size=\"mini\"\r\n                :class=\"{ 'subscribed': isSubscribed(robot.id) }\"\r\n                @click.stop=\"subscribeRobot(robot.id)\"\r\n              >\r\n                {{ isSubscribed(robot.id) ? '已订阅' : '订阅' }}\r\n              </el-button>\r\n            </div>\r\n          </el-card>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 图像机器人 -->\r\n      <div class=\"category-section\">\r\n        <div class=\"category-header\">\r\n          <h3 class=\"category-title\">\r\n            <i class=\"el-icon-picture-outline\"></i>\r\n            图片生成机器人\r\n          </h3>\r\n          <el-button class=\"view-more-btn\" @click=\"showCategoryDetail('image')\">查看更多</el-button>\r\n        </div>\r\n        <div class=\"robots-grid\">\r\n          <el-card\r\n            v-for=\"robot in imageRobots.slice(0, 4)\"\r\n            :key=\"robot.id\"\r\n            class=\"robot-card\"\r\n            @click.native=\"showRobotDetail(robot.id)\"\r\n          >\r\n            <div class=\"robot-header\">\r\n              <img :src=\"getRobotImage(robot.type)\" alt=\"robot\" class=\"robot-logo\" />\r\n              <div class=\"robot-name\">{{ robot.name }}</div>\r\n            </div>\r\n            <div class=\"robot-description\">{{ truncate(robot.description, 80) }}</div>\r\n            <div class=\"robot-rating-price\">\r\n              <div class=\"robot-rating\">\r\n                <i class=\"el-icon-star-on\" style=\"color: #ffc107;\"></i>\r\n                {{ robot.rating || 4.5 }}\r\n              </div>\r\n              <div class=\"robot-price\">{{ formatPrice(robot.price) }}</div>\r\n            </div>\r\n            <div class=\"robot-actions\">\r\n              <el-button size=\"mini\" @click.stop=\"showRobotDetail(robot.id)\">查看详情</el-button>\r\n              <el-button\r\n                type=\"primary\"\r\n                size=\"mini\"\r\n                :class=\"{ 'subscribed': isSubscribed(robot.id) }\"\r\n                @click.stop=\"subscribeRobot(robot.id)\"\r\n              >\r\n                {{ isSubscribed(robot.id) ? '已订阅' : '订阅' }}\r\n              </el-button>\r\n            </div>\r\n          </el-card>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 音视频机器人 -->\r\n      <div class=\"category-section\">\r\n        <div class=\"category-header\">\r\n          <h3 class=\"category-title\">\r\n            <i class=\"el-icon-video-camera\"></i>\r\n            音视频机器人\r\n          </h3>\r\n          <el-button class=\"view-more-btn\" @click=\"showCategoryDetail('video')\">查看更多</el-button>\r\n        </div>\r\n        <div class=\"robots-grid\">\r\n          <el-card\r\n            v-for=\"robot in videoRobots.slice(0, 4)\"\r\n            :key=\"robot.id\"\r\n            class=\"robot-card\"\r\n            @click.native=\"showRobotDetail(robot.id)\"\r\n          >\r\n            <div class=\"robot-header\">\r\n              <img :src=\"getRobotImage(robot.type)\" alt=\"robot\" class=\"robot-logo\" />\r\n              <div class=\"robot-name\">{{ robot.name }}</div>\r\n            </div>\r\n            <div class=\"robot-description\">{{ truncate(robot.description, 80) }}</div>\r\n            <div class=\"robot-rating-price\">\r\n              <div class=\"robot-rating\">\r\n                <i class=\"el-icon-star-on\" style=\"color: #ffc107;\"></i>\r\n                {{ robot.rating || 4.5 }}\r\n              </div>\r\n              <div class=\"robot-price\">{{ formatPrice(robot.price) }}</div>\r\n            </div>\r\n            <div class=\"robot-actions\">\r\n              <el-button size=\"mini\" @click.stop=\"showRobotDetail(robot.id)\">查看详情</el-button>\r\n              <el-button\r\n                type=\"primary\"\r\n                size=\"mini\"\r\n                :class=\"{ 'subscribed': isSubscribed(robot.id) }\"\r\n                @click.stop=\"subscribeRobot(robot.id)\"\r\n              >\r\n                {{ isSubscribed(robot.id) ? '已订阅' : '订阅' }}\r\n              </el-button>\r\n            </div>\r\n          </el-card>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 分类详情对话框 -->\r\n    <el-dialog\r\n      :title=\"categoryDialogTitle\"\r\n      :visible.sync=\"categoryDialogVisible\"\r\n      width=\"80%\"\r\n      center\r\n    >\r\n      <div class=\"category-detail-grid\">\r\n        <el-card\r\n          v-for=\"robot in categoryDetailRobots\"\r\n          :key=\"robot.id\"\r\n          class=\"robot-card\"\r\n          @click.native=\"showRobotDetail(robot.id)\"\r\n        >\r\n          <div class=\"robot-header\">\r\n            <img :src=\"getRobotImage(robot.type)\" alt=\"robot\" class=\"robot-logo\" />\r\n            <div class=\"robot-name\">{{ robot.name }}</div>\r\n          </div>\r\n          <div class=\"robot-description\">{{ truncate(robot.description, 80) }}</div>\r\n          <div class=\"robot-rating-price\">\r\n            <div class=\"robot-rating\">\r\n              <i class=\"el-icon-star-on\" style=\"color: #ffc107;\"></i>\r\n              {{ robot.rating || 4.5 }}\r\n            </div>\r\n            <div class=\"robot-price\">{{ formatPrice(robot.price) }}</div>\r\n          </div>\r\n          <div class=\"robot-actions\">\r\n            <el-button size=\"mini\" @click.stop=\"showRobotDetail(robot.id)\">查看详情</el-button>\r\n            <el-button\r\n              type=\"primary\"\r\n              size=\"mini\"\r\n              :class=\"{ 'subscribed': isSubscribed(robot.id) }\"\r\n              @click.stop=\"subscribeRobot(robot.id)\"\r\n            >\r\n              {{ isSubscribed(robot.id) ? '已订阅' : '订阅' }}\r\n            </el-button>\r\n          </div>\r\n        </el-card>\r\n      </div>\r\n    </el-dialog>\r\n\r\n    <!-- 订阅确认对话框 -->\r\n    <el-dialog\r\n      title=\"订阅确认\"\r\n      :visible.sync=\"subscriptionDialogVisible\"\r\n      width=\"400px\"\r\n      center\r\n    >\r\n      <div v-if=\"currentRobotForSubscription\" class=\"subscription-info\">\r\n        <div class=\"subscription-robot-name\">{{ currentRobotForSubscription.name }}</div>\r\n        <el-form :model=\"subscriptionForm\" label-width=\"80px\">\r\n          <el-form-item label=\"订阅类型\">\r\n            <el-select v-model=\"subscriptionForm.type\" @change=\"calculateCost\">\r\n              <el-option label=\"月度订阅\" value=\"monthly\"></el-option>\r\n              <el-option label=\"年度订阅\" value=\"yearly\"></el-option>\r\n            </el-select>\r\n          </el-form-item>\r\n          <el-form-item label=\"订阅时长\">\r\n            <el-input-number\r\n              v-model=\"subscriptionForm.duration\"\r\n              :min=\"1\"\r\n              :max=\"12\"\r\n              @change=\"calculateCost\"\r\n            ></el-input-number>\r\n          </el-form-item>\r\n        </el-form>\r\n        <div class=\"subscription-cost\">\r\n          <div class=\"subscription-cost-label\">总费用</div>\r\n          <div class=\"subscription-cost-value\">{{ subscriptionCost }} 积分</div>\r\n        </div>\r\n      </div>\r\n      <div slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"subscriptionDialogVisible = false\">取消</el-button>\r\n        <el-button type=\"primary\" @click=\"confirmSubscription\">确认订阅</el-button>\r\n      </div>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapActions, mapState } from 'vuex';\r\nimport { subscribeAgent as apiSubscribeAgent } from '../utils/api';\r\n\r\nexport default {\r\n  name: 'RobotMarketPage',\r\n  data() {\r\n    return {\r\n      searchKeyword: '',\r\n      currentSearchMode: 'tag',\r\n      showSearchResults: false,\r\n      searchResults: [],\r\n      categoryDialogVisible: false,\r\n      categoryDialogTitle: '',\r\n      categoryDetailRobots: [],\r\n      subscriptionDialogVisible: false,\r\n      currentRobotForSubscription: null,\r\n      subscriptionForm: {\r\n        type: 'monthly',\r\n        duration: 1\r\n      },\r\n      subscriptionCost: 0,\r\n      loading: false\r\n    };\r\n  },\r\n  computed: {\r\n    ...mapState('user', ['isLoggedIn', 'userName', 'userId']),\r\n    ...mapState('agent', {\r\n      textRobots: (state) => state.textAgents,\r\n      imageRobots: (state) => state.imageAgents,\r\n      videoRobots: (state) => state.videoAgents,\r\n      haveSubscribed: (state) => state.haveSubscribed,\r\n    }),\r\n    currentSearchModeText() {\r\n      const modes = {\r\n        tag: '按标签搜索',\r\n        name: '按名称搜索',\r\n        description: '按描述搜索'\r\n      };\r\n      return modes[this.currentSearchMode];\r\n    },\r\n    allRobots() {\r\n      return [...this.textRobots, ...this.imageRobots, ...this.videoRobots];\r\n    }\r\n  },\r\n  created() {\r\n    this.getAllAgentsData();\r\n    this.getUserSubscriptions();\r\n  },\r\n  methods: {\r\n    ...mapActions('agent', [\r\n      'fetchAllAgentsData',\r\n      'fetchAgentDetail',\r\n      'fetchUserSubscriptions',\r\n    ]),\r\n    async getAllAgentsData() {\r\n      this.loading = true;\r\n      try {\r\n        await this.fetchAllAgentsData();\r\n        console.log('获取机器人数据成功');\r\n      } catch (error) {\r\n        console.error('获取机器人数据失败:', error);\r\n        this.$message.error('获取机器人数据失败');\r\n      } finally {\r\n        this.loading = false;\r\n      }\r\n    },\r\n    async getUserSubscriptions() {\r\n      if (!this.userId) return;\r\n      try {\r\n        await this.fetchUserSubscriptions(this.userId);\r\n        console.log('获取用户订阅信息成功');\r\n      } catch (error) {\r\n        console.error('获取用户订阅信息失败:', error);\r\n      }\r\n    },\r\n    setSearchMode(mode) {\r\n      this.currentSearchMode = mode;\r\n      this.performSearch();\r\n    },\r\n    performSearch() {\r\n      if (!this.searchKeyword.trim()) {\r\n        this.showSearchResults = false;\r\n        return;\r\n      }\r\n\r\n      const keyword = this.searchKeyword.toLowerCase();\r\n      this.searchResults = this.allRobots.filter(robot => {\r\n        switch (this.currentSearchMode) {\r\n          case 'name':\r\n            return robot.name && robot.name.toLowerCase().includes(keyword);\r\n          case 'description':\r\n            return robot.description && robot.description.toLowerCase().includes(keyword);\r\n          case 'tag':\r\n          default:\r\n            return (robot.name && robot.name.toLowerCase().includes(keyword)) ||\r\n                   (robot.description && robot.description.toLowerCase().includes(keyword));\r\n        }\r\n      });\r\n      this.showSearchResults = true;\r\n    },\r\n    showCategoryDetail(categoryType) {\r\n      const titles = {\r\n        text: '文本对话机器人',\r\n        image: '图片生成机器人',\r\n        video: '音视频机器人'\r\n      };\r\n      this.categoryDialogTitle = titles[categoryType];\r\n      this.categoryDetailRobots = this.getRobotsByType(categoryType);\r\n      this.categoryDialogVisible = true;\r\n    },\r\n    showRobotDetail(robotId) {\r\n      this.$router.push({ name: 'RobotDetail', params: { id: robotId } });\r\n    },\r\n    subscribeRobot(robotId) {\r\n      if (!this.isLoggedIn) {\r\n        this.$message.warning('请先登录');\r\n        return;\r\n      }\r\n\r\n      if (this.isSubscribed(robotId)) {\r\n        this.$message.info('您已订阅该机器人');\r\n        return;\r\n      }\r\n\r\n      const robot = this.allRobots.find(r => r.id === robotId);\r\n      if (robot) {\r\n        this.currentRobotForSubscription = robot;\r\n        this.calculateCost();\r\n        this.subscriptionDialogVisible = true;\r\n      }\r\n    },\r\n    async confirmSubscription() {\r\n      if (!this.currentRobotForSubscription) return;\r\n\r\n      try {\r\n        const payload = {\r\n          agent_id: this.currentRobotForSubscription.id,\r\n          user_id: this.userId,\r\n          subscription_type: this.subscriptionForm.type,\r\n          duration: this.subscriptionForm.duration\r\n        };\r\n\r\n        const response = await apiSubscribeAgent(payload);\r\n        if (response.status === 200) {\r\n          this.$message.success('订阅成功！');\r\n          this.subscriptionDialogVisible = false;\r\n          this.getUserSubscriptions(); // 刷新订阅状态\r\n        } else {\r\n          this.$message.error('订阅失败，请稍后重试');\r\n        }\r\n      } catch (error) {\r\n        console.error('订阅失败:', error);\r\n        this.$message.error('订阅失败，请稍后重试');\r\n      }\r\n    },\r\n    calculateCost() {\r\n      if (!this.currentRobotForSubscription) return;\r\n      \r\n      const basePrice = this.currentRobotForSubscription.price || 100;\r\n      const multiplier = this.subscriptionForm.type === 'yearly' ? 10 : 1;\r\n      this.subscriptionCost = basePrice * multiplier * this.subscriptionForm.duration;\r\n    },\r\n    isSubscribed(robotId) {\r\n      return this.haveSubscribed.some(sub => sub.agent_id === robotId && sub.status);\r\n    },\r\n    getRobotsByType(type) {\r\n      switch (type) {\r\n        case 'text':\r\n          return this.textRobots;\r\n        case 'image':\r\n          return this.imageRobots;\r\n        case 'video':\r\n          return this.videoRobots;\r\n        default:\r\n          return [];\r\n      }\r\n    },\r\n    getRobotImage(type) {\r\n      switch (type) {\r\n        case 1:\r\n          return require('@/assets/images/Agents/textAgent.png');\r\n        case 2:\r\n          return require('@/assets/images/Agents/imageAgent.png');\r\n        case 3:\r\n          return require('@/assets/images/Agents/videoAgent.png');\r\n        default:\r\n          return require('@/assets/images/Agents/baseAgent.png');\r\n      }\r\n    },\r\n    truncate(text, length = 50) {\r\n      if (!text) return '';\r\n      return text.length > length ? text.slice(0, length) + '...' : text;\r\n    },\r\n    formatPrice(price) {\r\n      return price ? `${price} 积分` : '免费';\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n@use '@/assets/styles/variables.scss' as *;\r\n\r\n.robot-market {\r\n  padding: 20px;\r\n  min-height: 100vh;\r\n\r\n  .search-container {\r\n    background: white;\r\n    padding: 20px;\r\n    margin-bottom: 20px;\r\n    border-radius: 8px;\r\n    box-shadow: $box-shadow-light;\r\n\r\n    .search-wrapper {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: 0;\r\n      max-width: 800px;\r\n\r\n      .search-mode-selector {\r\n        min-width: 120px;\r\n\r\n        .search-mode-btn {\r\n          border-radius: 6px 0 0 6px;\r\n          background: $accent-color;\r\n          color: white;\r\n          border-color: $accent-color;\r\n\r\n          &:hover {\r\n            background: $accent-hover-color;\r\n            border-color: $accent-hover-color;\r\n          }\r\n        }\r\n      }\r\n\r\n      .search-input {\r\n        flex: 1;\r\n\r\n        ::v-deep .el-input__inner {\r\n          border-radius: 0;\r\n          border-left: none;\r\n        }\r\n\r\n        ::v-deep .el-input-group__append {\r\n          border-radius: 0 6px 6px 0;\r\n          background: $accent-color;\r\n          color: white;\r\n          border-color: $accent-color;\r\n\r\n          &:hover {\r\n            background: $accent-hover-color;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  .search-results,\r\n  .robots-container {\r\n    .section-title {\r\n      font-size: 1.5rem;\r\n      color: $text-color;\r\n      margin-bottom: 20px;\r\n      text-align: center;\r\n    }\r\n\r\n    .category-section {\r\n      margin-bottom: 40px;\r\n\r\n      .category-header {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: space-between;\r\n        margin-bottom: 20px;\r\n\r\n        .category-title {\r\n          font-size: 1.2rem;\r\n          color: $text-color;\r\n          font-weight: 600;\r\n          display: flex;\r\n          align-items: center;\r\n          gap: 8px;\r\n\r\n          i {\r\n            color: $accent-color;\r\n          }\r\n        }\r\n\r\n        .view-more-btn {\r\n          background: white;\r\n          color: $text-color;\r\n          border: 1px solid $border-color;\r\n          border-radius: 20px;\r\n          padding: 8px 16px;\r\n\r\n          &:hover {\r\n            background: $accent-color;\r\n            color: white;\r\n            border-color: $accent-color;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    .robots-grid {\r\n      display: grid;\r\n      grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\r\n      gap: 20px;\r\n    }\r\n  }\r\n\r\n  .robot-card {\r\n    cursor: pointer;\r\n    transition: all 0.3s ease;\r\n    border: 1px solid $border-color;\r\n\r\n    &:hover {\r\n      transform: translateY(-5px);\r\n      box-shadow: $box-shadow-medium;\r\n    }\r\n\r\n    .robot-header {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: 10px;\r\n      margin-bottom: 10px;\r\n\r\n      .robot-logo {\r\n        width: 40px;\r\n        height: 40px;\r\n        border-radius: 50%;\r\n        object-fit: cover;\r\n      }\r\n\r\n      .robot-name {\r\n        font-size: 1rem;\r\n        font-weight: 600;\r\n        color: $text-color;\r\n        flex: 1;\r\n      }\r\n    }\r\n\r\n    .robot-description {\r\n      color: $secondary-color;\r\n      font-size: 0.9rem;\r\n      line-height: 1.4;\r\n      margin-bottom: 15px;\r\n      min-height: 40px;\r\n    }\r\n\r\n    .robot-rating-price {\r\n      display: flex;\r\n      justify-content: space-between;\r\n      align-items: center;\r\n      margin-bottom: 15px;\r\n      font-size: 0.9rem;\r\n\r\n      .robot-rating {\r\n        display: flex;\r\n        align-items: center;\r\n        gap: 4px;\r\n        color: #ffc107;\r\n      }\r\n\r\n      .robot-price {\r\n        color: $text-color;\r\n        font-weight: 500;\r\n      }\r\n    }\r\n\r\n    .robot-actions {\r\n      display: flex;\r\n      gap: 8px;\r\n\r\n      .el-button {\r\n        flex: 1;\r\n\r\n        &.subscribed {\r\n          background: #28a745;\r\n          border-color: #28a745;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  .category-detail-grid {\r\n    display: grid;\r\n    grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));\r\n    gap: 15px;\r\n    max-height: 60vh;\r\n    overflow-y: auto;\r\n  }\r\n\r\n  .subscription-info {\r\n    .subscription-robot-name {\r\n      font-size: 1.2rem;\r\n      font-weight: 600;\r\n      margin-bottom: 20px;\r\n      color: $text-color;\r\n    }\r\n\r\n    .subscription-cost {\r\n      background: $background-color;\r\n      padding: 15px;\r\n      border-radius: 6px;\r\n      margin-top: 20px;\r\n\r\n      .subscription-cost-label {\r\n        font-weight: 500;\r\n        color: $secondary-color;\r\n        margin-bottom: 5px;\r\n      }\r\n\r\n      .subscription-cost-value {\r\n        font-size: 1.2rem;\r\n        font-weight: 600;\r\n        color: $accent-color;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .robot-market {\r\n    padding: 10px;\r\n\r\n    .search-container {\r\n      padding: 15px;\r\n\r\n      .search-wrapper {\r\n        flex-direction: column;\r\n        gap: 10px;\r\n\r\n        .search-mode-selector {\r\n          width: 100%;\r\n\r\n          .search-mode-btn {\r\n            border-radius: 6px;\r\n          }\r\n        }\r\n\r\n        .search-input {\r\n          width: 100%;\r\n\r\n          ::v-deep .el-input__inner {\r\n            border-radius: 6px 0 0 6px;\r\n            border: 1px solid $border-color;\r\n          }\r\n\r\n          ::v-deep .el-input-group__append {\r\n            border-radius: 0 6px 6px 0;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    .robots-grid {\r\n      grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\r\n      gap: 15px;\r\n    }\r\n  }\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}