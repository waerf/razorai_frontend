{"ast":null,"code":"/*\nAI 机器人管理 (store/agent.js)\n    功能: 管理 AI 机器人的信息。\n    接口:\n        获取所有 AI 机器人信息 (/market)\n        获取某个机器人的详细信息 (/market/agentdetail/<int:agent_id>)\n        创建 AI 机器人 (/agent/user/creation)\n*/\nimport { fetchAllAgentsData as apifetchAllAgentsData } from '../utils/api'; // 引入 API 请求\nimport { fetchAgentDetail as apifetchAgentDetail } from '../utils/api'; // 引入 API 请求\nimport { fetchUserSubscriptions as apifetchUserSubscriptions } from '../utils/api';\nconst state = {\n  recommendedRobots: [],\n  // 推荐机器人 (type=1)\n  rolePlayRobots: [],\n  // 角色扮演机器人 (type=1)\n  codingRobots: [],\n  // 代码编程机器人 (type=2)\n  paperRobots: [],\n  // 论文修改机器人 (type=3)\n  selectedAgent: null,\n  haveSubscribed: []\n};\nconst getters = {\n  allAgents: state => {\n    return state.recommendedRobots.concat(state.rolePlayRobots, state.codingRobots, state.paperRobots);\n  },\n  recommendedRobots: state => {\n    return state.recommendedRobots;\n  },\n  rolePlayRobots: state => {\n    return state.rolePlayRobots;\n  },\n  codingRobots: state => {\n    return state.codingRobots;\n  },\n  paperRobots: state => {\n    return state.paperRobots;\n  },\n  selectedAgent: state => {\n    return state.selectedAgent;\n  },\n  haveSubscribed: state => {\n    return state.haveSubscribed;\n  }\n};\nconst mutations = {\n  SET_RECOMMENDED_ROBOTS(state, agents) {\n    state.recommendedRobots = agents;\n  },\n  SET_ROLEPLAY_ROBOTS(state, agents) {\n    state.rolePlayRobots = agents;\n  },\n  SET_CODING_ROBOTS(state, agents) {\n    state.codingRobots = agents;\n  },\n  SET_PAPER_ROBOTS(state, agents) {\n    state.paperRobots = agents;\n  },\n  SET_SELECTED_AGENT(state, agent) {\n    state.selectedAgent = agent;\n  },\n  SET_SUBSCRIPTIONS(state, agents) {\n    state.haveSubscribed = agents;\n  },\n  // 保持向后兼容的 mutation 名称\n  SET_HAVE_SUBSCRIBED(state, agents) {\n    state.haveSubscribed = agents;\n  }\n};\nconst actions = {\n  // 获取所有 AI 机器人信息\n  async fetchAllAgentsData({\n    commit\n  }) {\n    try {\n      const response = await apifetchAllAgentsData(); // 调用 API 请求\n      if (response.status === 200) {\n        const agents = response.data;\n        // 根据类型和功能分类\n        const recommendedRobots = agents.filter(agent => agent.type === 1); // 推荐机器人\n        const rolePlayRobots = agents.filter(agent => agent.type === 1); // 角色扮演机器人 (暂时与推荐相同)\n        const codingRobots = agents.filter(agent => agent.type === 2); // 代码编程机器人\n        const paperRobots = agents.filter(agent => agent.type === 3); // 论文修改机器人\n\n        // 更新状态\n        commit('SET_RECOMMENDED_ROBOTS', recommendedRobots);\n        commit('SET_ROLEPLAY_ROBOTS', rolePlayRobots);\n        commit('SET_CODING_ROBOTS', codingRobots);\n        commit('SET_PAPER_ROBOTS', paperRobots);\n        return {\n          success: true,\n          message: '获取 AI 机器人信息成功'\n        };\n      } else {\n        throw new Error(`API 响应异常，状态码: ${response.status}`);\n      }\n    } catch (error) {\n      console.error('Error occurred in fetchAllAgentsData:', error);\n      return {\n        success: false,\n        message: error.message\n      };\n    }\n  },\n  // 获取某个机器人的详细信息\n  async fetchAgentDetail({\n    commit\n  }, agentId) {\n    try {\n      const response = await apifetchAgentDetail(agentId); // 调用 API 请求\n      if (response.status === 200) {\n        const agent = response.data;\n        console.log('agent:', agent);\n        commit('SET_SELECTED_AGENT', agent); // 更新状态\n        return {\n          success: true,\n          message: '获取 AI 机器人信息成功'\n        };\n      } else {\n        throw new Error(`API 响应异常，状态码: ${response.status}`);\n      }\n    } catch (error) {\n      console.error('Error occurred in fetchAgentDetail:', error);\n      return {\n        success: false,\n        message: error.message\n      };\n    }\n  },\n  // 获取用户订阅的机器人\n  async fetchUserSubscriptions({\n    commit\n  }, userId) {\n    try {\n      const response = await apifetchUserSubscriptions(userId); // 调用 API 请求\n      if (response.status === 200) {\n        const agents = response.data;\n        commit('SET_HAVE_SUBSCRIBED', agents); // 更新状态\n        return {\n          success: true,\n          message: '获取用户订阅 AI 机器人成功'\n        };\n      } else {\n        throw new Error(`API 响应异常，状态码: ${response.status}`);\n      }\n    } catch (error) {\n      console.error('Error occurred in fetchUserSubscriptions:', error);\n      return {\n        success: false,\n        message: error.message\n      };\n    }\n  }\n};\nexport default {\n  namespaced: true,\n  state,\n  mutations,\n  actions,\n  getters\n};","map":{"version":3,"names":["fetchAllAgentsData","apifetchAllAgentsData","fetchAgentDetail","apifetchAgentDetail","fetchUserSubscriptions","apifetchUserSubscriptions","state","recommendedRobots","rolePlayRobots","codingRobots","paperRobots","selectedAgent","haveSubscribed","getters","allAgents","concat","mutations","SET_RECOMMENDED_ROBOTS","agents","SET_ROLEPLAY_ROBOTS","SET_CODING_ROBOTS","SET_PAPER_ROBOTS","SET_SELECTED_AGENT","agent","SET_SUBSCRIPTIONS","SET_HAVE_SUBSCRIBED","actions","commit","response","status","data","filter","type","success","message","Error","error","console","agentId","log","userId","namespaced"],"sources":["D:/1/razorai_frontend/RAZOR-AI--Frontend-main/src/store/agent.js"],"sourcesContent":["/*\nAI 机器人管理 (store/agent.js)\n    功能: 管理 AI 机器人的信息。\n    接口:\n        获取所有 AI 机器人信息 (/market)\n        获取某个机器人的详细信息 (/market/agentdetail/<int:agent_id>)\n        创建 AI 机器人 (/agent/user/creation)\n*/\nimport { fetchAllAgentsData as apifetchAllAgentsData } from '../utils/api'; // 引入 API 请求\nimport { fetchAgentDetail as apifetchAgentDetail } from '../utils/api'; // 引入 API 请求\nimport { fetchUserSubscriptions as apifetchUserSubscriptions } from '../utils/api';\nconst state = {\n  recommendedRobots: [], // 推荐机器人 (type=1)\n  rolePlayRobots: [], // 角色扮演机器人 (type=1)\n  codingRobots: [], // 代码编程机器人 (type=2)\n  paperRobots: [], // 论文修改机器人 (type=3)\n  selectedAgent: null,\n  haveSubscribed: [],\n};\n\nconst getters = {\n  allAgents: (state) => {\n    return state.recommendedRobots.concat(\n      state.rolePlayRobots,\n      state.codingRobots,\n      state.paperRobots\n    );\n  },\n  recommendedRobots: (state) => {\n    return state.recommendedRobots;\n  },\n  rolePlayRobots: (state) => {\n    return state.rolePlayRobots;\n  },\n  codingRobots: (state) => {\n    return state.codingRobots;\n  },\n  paperRobots: (state) => {\n    return state.paperRobots;\n  },\n  selectedAgent: (state) => {\n    return state.selectedAgent;\n  },\n  haveSubscribed: (state) => {\n    return state.haveSubscribed;\n  },\n};\n\nconst mutations = {\n  SET_RECOMMENDED_ROBOTS(state, agents) {\n    state.recommendedRobots = agents;\n  },\n  SET_ROLEPLAY_ROBOTS(state, agents) {\n    state.rolePlayRobots = agents;\n  },\n  SET_CODING_ROBOTS(state, agents) {\n    state.codingRobots = agents;\n  },\n  SET_PAPER_ROBOTS(state, agents) {\n    state.paperRobots = agents;\n  },\n  SET_SELECTED_AGENT(state, agent) {\n    state.selectedAgent = agent;\n  },\n  SET_SUBSCRIPTIONS(state, agents) {\n    state.haveSubscribed = agents;\n  },\n  // 保持向后兼容的 mutation 名称\n  SET_HAVE_SUBSCRIBED(state, agents) {\n    state.haveSubscribed = agents;\n  },\n};\n\nconst actions = {\n  // 获取所有 AI 机器人信息\n  async fetchAllAgentsData({ commit }) {\n    try {\n      const response = await apifetchAllAgentsData(); // 调用 API 请求\n      if (response.status === 200) {\n        const agents = response.data;\n        // 根据类型和功能分类\n        const recommendedRobots = agents.filter((agent) => agent.type === 1); // 推荐机器人\n        const rolePlayRobots = agents.filter((agent) => agent.type === 1); // 角色扮演机器人 (暂时与推荐相同)\n        const codingRobots = agents.filter((agent) => agent.type === 2); // 代码编程机器人\n        const paperRobots = agents.filter((agent) => agent.type === 3); // 论文修改机器人\n\n        // 更新状态\n        commit('SET_RECOMMENDED_ROBOTS', recommendedRobots);\n        commit('SET_ROLEPLAY_ROBOTS', rolePlayRobots);\n        commit('SET_CODING_ROBOTS', codingRobots);\n        commit('SET_PAPER_ROBOTS', paperRobots);\n\n        return { success: true, message: '获取 AI 机器人信息成功' };\n      } else {\n        throw new Error(`API 响应异常，状态码: ${response.status}`);\n      }\n    } catch (error) {\n      console.error('Error occurred in fetchAllAgentsData:', error);\n      return { success: false, message: error.message };\n    }\n  },\n\n  // 获取某个机器人的详细信息\n  async fetchAgentDetail({ commit }, agentId) {\n    try {\n      const response = await apifetchAgentDetail(agentId); // 调用 API 请求\n      if (response.status === 200) {\n        const agent = response.data;\n        console.log('agent:', agent);\n        commit('SET_SELECTED_AGENT', agent); // 更新状态\n        return { success: true, message: '获取 AI 机器人信息成功' };\n      } else {\n        throw new Error(`API 响应异常，状态码: ${response.status}`);\n      }\n    } catch (error) {\n      console.error('Error occurred in fetchAgentDetail:', error);\n      return { success: false, message: error.message };\n    }\n  },\n\n  // 获取用户订阅的机器人\n  async fetchUserSubscriptions({ commit }, userId) {\n    try {\n      const response = await apifetchUserSubscriptions(userId); // 调用 API 请求\n      if (response.status === 200) {\n        const agents = response.data;\n        commit('SET_HAVE_SUBSCRIBED', agents); // 更新状态\n        return { success: true, message: '获取用户订阅 AI 机器人成功' };\n      } else {\n        throw new Error(`API 响应异常，状态码: ${response.status}`);\n      }\n    } catch (error) {\n      console.error('Error occurred in fetchUserSubscriptions:', error);\n      return { success: false, message: error.message };\n    }\n  },\n};\n\nexport default {\n  namespaced: true,\n  state,\n  mutations,\n  actions,\n  getters,\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,kBAAkB,IAAIC,qBAAqB,QAAQ,cAAc,CAAC,CAAC;AAC5E,SAASC,gBAAgB,IAAIC,mBAAmB,QAAQ,cAAc,CAAC,CAAC;AACxE,SAASC,sBAAsB,IAAIC,yBAAyB,QAAQ,cAAc;AAClF,MAAMC,KAAK,GAAG;EACZC,iBAAiB,EAAE,EAAE;EAAE;EACvBC,cAAc,EAAE,EAAE;EAAE;EACpBC,YAAY,EAAE,EAAE;EAAE;EAClBC,WAAW,EAAE,EAAE;EAAE;EACjBC,aAAa,EAAE,IAAI;EACnBC,cAAc,EAAE;AAClB,CAAC;AAED,MAAMC,OAAO,GAAG;EACdC,SAAS,EAAGR,KAAK,IAAK;IACpB,OAAOA,KAAK,CAACC,iBAAiB,CAACQ,MAAM,CACnCT,KAAK,CAACE,cAAc,EACpBF,KAAK,CAACG,YAAY,EAClBH,KAAK,CAACI,WACR,CAAC;EACH,CAAC;EACDH,iBAAiB,EAAGD,KAAK,IAAK;IAC5B,OAAOA,KAAK,CAACC,iBAAiB;EAChC,CAAC;EACDC,cAAc,EAAGF,KAAK,IAAK;IACzB,OAAOA,KAAK,CAACE,cAAc;EAC7B,CAAC;EACDC,YAAY,EAAGH,KAAK,IAAK;IACvB,OAAOA,KAAK,CAACG,YAAY;EAC3B,CAAC;EACDC,WAAW,EAAGJ,KAAK,IAAK;IACtB,OAAOA,KAAK,CAACI,WAAW;EAC1B,CAAC;EACDC,aAAa,EAAGL,KAAK,IAAK;IACxB,OAAOA,KAAK,CAACK,aAAa;EAC5B,CAAC;EACDC,cAAc,EAAGN,KAAK,IAAK;IACzB,OAAOA,KAAK,CAACM,cAAc;EAC7B;AACF,CAAC;AAED,MAAMI,SAAS,GAAG;EAChBC,sBAAsBA,CAACX,KAAK,EAAEY,MAAM,EAAE;IACpCZ,KAAK,CAACC,iBAAiB,GAAGW,MAAM;EAClC,CAAC;EACDC,mBAAmBA,CAACb,KAAK,EAAEY,MAAM,EAAE;IACjCZ,KAAK,CAACE,cAAc,GAAGU,MAAM;EAC/B,CAAC;EACDE,iBAAiBA,CAACd,KAAK,EAAEY,MAAM,EAAE;IAC/BZ,KAAK,CAACG,YAAY,GAAGS,MAAM;EAC7B,CAAC;EACDG,gBAAgBA,CAACf,KAAK,EAAEY,MAAM,EAAE;IAC9BZ,KAAK,CAACI,WAAW,GAAGQ,MAAM;EAC5B,CAAC;EACDI,kBAAkBA,CAAChB,KAAK,EAAEiB,KAAK,EAAE;IAC/BjB,KAAK,CAACK,aAAa,GAAGY,KAAK;EAC7B,CAAC;EACDC,iBAAiBA,CAAClB,KAAK,EAAEY,MAAM,EAAE;IAC/BZ,KAAK,CAACM,cAAc,GAAGM,MAAM;EAC/B,CAAC;EACD;EACAO,mBAAmBA,CAACnB,KAAK,EAAEY,MAAM,EAAE;IACjCZ,KAAK,CAACM,cAAc,GAAGM,MAAM;EAC/B;AACF,CAAC;AAED,MAAMQ,OAAO,GAAG;EACd;EACA,MAAM1B,kBAAkBA,CAAC;IAAE2B;EAAO,CAAC,EAAE;IACnC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAM3B,qBAAqB,CAAC,CAAC,CAAC,CAAC;MAChD,IAAI2B,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;QAC3B,MAAMX,MAAM,GAAGU,QAAQ,CAACE,IAAI;QAC5B;QACA,MAAMvB,iBAAiB,GAAGW,MAAM,CAACa,MAAM,CAAER,KAAK,IAAKA,KAAK,CAACS,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;QACtE,MAAMxB,cAAc,GAAGU,MAAM,CAACa,MAAM,CAAER,KAAK,IAAKA,KAAK,CAACS,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;QACnE,MAAMvB,YAAY,GAAGS,MAAM,CAACa,MAAM,CAAER,KAAK,IAAKA,KAAK,CAACS,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;QACjE,MAAMtB,WAAW,GAAGQ,MAAM,CAACa,MAAM,CAAER,KAAK,IAAKA,KAAK,CAACS,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;;QAEhE;QACAL,MAAM,CAAC,wBAAwB,EAAEpB,iBAAiB,CAAC;QACnDoB,MAAM,CAAC,qBAAqB,EAAEnB,cAAc,CAAC;QAC7CmB,MAAM,CAAC,mBAAmB,EAAElB,YAAY,CAAC;QACzCkB,MAAM,CAAC,kBAAkB,EAAEjB,WAAW,CAAC;QAEvC,OAAO;UAAEuB,OAAO,EAAE,IAAI;UAAEC,OAAO,EAAE;QAAgB,CAAC;MACpD,CAAC,MAAM;QACL,MAAM,IAAIC,KAAK,CAAC,iBAAiBP,QAAQ,CAACC,MAAM,EAAE,CAAC;MACrD;IACF,CAAC,CAAC,OAAOO,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;MAC7D,OAAO;QAAEH,OAAO,EAAE,KAAK;QAAEC,OAAO,EAAEE,KAAK,CAACF;MAAQ,CAAC;IACnD;EACF,CAAC;EAED;EACA,MAAMhC,gBAAgBA,CAAC;IAAEyB;EAAO,CAAC,EAAEW,OAAO,EAAE;IAC1C,IAAI;MACF,MAAMV,QAAQ,GAAG,MAAMzB,mBAAmB,CAACmC,OAAO,CAAC,CAAC,CAAC;MACrD,IAAIV,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;QAC3B,MAAMN,KAAK,GAAGK,QAAQ,CAACE,IAAI;QAC3BO,OAAO,CAACE,GAAG,CAAC,QAAQ,EAAEhB,KAAK,CAAC;QAC5BI,MAAM,CAAC,oBAAoB,EAAEJ,KAAK,CAAC,CAAC,CAAC;QACrC,OAAO;UAAEU,OAAO,EAAE,IAAI;UAAEC,OAAO,EAAE;QAAgB,CAAC;MACpD,CAAC,MAAM;QACL,MAAM,IAAIC,KAAK,CAAC,iBAAiBP,QAAQ,CAACC,MAAM,EAAE,CAAC;MACrD;IACF,CAAC,CAAC,OAAOO,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAC3D,OAAO;QAAEH,OAAO,EAAE,KAAK;QAAEC,OAAO,EAAEE,KAAK,CAACF;MAAQ,CAAC;IACnD;EACF,CAAC;EAED;EACA,MAAM9B,sBAAsBA,CAAC;IAAEuB;EAAO,CAAC,EAAEa,MAAM,EAAE;IAC/C,IAAI;MACF,MAAMZ,QAAQ,GAAG,MAAMvB,yBAAyB,CAACmC,MAAM,CAAC,CAAC,CAAC;MAC1D,IAAIZ,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;QAC3B,MAAMX,MAAM,GAAGU,QAAQ,CAACE,IAAI;QAC5BH,MAAM,CAAC,qBAAqB,EAAET,MAAM,CAAC,CAAC,CAAC;QACvC,OAAO;UAAEe,OAAO,EAAE,IAAI;UAAEC,OAAO,EAAE;QAAkB,CAAC;MACtD,CAAC,MAAM;QACL,MAAM,IAAIC,KAAK,CAAC,iBAAiBP,QAAQ,CAACC,MAAM,EAAE,CAAC;MACrD;IACF,CAAC,CAAC,OAAOO,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAAC;MACjE,OAAO;QAAEH,OAAO,EAAE,KAAK;QAAEC,OAAO,EAAEE,KAAK,CAACF;MAAQ,CAAC;IACnD;EACF;AACF,CAAC;AAED,eAAe;EACbO,UAAU,EAAE,IAAI;EAChBnC,KAAK;EACLU,SAAS;EACTU,OAAO;EACPb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}