{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mapActions, mapState } from 'vuex';\nimport { subscribeAgent as apiSubscribeAgent } from '../utils/api';\nimport RobotDetailDialog from './RobotDetailPage.vue';\nimport SubscriptionSelector from '@/components/SubscriptionSelector.vue';\nexport default {\n  name: 'RobotMarketPage',\n  components: {\n    RobotDetailDialog,\n    SubscriptionSelector\n  },\n  data() {\n    return {\n      searchKeyword: '',\n      currentSearchMode: 'tag',\n      showSearchResults: false,\n      searchResults: [],\n      categoryDialogVisible: false,\n      categoryDialogTitle: '',\n      categoryDetailRobots: [],\n      subscriptionDialogVisible: false,\n      currentRobotForSubscription: null,\n      loading: false,\n      robotDetailVisible: false,\n      currentRobotId: null\n    };\n  },\n  computed: {\n    ...mapState('user', ['isLoggedIn', 'userName', 'userId']),\n    ...mapState('agent', {\n      textRobots: state => state.textAgents,\n      imageRobots: state => state.imageAgents,\n      videoRobots: state => state.videoAgents,\n      haveSubscribed: state => state.haveSubscribed\n    }),\n    currentSearchModeText() {\n      const modes = {\n        tag: '按标签搜索',\n        name: '按名称搜索',\n        description: '按描述搜索'\n      };\n      return modes[this.currentSearchMode];\n    },\n    allRobots() {\n      return [...this.textRobots, ...this.imageRobots, ...this.videoRobots];\n    }\n  },\n  created() {\n    this.getAllAgentsData();\n    this.getUserSubscriptions();\n  },\n  beforeDestroy() {\n    // 组件销毁前清理\n  },\n  methods: {\n    ...mapActions('agent', ['fetchAllAgentsData', 'fetchAgentDetail', 'fetchUserSubscriptions']),\n    async getAllAgentsData() {\n      this.loading = true;\n      try {\n        await this.fetchAllAgentsData();\n        // 确保所有机器人都有requiredPoints属性，默认为1\n        this.ensureRequiredPointsProperty();\n        console.log('获取机器人数据成功');\n      } catch (error) {\n        console.error('获取机器人数据失败:', error);\n        this.$message.error('获取机器人数据失败');\n      } finally {\n        this.loading = false;\n      }\n    },\n    ensureRequiredPointsProperty() {\n      // 确保所有机器人都有requiredPoints属性，默认为1\n      [...this.textRobots, ...this.imageRobots, ...this.videoRobots].forEach(robot => {\n        if (!robot.requiredPoints) {\n          robot.requiredPoints = 1;\n        }\n      });\n    },\n    async getUserSubscriptions() {\n      if (!this.userId) return;\n      try {\n        await this.fetchUserSubscriptions(this.userId);\n        console.log('获取用户订阅信息成功');\n      } catch (error) {\n        console.error('获取用户订阅信息失败:', error);\n      }\n    },\n    setSearchMode(mode) {\n      this.currentSearchMode = mode;\n      this.performSearch();\n    },\n    performSearch() {\n      if (!this.searchKeyword.trim()) {\n        this.showSearchResults = false;\n        return;\n      }\n      const keyword = this.searchKeyword.toLowerCase();\n      this.searchResults = this.allRobots.filter(robot => {\n        switch (this.currentSearchMode) {\n          case 'name':\n            return robot.name && robot.name.toLowerCase().includes(keyword);\n          case 'description':\n            return robot.description && robot.description.toLowerCase().includes(keyword);\n          case 'tag':\n          default:\n            return robot.name && robot.name.toLowerCase().includes(keyword) || robot.description && robot.description.toLowerCase().includes(keyword);\n        }\n      });\n      this.showSearchResults = true;\n    },\n    showCategoryDetail(categoryType) {\n      const titles = {\n        text: '文本对话机器人',\n        image: '图片生成机器人',\n        video: '音视频机器人'\n      };\n      this.categoryDialogTitle = titles[categoryType];\n      this.categoryDetailRobots = this.getRobotsByType(categoryType);\n      this.categoryDialogVisible = true;\n    },\n    showRobotDetail(robotId) {\n      this.currentRobotId = robotId;\n      this.robotDetailVisible = true;\n    },\n    subscribeRobot(robotId) {\n      //if (!this.isLoggedIn) {\n      //  this.$message.warning('请先登录');\n      //  return;\n      //}\n      // 如果已订阅，则进入对话页面\n      if (this.isSubscribed(robotId)) {\n        this.enterChatWithRobot(robotId);\n        return;\n      }\n      const robot = this.allRobots.find(r => r.id === robotId);\n      if (robot) {\n        this.currentRobotForSubscription = robot;\n        this.subscriptionDialogVisible = true;\n      }\n    },\n    // 新增方法：进入与机器人的对话\n    enterChatWithRobot(robotId) {\n      this.$router.push({\n        name: 'ConversationHistory',\n        params: {\n          id: robotId\n        }\n      });\n    },\n    // 订阅机器人\n    async handleSubscriptionConfirm(duration, points) {\n      if (!this.currentRobotForSubscription) return;\n      try {\n        const currentTime = this.formatDateTime(new Date());\n        const payload = {\n          user_id: this.userId,\n          agent_id: this.currentRobotForSubscription.id,\n          startime: currentTime,\n          duration: duration,\n          subscriptionType: 1\n        };\n        console.log('请求 payload:', payload);\n        console.log('订阅时长:', duration);\n        console.log('所需积分:', points);\n        const response = await apiSubscribeAgent(payload);\n        if (response.status === 200) {\n          this.$message.success('订阅成功！');\n          this.closeSubscriptionDialog();\n          this.getUserSubscriptions();\n          console.log('订阅成功!!!:', response);\n        } else {\n          this.$message.error('订阅失败，请稍后重试');\n        }\n      } catch (error) {\n        console.error('订阅失败:', error);\n        this.$message.error('订阅失败，请稍后重试');\n      }\n    },\n    closeSubscriptionDialog() {\n      this.subscriptionDialogVisible = false;\n      this.currentRobotForSubscription = null;\n    },\n    formatDateTime(date) {\n      const year = date.getFullYear();\n      const month = String(date.getMonth() + 1).padStart(2, '0');\n      const day = String(date.getDate()).padStart(2, '0');\n      const hours = String(date.getHours()).padStart(2, '0');\n      const minutes = String(date.getMinutes()).padStart(2, '0');\n      const seconds = String(date.getSeconds()).padStart(2, '0');\n      return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n    },\n    isSubscribed(robotId) {\n      return this.haveSubscribed.some(sub => sub.agent_id === robotId && sub.status);\n    },\n    getRobotsByType(type) {\n      switch (type) {\n        case 'text':\n          return this.textRobots;\n        case 'image':\n          return this.imageRobots;\n        case 'video':\n          return this.videoRobots;\n        default:\n          return [];\n      }\n    },\n    getRobotImage(type) {\n      switch (type) {\n        case 1:\n          return require('@/assets/images/Agents/textAgent.png');\n        case 2:\n          return require('@/assets/images/Agents/imageAgent.png');\n        case 3:\n          return require('@/assets/images/Agents/videoAgent.png');\n        default:\n          return require('@/assets/images/Agents/baseAgent.png');\n      }\n    },\n    truncate(text, length = 50) {\n      if (!text) return '';\n      return text.length > length ? text.slice(0, length) + '...' : text;\n    },\n    formatRequiredPoints(points) {\n      return `${points || 1} 积分`;\n    }\n  }\n};","map":{"version":3,"names":["mapActions","mapState","subscribeAgent","apiSubscribeAgent","RobotDetailDialog","SubscriptionSelector","name","components","data","searchKeyword","currentSearchMode","showSearchResults","searchResults","categoryDialogVisible","categoryDialogTitle","categoryDetailRobots","subscriptionDialogVisible","currentRobotForSubscription","loading","robotDetailVisible","currentRobotId","computed","textRobots","state","textAgents","imageRobots","imageAgents","videoRobots","videoAgents","haveSubscribed","currentSearchModeText","modes","tag","description","allRobots","created","getAllAgentsData","getUserSubscriptions","beforeDestroy","methods","fetchAllAgentsData","ensureRequiredPointsProperty","console","log","error","$message","forEach","robot","requiredPoints","userId","fetchUserSubscriptions","setSearchMode","mode","performSearch","trim","keyword","toLowerCase","filter","includes","showCategoryDetail","categoryType","titles","text","image","video","getRobotsByType","showRobotDetail","robotId","subscribeRobot","isSubscribed","enterChatWithRobot","find","r","id","$router","push","params","handleSubscriptionConfirm","duration","points","currentTime","formatDateTime","Date","payload","user_id","agent_id","startime","subscriptionType","response","status","success","closeSubscriptionDialog","date","year","getFullYear","month","String","getMonth","padStart","day","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","some","sub","type","getRobotImage","require","truncate","length","slice","formatRequiredPoints"],"sources":["src/views/RobotMarketPage.vue"],"sourcesContent":["<template>\n  <div class=\"robot-market\">\n    <!-- 搜索区域 -->\n    <div class=\"search-container\">\n      <div class=\"search-wrapper\">\n        <div class=\"search-mode-selector\">\n          <el-dropdown @command=\"setSearchMode\">\n            <el-button class=\"search-mode-btn\">\n              {{ currentSearchModeText }}\n              <i class=\"el-icon-arrow-down\"></i>\n            </el-button>\n            <el-dropdown-menu slot=\"dropdown\">\n              <el-dropdown-item command=\"tag\">按标签搜索</el-dropdown-item>\n              <el-dropdown-item command=\"name\">按名称搜索</el-dropdown-item>\n              <el-dropdown-item command=\"description\"\n                >按描述搜索</el-dropdown-item\n              >\n            </el-dropdown-menu>\n          </el-dropdown>\n        </div>\n        <el-input\n          v-model=\"searchKeyword\"\n          class=\"search-input\"\n          placeholder=\"搜索机器人...\"\n          @input=\"performSearch\"\n          clearable\n        >\n          <el-button\n            slot=\"append\"\n            icon=\"el-icon-search\"\n            @click=\"performSearch\"\n          ></el-button>\n        </el-input>\n      </div>\n    </div>\n\n    <!-- 搜索结果 -->\n    <div v-if=\"showSearchResults\" class=\"search-results\">\n      <h2 class=\"section-title\">搜索结果 ({{ searchResults.length }})</h2>\n      <div class=\"robots-grid\">\n        <el-card\n          v-for=\"robot in searchResults\"\n          :key=\"robot.id\"\n          class=\"robot-card\"\n          @click.native=\"showRobotDetail(robot.id)\"\n        >\n          <div class=\"robot-header\">\n            <img\n              :src=\"getRobotImage(robot.type)\"\n              alt=\"robot\"\n              class=\"robot-logo\"\n            />\n            <div class=\"robot-name\">{{ robot.name }}</div>\n          </div>\n          <div class=\"robot-description\">\n            {{ truncate(robot.description, 80) }}\n          </div>\n          <div class=\"robot-rating-price\">\n            <div class=\"robot-rating\">\n              <i class=\"el-icon-star-on\" style=\"color: #ffc107\"></i>\n              {{ robot.rating || 4.5 }}\n            </div>\n            <div class=\"robot-price\">\n              {{ formatRequiredPoints(robot.requiredPoints) }}\n            </div>\n          </div>\n          <div class=\"robot-actions\">\n            <el-button size=\"mini\" @click.stop=\"showRobotDetail(robot.id)\">\n              查看详情\n            </el-button>\n            <el-button\n              type=\"primary\"\n              size=\"mini\"\n              :class=\"{ subscribed: isSubscribed(robot.id) }\"\n              @click.stop=\"subscribeRobot(robot.id)\"\n            >\n              {{ isSubscribed(robot.id) ? '开始对话' : '订阅' }}\n            </el-button>\n          </div>\n        </el-card>\n      </div>\n    </div>\n\n    <!-- 机器人分类展示 -->\n    <div v-else class=\"robots-container\">\n      <!-- 推荐机器人 -->\n      <div class=\"category-section\">\n        <div class=\"category-header\">\n          <h3 class=\"category-title\">\n            <i class=\"el-icon-document\"></i>\n            推荐机器人\n          </h3>\n          <el-button class=\"view-more-btn\" @click=\"showCategoryDetail('text')\">\n            查看更多\n          </el-button>\n        </div>\n        <div class=\"robots-grid\">\n          <el-card\n            v-for=\"robot in textRobots.slice(0, 4)\"\n            :key=\"robot.id\"\n            class=\"robot-card\"\n            @click.native=\"showRobotDetail(robot.id)\"\n          >\n            <div class=\"robot-header\">\n              <img\n                :src=\"getRobotImage(robot.type)\"\n                alt=\"robot\"\n                class=\"robot-logo\"\n              />\n              <div class=\"robot-name\">{{ robot.name }}</div>\n            </div>\n            <div class=\"robot-description\">\n              {{ truncate(robot.description, 80) }}\n            </div>\n            <div class=\"robot-rating-price\">\n              <div class=\"robot-rating\">\n                <i class=\"el-icon-star-on\" style=\"color: #ffc107\"></i>\n                {{ robot.rating || 4.5 }}\n              </div>\n              <div class=\"robot-price\">\n                {{ formatRequiredPoints(robot.requiredPoints) }}\n              </div>\n            </div>\n            <div class=\"robot-actions\">\n              <el-button size=\"mini\" @click.stop=\"showRobotDetail(robot.id)\">\n                查看详情\n              </el-button>\n              <el-button\n                type=\"prefered\"\n                size=\"mini\"\n                :class=\"{ subscribed: isSubscribed(robot.id) }\"\n                @click.stop=\"subscribeRobot(robot.id)\"\n              >\n                {{ isSubscribed(robot.id) ? '开始对话' : '订阅' }}\n              </el-button>\n            </div>\n          </el-card>\n        </div>\n      </div>\n\n      <!-- 角色扮演机器人 -->\n      <div class=\"category-section\">\n        <div class=\"category-header\">\n          <h3 class=\"category-title\">\n            <i class=\"el-icon-document\"></i>\n            角色扮演机器人\n          </h3>\n          <el-button class=\"view-more-btn\" @click=\"showCategoryDetail('text')\">\n            查看更多\n          </el-button>\n        </div>\n        <div class=\"robots-grid\">\n          <el-card\n            v-for=\"robot in textRobots.slice(0, 4)\"\n            :key=\"robot.id\"\n            class=\"robot-card\"\n            @click.native=\"showRobotDetail(robot.id)\"\n          >\n            <div class=\"robot-header\">\n              <img\n                :src=\"getRobotImage(robot.type)\"\n                alt=\"robot\"\n                class=\"robot-logo\"\n              />\n              <div class=\"robot-name\">{{ robot.name }}</div>\n            </div>\n            <div class=\"robot-description\">\n              {{ truncate(robot.description, 80) }}\n            </div>\n            <div class=\"robot-rating-price\">\n              <div class=\"robot-rating\">\n                <i class=\"el-icon-star-on\" style=\"color: #ffc107\"></i>\n                {{ robot.rating || 4.5 }}\n              </div>\n              <div class=\"robot-price\">\n                {{ formatRequiredPoints(robot.requiredPoints) }}\n              </div>\n            </div>\n            <div class=\"robot-actions\">\n              <el-button size=\"mini\" @click.stop=\"showRobotDetail(robot.id)\">\n                查看详情\n              </el-button>\n              <el-button\n                type=\"primary\"\n                size=\"mini\"\n                :class=\"{ subscribed: isSubscribed(robot.id) }\"\n                @click.stop=\"subscribeRobot(robot.id)\"\n              >\n                {{ isSubscribed(robot.id) ? '开始对话' : '订阅' }}\n              </el-button>\n            </div>\n          </el-card>\n        </div>\n      </div>\n\n      <!-- 代码编程机器人 -->\n      <div class=\"category-section\">\n        <div class=\"category-header\">\n          <h3 class=\"category-title\">\n            <i class=\"el-icon-picture-outline\"></i>\n            代码编程机器人\n          </h3>\n          <el-button class=\"view-more-btn\" @click=\"showCategoryDetail('image')\">\n            查看更多\n          </el-button>\n        </div>\n        <div class=\"robots-grid\">\n          <el-card\n            v-for=\"robot in imageRobots.slice(0, 4)\"\n            :key=\"robot.id\"\n            class=\"robot-card\"\n            @click.native=\"showRobotDetail(robot.id)\"\n          >\n            <div class=\"robot-header\">\n              <img\n                :src=\"getRobotImage(robot.type)\"\n                alt=\"robot\"\n                class=\"robot-logo\"\n              />\n              <div class=\"robot-name\">{{ robot.name }}</div>\n            </div>\n            <div class=\"robot-description\">\n              {{ truncate(robot.description, 80) }}\n            </div>\n            <div class=\"robot-rating-price\">\n              <div class=\"robot-rating\">\n                <i class=\"el-icon-star-on\" style=\"color: #ffc107\"></i>\n                {{ robot.rating || 4.5 }}\n              </div>\n              <div class=\"robot-price\">\n                {{ formatRequiredPoints(robot.requiredPoints) }}\n              </div>\n            </div>\n            <div class=\"robot-actions\">\n              <el-button size=\"mini\" @click.stop=\"showRobotDetail(robot.id)\">\n                查看详情\n              </el-button>\n              <el-button\n                type=\"primary\"\n                size=\"mini\"\n                :class=\"{ subscribed: isSubscribed(robot.id) }\"\n                @click.stop=\"subscribeRobot(robot.id)\"\n              >\n                {{ isSubscribed(robot.id) ? '开始对话' : '订阅' }}\n              </el-button>\n            </div>\n          </el-card>\n        </div>\n      </div>\n\n      <!-- 论文修改机器人 -->\n      <div class=\"category-section\">\n        <div class=\"category-header\">\n          <h3 class=\"category-title\">\n            <i class=\"el-icon-video-camera\"></i>\n            论文修改机器人\n          </h3>\n          <el-button class=\"view-more-btn\" @click=\"showCategoryDetail('video')\">\n            查看更多\n          </el-button>\n        </div>\n        <div class=\"robots-grid\">\n          <el-card\n            v-for=\"robot in videoRobots.slice(0, 4)\"\n            :key=\"robot.id\"\n            class=\"robot-card\"\n            @click.native=\"showRobotDetail(robot.id)\"\n          >\n            <div class=\"robot-header\">\n              <img\n                :src=\"getRobotImage(robot.type)\"\n                alt=\"robot\"\n                class=\"robot-logo\"\n              />\n              <div class=\"robot-name\">{{ robot.name }}</div>\n            </div>\n            <div class=\"robot-description\">\n              {{ truncate(robot.description, 80) }}\n            </div>\n            <div class=\"robot-rating-price\">\n              <div class=\"robot-rating\">\n                <i class=\"el-icon-star-on\" style=\"color: #ffc107\"></i>\n                {{ robot.rating || 4.5 }}\n              </div>\n              <div class=\"robot-price\">\n                {{ formatRequiredPoints(robot.requiredPoints) }}\n              </div>\n            </div>\n            <div class=\"robot-actions\">\n              <el-button size=\"mini\" @click.stop=\"showRobotDetail(robot.id)\">\n                查看详情\n              </el-button>\n              <el-button\n                type=\"primary\"\n                size=\"mini\"\n                :class=\"{ subscribed: isSubscribed(robot.id) }\"\n                @click.stop=\"subscribeRobot(robot.id)\"\n              >\n                {{ isSubscribed(robot.id) ? '开始对话' : '订阅' }}\n              </el-button>\n            </div>\n          </el-card>\n        </div>\n      </div>\n    </div>\n\n    <!-- 分类详情对话框 -->\n    <el-dialog\n      :title=\"categoryDialogTitle\"\n      :visible.sync=\"categoryDialogVisible\"\n      width=\"80%\"\n      center\n      :close-on-click-modal=\"false\"\n      :close-on-press-escape=\"false\"\n    >\n      <div class=\"category-detail-grid\">\n        <el-card\n          v-for=\"robot in categoryDetailRobots\"\n          :key=\"robot.id\"\n          class=\"robot-card\"\n          @click.native=\"showRobotDetail(robot.id)\"\n        >\n          <div class=\"robot-header\">\n            <img\n              :src=\"getRobotImage(robot.type)\"\n              alt=\"robot\"\n              class=\"robot-logo\"\n            />\n            <div class=\"robot-name\">{{ robot.name }}</div>\n          </div>\n          <div class=\"robot-description\">\n            {{ truncate(robot.description, 80) }}\n          </div>\n          <div class=\"robot-rating-price\">\n            <div class=\"robot-rating\">\n              <i class=\"el-icon-star-on\" style=\"color: #ffc107\"></i>\n              {{ robot.rating || 4.5 }}\n            </div>\n            <div class=\"robot-price\">\n              {{ formatRequiredPoints(robot.requiredPoints) }}\n            </div>\n          </div>\n          <div class=\"robot-actions\">\n            <el-button size=\"mini\" @click.stop=\"showRobotDetail(robot.id)\">\n              查看详情\n            </el-button>\n            <el-button\n              type=\"primary\"\n              size=\"mini\"\n              :class=\"{ subscribed: isSubscribed(robot.id) }\"\n              @click.stop=\"subscribeRobot(robot.id)\"\n            >\n              {{ isSubscribed(robot.id) ? '开始对话' : '订阅' }}\n            </el-button>\n          </div>\n        </el-card>\n      </div>\n    </el-dialog>\n\n    <!-- 订阅确认对话框 -->\n    <el-dialog\n      title=\"订阅确认\"\n      :visible.sync=\"subscriptionDialogVisible\"\n      width=\"400px\"\n      center\n      :close-on-click-modal=\"false\"\n      :close-on-press-escape=\"false\"\n    >\n      <subscription-selector\n        :robotId=\"\n          currentRobotForSubscription ? currentRobotForSubscription.id : 0\n        \"\n        :requiredPoints=\"\n          currentRobotForSubscription\n            ? currentRobotForSubscription.requiredPoints || 1\n            : 1\n        \"\n        :onConfirm=\"handleSubscriptionConfirm\"\n        :onClose=\"closeSubscriptionDialog\"\n      />\n    </el-dialog>\n\n    <!-- 机器人详情弹窗 -->\n    <robot-detail-dialog\n      :visible=\"robotDetailVisible\"\n      :robotId=\"currentRobotId\"\n      @close=\"robotDetailVisible = false\"\n      @show-robot=\"showRobotDetail\"\n    />\n  </div>\n</template>\n\n<script>\nimport { mapActions, mapState } from 'vuex';\nimport { subscribeAgent as apiSubscribeAgent } from '../utils/api';\nimport RobotDetailDialog from './RobotDetailPage.vue';\nimport SubscriptionSelector from '@/components/SubscriptionSelector.vue';\n\nexport default {\n  name: 'RobotMarketPage',\n  components: {\n    RobotDetailDialog,\n    SubscriptionSelector,\n  },\n  data() {\n    return {\n      searchKeyword: '',\n      currentSearchMode: 'tag',\n      showSearchResults: false,\n      searchResults: [],\n      categoryDialogVisible: false,\n      categoryDialogTitle: '',\n      categoryDetailRobots: [],\n      subscriptionDialogVisible: false,\n      currentRobotForSubscription: null,\n      loading: false,\n      robotDetailVisible: false,\n      currentRobotId: null,\n    };\n  },\n  computed: {\n    ...mapState('user', ['isLoggedIn', 'userName', 'userId']),\n    ...mapState('agent', {\n      textRobots: (state) => state.textAgents,\n      imageRobots: (state) => state.imageAgents,\n      videoRobots: (state) => state.videoAgents,\n      haveSubscribed: (state) => state.haveSubscribed,\n    }),\n    currentSearchModeText() {\n      const modes = {\n        tag: '按标签搜索',\n        name: '按名称搜索',\n        description: '按描述搜索',\n      };\n      return modes[this.currentSearchMode];\n    },\n    allRobots() {\n      return [...this.textRobots, ...this.imageRobots, ...this.videoRobots];\n    },\n  },\n  created() {\n    this.getAllAgentsData();\n    this.getUserSubscriptions();\n  },\n  beforeDestroy() {\n    // 组件销毁前清理\n  },\n  methods: {\n    ...mapActions('agent', [\n      'fetchAllAgentsData',\n      'fetchAgentDetail',\n      'fetchUserSubscriptions',\n    ]),\n    async getAllAgentsData() {\n      this.loading = true;\n      try {\n        await this.fetchAllAgentsData();\n        // 确保所有机器人都有requiredPoints属性，默认为1\n        this.ensureRequiredPointsProperty();\n        console.log('获取机器人数据成功');\n      } catch (error) {\n        console.error('获取机器人数据失败:', error);\n        this.$message.error('获取机器人数据失败');\n      } finally {\n        this.loading = false;\n      }\n    },\n    ensureRequiredPointsProperty() {\n      // 确保所有机器人都有requiredPoints属性，默认为1\n      [...this.textRobots, ...this.imageRobots, ...this.videoRobots].forEach(\n        (robot) => {\n          if (!robot.requiredPoints) {\n            robot.requiredPoints = 1;\n          }\n        }\n      );\n    },\n    async getUserSubscriptions() {\n      if (!this.userId) return;\n      try {\n        await this.fetchUserSubscriptions(this.userId);\n        console.log('获取用户订阅信息成功');\n      } catch (error) {\n        console.error('获取用户订阅信息失败:', error);\n      }\n    },\n    setSearchMode(mode) {\n      this.currentSearchMode = mode;\n      this.performSearch();\n    },\n    performSearch() {\n      if (!this.searchKeyword.trim()) {\n        this.showSearchResults = false;\n        return;\n      }\n\n      const keyword = this.searchKeyword.toLowerCase();\n      this.searchResults = this.allRobots.filter((robot) => {\n        switch (this.currentSearchMode) {\n          case 'name':\n            return robot.name && robot.name.toLowerCase().includes(keyword);\n          case 'description':\n            return (\n              robot.description &&\n              robot.description.toLowerCase().includes(keyword)\n            );\n          case 'tag':\n          default:\n            return (\n              (robot.name && robot.name.toLowerCase().includes(keyword)) ||\n              (robot.description &&\n                robot.description.toLowerCase().includes(keyword))\n            );\n        }\n      });\n      this.showSearchResults = true;\n    },\n    showCategoryDetail(categoryType) {\n      const titles = {\n        text: '文本对话机器人',\n        image: '图片生成机器人',\n        video: '音视频机器人',\n      };\n      this.categoryDialogTitle = titles[categoryType];\n      this.categoryDetailRobots = this.getRobotsByType(categoryType);\n      this.categoryDialogVisible = true;\n    },\n    showRobotDetail(robotId) {\n      this.currentRobotId = robotId;\n      this.robotDetailVisible = true;\n    },\n    subscribeRobot(robotId) {\n      //if (!this.isLoggedIn) {\n      //  this.$message.warning('请先登录');\n      //  return;\n      //}\n      // 如果已订阅，则进入对话页面\n      if (this.isSubscribed(robotId)) {\n        this.enterChatWithRobot(robotId);\n        return;\n      }\n\n      const robot = this.allRobots.find((r) => r.id === robotId);\n      if (robot) {\n        this.currentRobotForSubscription = robot;\n        this.subscriptionDialogVisible = true;\n      }\n    },\n\n    // 新增方法：进入与机器人的对话\n    enterChatWithRobot(robotId) {\n      this.$router.push({\n        name: 'ConversationHistory',\n        params: { id: robotId },\n      });\n    },\n    // 订阅机器人\n    async handleSubscriptionConfirm(duration, points) {\n      if (!this.currentRobotForSubscription) return;\n\n      try {\n        const currentTime = this.formatDateTime(new Date());\n        const payload = {\n          user_id: this.userId,\n          agent_id: this.currentRobotForSubscription.id,\n          startime: currentTime,\n          duration: duration,\n          subscriptionType: 1,\n        };\n\n        console.log('请求 payload:', payload);\n        console.log('订阅时长:', duration);\n        console.log('所需积分:', points);\n        const response = await apiSubscribeAgent(payload);\n        if (response.status === 200) {\n          this.$message.success('订阅成功！');\n          this.closeSubscriptionDialog();\n          this.getUserSubscriptions();\n          console.log('订阅成功!!!:', response);\n        } else {\n          this.$message.error('订阅失败，请稍后重试');\n        }\n      } catch (error) {\n        console.error('订阅失败:', error);\n        this.$message.error('订阅失败，请稍后重试');\n      }\n    },\n    closeSubscriptionDialog() {\n      this.subscriptionDialogVisible = false;\n      this.currentRobotForSubscription = null;\n    },\n    formatDateTime(date) {\n      const year = date.getFullYear();\n      const month = String(date.getMonth() + 1).padStart(2, '0');\n      const day = String(date.getDate()).padStart(2, '0');\n      const hours = String(date.getHours()).padStart(2, '0');\n      const minutes = String(date.getMinutes()).padStart(2, '0');\n      const seconds = String(date.getSeconds()).padStart(2, '0');\n      return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n    },\n    isSubscribed(robotId) {\n      return this.haveSubscribed.some(\n        (sub) => sub.agent_id === robotId && sub.status\n      );\n    },\n    getRobotsByType(type) {\n      switch (type) {\n        case 'text':\n          return this.textRobots;\n        case 'image':\n          return this.imageRobots;\n        case 'video':\n          return this.videoRobots;\n        default:\n          return [];\n      }\n    },\n    getRobotImage(type) {\n      switch (type) {\n        case 1:\n          return require('@/assets/images/Agents/textAgent.png');\n        case 2:\n          return require('@/assets/images/Agents/imageAgent.png');\n        case 3:\n          return require('@/assets/images/Agents/videoAgent.png');\n        default:\n          return require('@/assets/images/Agents/baseAgent.png');\n      }\n    },\n    truncate(text, length = 50) {\n      if (!text) return '';\n      return text.length > length ? text.slice(0, length) + '...' : text;\n    },\n    formatRequiredPoints(points) {\n      return `${points || 1} 积分`;\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@use '@/assets/styles/variables.scss' as *;\n\n.robot-market {\n  padding: 20px;\n  min-height: 100vh;\n\n  .search-container {\n    background: white;\n    padding: 20px;\n    margin-bottom: 20px;\n    border-radius: 8px;\n    box-shadow: $box-shadow-light;\n\n    .search-wrapper {\n      display: flex;\n      align-items: center;\n      gap: 0;\n      max-width: 800px;\n\n      .search-mode-selector {\n        min-width: 120px;\n\n        .search-mode-btn {\n          border-radius: 6px 0 0 6px;\n          background: $accent-color;\n          color: white;\n          border-color: $accent-color;\n\n          &:hover {\n            background: $accent-hover-color;\n            border-color: $accent-hover-color;\n          }\n        }\n      }\n\n      .search-input {\n        flex: 1;\n\n        :deep(.el-input__inner) {\n          border-radius: 0;\n          border-left: none;\n        }\n\n        :deep(.el-input-group__append) {\n          border-radius: 0 6px 6px 0;\n          background: $accent-color;\n          color: white;\n          border-color: $accent-color;\n\n          &:hover {\n            background: $accent-hover-color;\n          }\n        }\n      }\n    }\n  }\n\n  .search-results,\n  .robots-container {\n    .section-title {\n      font-size: 1.5rem;\n      color: $text-color;\n      margin-bottom: 20px;\n      text-align: center;\n    }\n\n    .category-section {\n      margin-bottom: 40px;\n\n      .category-header {\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        margin-bottom: 20px;\n\n        .category-title {\n          font-size: 1.2rem;\n          color: $text-color;\n          font-weight: 600;\n          display: flex;\n          align-items: center;\n          gap: 8px;\n\n          i {\n            color: $accent-color;\n          }\n        }\n\n        .view-more-btn {\n          background: white;\n          color: $text-color;\n          border: 1px solid $border-color;\n          border-radius: 20px;\n          padding: 8px 16px;\n\n          &:hover {\n            background: $accent-color;\n            color: white;\n            border-color: $accent-color;\n          }\n        }\n      }\n    }\n\n    .robots-grid {\n      display: grid;\n      grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n      gap: 20px;\n    }\n  }\n\n  .robot-card {\n    cursor: pointer;\n    transition: all 0.3s ease;\n    border: 1px solid $border-color;\n\n    &:hover {\n      transform: translateY(-5px);\n      box-shadow: $box-shadow-medium;\n    }\n\n    .robot-header {\n      display: flex;\n      align-items: center;\n      gap: 10px;\n      margin-bottom: 10px;\n\n      .robot-logo {\n        width: 40px;\n        height: 40px;\n        border-radius: 50%;\n        object-fit: cover;\n      }\n\n      .robot-name {\n        font-size: 1rem;\n        font-weight: 600;\n        color: $text-color;\n        flex: 1;\n      }\n    }\n\n    .robot-description {\n      color: $text-color;\n      font-size: 0.9rem;\n      line-height: 1.4;\n      margin-bottom: 15px;\n      min-height: 40px;\n    }\n\n    .robot-rating-price {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      margin-bottom: 15px;\n      font-size: 0.9rem;\n\n      .robot-rating {\n        display: flex;\n        align-items: center;\n        gap: 4px;\n        color: #ffc107;\n      }\n\n      .robot-price {\n        color: $text-color;\n        font-weight: 500;\n      }\n    }\n\n    .robot-actions {\n      display: flex;\n      gap: 8px;\n\n      .el-button {\n        flex: 1;\n\n        &.subscribed {\n          background: #17a2b8;\n          border-color: #17a2b8;\n          color: white;\n\n          &:hover {\n            background: #138496;\n            border-color: #117a8b;\n          }\n        }\n      }\n    }\n  }\n\n  .category-detail-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));\n    gap: 15px;\n    max-height: 60vh;\n    overflow-y: auto;\n  }\n}\n\n@media (max-width: 768px) {\n  .robot-market {\n    padding: 10px;\n\n    .search-container {\n      padding: 15px;\n\n      .search-wrapper {\n        flex-direction: column;\n        gap: 10px;\n\n        .search-mode-selector {\n          width: 100%;\n\n          .search-mode-btn {\n            border-radius: 6px;\n          }\n        }\n\n        .search-input {\n          width: 100%;\n\n          :deep(.el-input__inner) {\n            border-radius: 6px 0 0 6px;\n            border: 1px solid $border-color;\n          }\n\n          :deep(.el-input-group__append) {\n            border-radius: 0 6px 6px 0;\n          }\n        }\n      }\n    }\n\n    .robots-grid {\n      grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n      gap: 15px;\n    }\n  }\n}\n\n/* 订阅对话框机器人名称样式 */\n.subscription-robot-name {\n  font-size: 16px;\n  font-weight: 500;\n  margin-bottom: 20px;\n  text-align: center;\n  color: #333;\n}\n</style>\n"],"mappings":";AAyYA,SAAAA,UAAA,EAAAC,QAAA;AACA,SAAAC,cAAA,IAAAC,iBAAA;AACA,OAAAC,iBAAA;AACA,OAAAC,oBAAA;AAEA;EACAC,IAAA;EACAC,UAAA;IACAH,iBAAA;IACAC;EACA;EACAG,KAAA;IACA;MACAC,aAAA;MACAC,iBAAA;MACAC,iBAAA;MACAC,aAAA;MACAC,qBAAA;MACAC,mBAAA;MACAC,oBAAA;MACAC,yBAAA;MACAC,2BAAA;MACAC,OAAA;MACAC,kBAAA;MACAC,cAAA;IACA;EACA;EACAC,QAAA;IACA,GAAApB,QAAA;IACA,GAAAA,QAAA;MACAqB,UAAA,EAAAC,KAAA,IAAAA,KAAA,CAAAC,UAAA;MACAC,WAAA,EAAAF,KAAA,IAAAA,KAAA,CAAAG,WAAA;MACAC,WAAA,EAAAJ,KAAA,IAAAA,KAAA,CAAAK,WAAA;MACAC,cAAA,EAAAN,KAAA,IAAAA,KAAA,CAAAM;IACA;IACAC,sBAAA;MACA,MAAAC,KAAA;QACAC,GAAA;QACA1B,IAAA;QACA2B,WAAA;MACA;MACA,OAAAF,KAAA,MAAArB,iBAAA;IACA;IACAwB,UAAA;MACA,gBAAAZ,UAAA,UAAAG,WAAA,UAAAE,WAAA;IACA;EACA;EACAQ,QAAA;IACA,KAAAC,gBAAA;IACA,KAAAC,oBAAA;EACA;EACAC,cAAA;IACA;EAAA,CACA;EACAC,OAAA;IACA,GAAAvC,UAAA,WACA,sBACA,oBACA,yBACA;IACA,MAAAoC,iBAAA;MACA,KAAAlB,OAAA;MACA;QACA,WAAAsB,kBAAA;QACA;QACA,KAAAC,4BAAA;QACAC,OAAA,CAAAC,GAAA;MACA,SAAAC,KAAA;QACAF,OAAA,CAAAE,KAAA,eAAAA,KAAA;QACA,KAAAC,QAAA,CAAAD,KAAA;MACA;QACA,KAAA1B,OAAA;MACA;IACA;IACAuB,6BAAA;MACA;MACA,SAAAnB,UAAA,UAAAG,WAAA,UAAAE,WAAA,EAAAmB,OAAA,CACAC,KAAA;QACA,KAAAA,KAAA,CAAAC,cAAA;UACAD,KAAA,CAAAC,cAAA;QACA;MACA,CACA;IACA;IACA,MAAAX,qBAAA;MACA,UAAAY,MAAA;MACA;QACA,WAAAC,sBAAA,MAAAD,MAAA;QACAP,OAAA,CAAAC,GAAA;MACA,SAAAC,KAAA;QACAF,OAAA,CAAAE,KAAA,gBAAAA,KAAA;MACA;IACA;IACAO,cAAAC,IAAA;MACA,KAAA1C,iBAAA,GAAA0C,IAAA;MACA,KAAAC,aAAA;IACA;IACAA,cAAA;MACA,UAAA5C,aAAA,CAAA6C,IAAA;QACA,KAAA3C,iBAAA;QACA;MACA;MAEA,MAAA4C,OAAA,QAAA9C,aAAA,CAAA+C,WAAA;MACA,KAAA5C,aAAA,QAAAsB,SAAA,CAAAuB,MAAA,CAAAV,KAAA;QACA,aAAArC,iBAAA;UACA;YACA,OAAAqC,KAAA,CAAAzC,IAAA,IAAAyC,KAAA,CAAAzC,IAAA,CAAAkD,WAAA,GAAAE,QAAA,CAAAH,OAAA;UACA;YACA,OACAR,KAAA,CAAAd,WAAA,IACAc,KAAA,CAAAd,WAAA,CAAAuB,WAAA,GAAAE,QAAA,CAAAH,OAAA;UAEA;UACA;YACA,OACAR,KAAA,CAAAzC,IAAA,IAAAyC,KAAA,CAAAzC,IAAA,CAAAkD,WAAA,GAAAE,QAAA,CAAAH,OAAA,KACAR,KAAA,CAAAd,WAAA,IACAc,KAAA,CAAAd,WAAA,CAAAuB,WAAA,GAAAE,QAAA,CAAAH,OAAA;QAEA;MACA;MACA,KAAA5C,iBAAA;IACA;IACAgD,mBAAAC,YAAA;MACA,MAAAC,MAAA;QACAC,IAAA;QACAC,KAAA;QACAC,KAAA;MACA;MACA,KAAAlD,mBAAA,GAAA+C,MAAA,CAAAD,YAAA;MACA,KAAA7C,oBAAA,QAAAkD,eAAA,CAAAL,YAAA;MACA,KAAA/C,qBAAA;IACA;IACAqD,gBAAAC,OAAA;MACA,KAAA/C,cAAA,GAAA+C,OAAA;MACA,KAAAhD,kBAAA;IACA;IACAiD,eAAAD,OAAA;MACA;MACA;MACA;MACA;MACA;MACA,SAAAE,YAAA,CAAAF,OAAA;QACA,KAAAG,kBAAA,CAAAH,OAAA;QACA;MACA;MAEA,MAAApB,KAAA,QAAAb,SAAA,CAAAqC,IAAA,CAAAC,CAAA,IAAAA,CAAA,CAAAC,EAAA,KAAAN,OAAA;MACA,IAAApB,KAAA;QACA,KAAA9B,2BAAA,GAAA8B,KAAA;QACA,KAAA/B,yBAAA;MACA;IACA;IAEA;IACAsD,mBAAAH,OAAA;MACA,KAAAO,OAAA,CAAAC,IAAA;QACArE,IAAA;QACAsE,MAAA;UAAAH,EAAA,EAAAN;QAAA;MACA;IACA;IACA;IACA,MAAAU,0BAAAC,QAAA,EAAAC,MAAA;MACA,UAAA9D,2BAAA;MAEA;QACA,MAAA+D,WAAA,QAAAC,cAAA,KAAAC,IAAA;QACA,MAAAC,OAAA;UACAC,OAAA,OAAAnC,MAAA;UACAoC,QAAA,OAAApE,2BAAA,CAAAwD,EAAA;UACAa,QAAA,EAAAN,WAAA;UACAF,QAAA,EAAAA,QAAA;UACAS,gBAAA;QACA;QAEA7C,OAAA,CAAAC,GAAA,gBAAAwC,OAAA;QACAzC,OAAA,CAAAC,GAAA,UAAAmC,QAAA;QACApC,OAAA,CAAAC,GAAA,UAAAoC,MAAA;QACA,MAAAS,QAAA,SAAArF,iBAAA,CAAAgF,OAAA;QACA,IAAAK,QAAA,CAAAC,MAAA;UACA,KAAA5C,QAAA,CAAA6C,OAAA;UACA,KAAAC,uBAAA;UACA,KAAAtD,oBAAA;UACAK,OAAA,CAAAC,GAAA,aAAA6C,QAAA;QACA;UACA,KAAA3C,QAAA,CAAAD,KAAA;QACA;MACA,SAAAA,KAAA;QACAF,OAAA,CAAAE,KAAA,UAAAA,KAAA;QACA,KAAAC,QAAA,CAAAD,KAAA;MACA;IACA;IACA+C,wBAAA;MACA,KAAA3E,yBAAA;MACA,KAAAC,2BAAA;IACA;IACAgE,eAAAW,IAAA;MACA,MAAAC,IAAA,GAAAD,IAAA,CAAAE,WAAA;MACA,MAAAC,KAAA,GAAAC,MAAA,CAAAJ,IAAA,CAAAK,QAAA,QAAAC,QAAA;MACA,MAAAC,GAAA,GAAAH,MAAA,CAAAJ,IAAA,CAAAQ,OAAA,IAAAF,QAAA;MACA,MAAAG,KAAA,GAAAL,MAAA,CAAAJ,IAAA,CAAAU,QAAA,IAAAJ,QAAA;MACA,MAAAK,OAAA,GAAAP,MAAA,CAAAJ,IAAA,CAAAY,UAAA,IAAAN,QAAA;MACA,MAAAO,OAAA,GAAAT,MAAA,CAAAJ,IAAA,CAAAc,UAAA,IAAAR,QAAA;MACA,UAAAL,IAAA,IAAAE,KAAA,IAAAI,GAAA,IAAAE,KAAA,IAAAE,OAAA,IAAAE,OAAA;IACA;IACApC,aAAAF,OAAA;MACA,YAAAtC,cAAA,CAAA8E,IAAA,CACAC,GAAA,IAAAA,GAAA,CAAAvB,QAAA,KAAAlB,OAAA,IAAAyC,GAAA,CAAAnB,MACA;IACA;IACAxB,gBAAA4C,IAAA;MACA,QAAAA,IAAA;QACA;UACA,YAAAvF,UAAA;QACA;UACA,YAAAG,WAAA;QACA;UACA,YAAAE,WAAA;QACA;UACA;MACA;IACA;IACAmF,cAAAD,IAAA;MACA,QAAAA,IAAA;QACA;UACA,OAAAE,OAAA;QACA;UACA,OAAAA,OAAA;QACA;UACA,OAAAA,OAAA;QACA;UACA,OAAAA,OAAA;MACA;IACA;IACAC,SAAAlD,IAAA,EAAAmD,MAAA;MACA,KAAAnD,IAAA;MACA,OAAAA,IAAA,CAAAmD,MAAA,GAAAA,MAAA,GAAAnD,IAAA,CAAAoD,KAAA,IAAAD,MAAA,YAAAnD,IAAA;IACA;IACAqD,qBAAApC,MAAA;MACA,UAAAA,MAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}