{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { fetchAgentDetail as apifetchAgentDetail } from '../utils/api'; // 引入 API 请求\nimport { subscribeAgent as apisubscribeAgent } from '../utils/api';\nimport agent from '@/store/agent';\nimport SubscriptionSelector from '@/components/SubscriptionSelector.vue'; // 引入新组件\nexport default {\n  components: {\n    SubscriptionSelector\n  },\n  data() {\n    return {\n      robot: {},\n      // 机器人详情数据\n      robotType: {\n        1: '文本对话机器人',\n        2: '图片生成机器人',\n        3: '音视频机器人'\n      },\n      loading: true,\n      // 是否正在加载数据\n      isSubscriptionDialogVisible: false // 控制弹窗显示\n    };\n  },\n  created() {\n    const agentId = this.$route.params.id;\n    console.log('agent.state', agent.state);\n    if (!agentId) {\n      this.$message.error('无法获取机器人信息');\n      this.$router.push('/');\n    } else {\n      this.fetchRobotDetail(agentId);\n    }\n  },\n  computed: {\n    subscriptionButtonText() {\n      const subscribedRobot = this.$store.state.agent.haveSubscribed.find(r => r.agent_id === this.robot.id);\n      return subscribedRobot && subscribedRobot.status ? '已订阅，查看对话历史' : '未订阅，点击订阅';\n    }\n  },\n  methods: {\n    formatDateTime(date) {\n      const year = date.getFullYear();\n      const month = String(date.getMonth() + 1).padStart(2, '0');\n      const day = String(date.getDate()).padStart(2, '0');\n      const hours = String(date.getHours()).padStart(2, '0');\n      const minutes = String(date.getMinutes()).padStart(2, '0');\n      const seconds = String(date.getSeconds()).padStart(2, '0');\n      return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n    },\n    openSubscriptionDialog() {\n      this.isSubscriptionDialogVisible = true; // 打开弹窗\n    },\n    async handleSubscriptionConfirm(duration, points) {\n      console.log('订阅时长:', duration);\n      console.log('所需积分:', points);\n      // 这里可以添加积分检查逻辑\n\n      // 调用订阅方法\n      await this.subscribeRobot(duration);\n    },\n    async fetchRobotDetail(agentId) {\n      try {\n        const response = await apifetchAgentDetail(agentId);\n        this.robot = response.data;\n        this.loading = false; // 加载完成\n      } catch (error) {\n        console.error('获取机器人详情失败:', error);\n        this.$message.error('无法加载机器人详情');\n      }\n    },\n    async subscribeRobot(Duration) {\n      try {\n        const currentTime = this.formatDateTime(new Date()); // 格式化当前时间\n        // 构造 payload\n        const payload = {\n          user_id: this.$store.state.user.userId,\n          agent_id: this.robot.id,\n          startime: currentTime,\n          // 使用格式化后的时间\n          duration: Duration\n        };\n        console.log('请求 payload:', payload);\n        const response = await apisubscribeAgent(payload);\n        if (response.status === 200) {\n          this.$message.success('订阅成功！');\n          // 订阅成功后，重新获取用户订阅列表\n          this.$store.dispatch('agent/fetchUserSubscriptions', this.$store.state.user.userId);\n          console.log('订阅成功!!!:', response);\n          console.log('订阅成功后的用户订阅列表:', this.$store.state.agent.haveSubscribed);\n        } else {\n          this.$message.error('订阅失败，请稍后重试。');\n        }\n      } catch (error) {\n        console.error('订阅失败:', error);\n        this.$message.error('无法订阅机器人，请稍后重试。');\n      }\n    },\n    handleSubscription() {\n      const subscribedRobot = this.$store.state.agent.haveSubscribed.find(r => r.agent_id === this.robot.id);\n      if (subscribedRobot && subscribedRobot.status) {\n        // 已订阅，跳转到查看对话历史页面\n        this.$router.push({\n          name: 'ConversationHistory',\n          params: {\n            id: this.robot.id\n          }\n        });\n      } else {\n        // 未订阅，打开订阅弹窗\n        this.openSubscriptionDialog();\n      }\n    }\n  }\n};","map":{"version":3,"names":["fetchAgentDetail","apifetchAgentDetail","subscribeAgent","apisubscribeAgent","agent","SubscriptionSelector","components","data","robot","robotType","loading","isSubscriptionDialogVisible","created","agentId","$route","params","id","console","log","state","$message","error","$router","push","fetchRobotDetail","computed","subscriptionButtonText","subscribedRobot","$store","haveSubscribed","find","r","agent_id","status","methods","formatDateTime","date","year","getFullYear","month","String","getMonth","padStart","day","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","openSubscriptionDialog","handleSubscriptionConfirm","duration","points","subscribeRobot","response","Duration","currentTime","Date","payload","user_id","user","userId","startime","success","dispatch","handleSubscription","name"],"sources":["src/views/RobotDetailPage.vue"],"sourcesContent":["<template>\n  <div class=\"robot-detail-page\" v-loading=\"loading\">\n    <!-- 头部区域 -->\n    <div class=\"robot-header\">\n      <div class=\"robot-icon-container\">\n        <!-- <img :src=\"robot.icon\" alt=\"Robot Icon\" class=\"robot-icon\" /> -->\n        <img\n          :src=\"require('@/assets/images/Agents/detailedAgent.png')\"\n          alt=\"Robot Icon\"\n          class=\"robot-icon\"\n        />\n      </div>\n      <div class=\"robot-header-content\">\n        <h1 class=\"robot-name\">{{ robot.name }}</h1>\n        <p class=\"robot-type\">\n          <el-icon name=\"s-goods\"></el-icon>机器人 类型：{{\n            robotType[robot.type] || '未知类型'\n          }}\n        </p>\n        <p class=\"robot-description\">\n          <el-icon name=\"edit-outline\"></el-icon>简介: {{ robot.description }}\n        </p>\n        <p class=\"robot-creator\">\n          <el-icon name=\"user-solid\"></el-icon>创建者 ID: {{ robot.creator_id }}\n        </p>\n      </div>\n    </div>\n\n    <!-- 订阅操作 -->\n    <div class=\"subscription-section\">\n      <el-button\n        type=\"primary\"\n        class=\"subscribe-button\"\n        @click=\"handleSubscription\"\n      >\n        {{ subscriptionButtonText }}\n      </el-button>\n    </div>\n\n    <!-- 未来扩展部分 -->\n    <div class=\"robot-extended-info\">\n      <div class=\"section-title\">更多信息</div>\n      <el-divider></el-divider>\n\n      <!-- 使用说明 -->\n      <div class=\"robot-usage-info\">\n        <h3>使用说明</h3>\n        <p>这里将展示详细的使用教程，帮助用户快速上手。</p>\n      </div>\n\n      <!-- 博客文章 -->\n      <div class=\"robot-blogs\">\n        <h3>相关博客文章</h3>\n        <p>这里将展示与该机器人相关的博客文章和案例。</p>\n      </div>\n\n      <!-- 评论区 -->\n      <div class=\"robot-comments\">\n        <h3>用户评论</h3>\n        <p>评论功能正在开发中，未来会展示用户对该机器人的评价。</p>\n      </div>\n\n      <!-- 作者信息 -->\n      <div class=\"robot-creator-info\">\n        <h3>关于作者</h3>\n        <p>作者信息正在完善中，未来会显示作者的简介及其他作品。</p>\n      </div>\n    </div>\n    <!-- 选择订阅时间的弹窗\n    <subscription-selector\n      v-if=\"robot.id\"\n      v-model=\"isSubscriptionDialogVisible\"\n      :robotId=\"robot.id\"\n      :onConfirm=\"handleSubscriptionConfirm\"\n    ></subscription-selector> -->\n\n    <el-dialog\n      :visible.sync=\"isSubscriptionDialogVisible\"\n      name=\"订阅机器人\"\n      :modal=\"true\"\n      :close-on-click-modal=\"false\"\n      center\n      width=\"30%\"\n    >\n      <subscription-selector\n        :robotId=\"robot.id\"\n        :onConfirm=\"handleSubscriptionConfirm\"\n        :onClose=\"() => (isSubscriptionDialogVisible = false)\"\n      />\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport { fetchAgentDetail as apifetchAgentDetail } from '../utils/api'; // 引入 API 请求\nimport { subscribeAgent as apisubscribeAgent } from '../utils/api';\nimport agent from '@/store/agent';\nimport SubscriptionSelector from '@/components/SubscriptionSelector.vue'; // 引入新组件\nexport default {\n  components: {\n    SubscriptionSelector,\n  },\n  data() {\n    return {\n      robot: {}, // 机器人详情数据\n      robotType: {\n        1: '文本对话机器人',\n        2: '图片生成机器人',\n        3: '音视频机器人',\n      },\n      loading: true, // 是否正在加载数据\n      isSubscriptionDialogVisible: false, // 控制弹窗显示\n    };\n  },\n  created() {\n    const agentId = this.$route.params.id;\n    console.log('agent.state', agent.state);\n    if (!agentId) {\n      this.$message.error('无法获取机器人信息');\n      this.$router.push('/');\n    } else {\n      this.fetchRobotDetail(agentId);\n    }\n  },\n  computed: {\n    subscriptionButtonText() {\n      const subscribedRobot = this.$store.state.agent.haveSubscribed.find(\n        (r) => r.agent_id === this.robot.id\n      );\n      return subscribedRobot && subscribedRobot.status\n        ? '已订阅，查看对话历史'\n        : '未订阅，点击订阅';\n    },\n  },\n  methods: {\n    formatDateTime(date) {\n      const year = date.getFullYear();\n      const month = String(date.getMonth() + 1).padStart(2, '0');\n      const day = String(date.getDate()).padStart(2, '0');\n      const hours = String(date.getHours()).padStart(2, '0');\n      const minutes = String(date.getMinutes()).padStart(2, '0');\n      const seconds = String(date.getSeconds()).padStart(2, '0');\n      return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n    },\n    openSubscriptionDialog() {\n      this.isSubscriptionDialogVisible = true; // 打开弹窗\n    },\n    async handleSubscriptionConfirm(duration, points) {\n      console.log('订阅时长:', duration);\n      console.log('所需积分:', points);\n      // 这里可以添加积分检查逻辑\n\n      // 调用订阅方法\n      await this.subscribeRobot(duration);\n    },\n    async fetchRobotDetail(agentId) {\n      try {\n        const response = await apifetchAgentDetail(agentId);\n        this.robot = response.data;\n        this.loading = false; // 加载完成\n      } catch (error) {\n        console.error('获取机器人详情失败:', error);\n        this.$message.error('无法加载机器人详情');\n      }\n    },\n    async subscribeRobot(Duration) {\n      try {\n        const currentTime = this.formatDateTime(new Date()); // 格式化当前时间\n        // 构造 payload\n        const payload = {\n          user_id: this.$store.state.user.userId,\n          agent_id: this.robot.id,\n          startime: currentTime, // 使用格式化后的时间\n          duration: Duration,\n        };\n        console.log('请求 payload:', payload);\n        const response = await apisubscribeAgent(payload);\n        if (response.status === 200) {\n          this.$message.success('订阅成功！');\n          // 订阅成功后，重新获取用户订阅列表\n          this.$store.dispatch(\n            'agent/fetchUserSubscriptions',\n            this.$store.state.user.userId\n          );\n          console.log('订阅成功!!!:', response);\n          console.log(\n            '订阅成功后的用户订阅列表:',\n            this.$store.state.agent.haveSubscribed\n          );\n        } else {\n          this.$message.error('订阅失败，请稍后重试。');\n        }\n      } catch (error) {\n        console.error('订阅失败:', error);\n        this.$message.error('无法订阅机器人，请稍后重试。');\n      }\n    },\n    handleSubscription() {\n      const subscribedRobot = this.$store.state.agent.haveSubscribed.find(\n        (r) => r.agent_id === this.robot.id\n      );\n\n      if (subscribedRobot && subscribedRobot.status) {\n        // 已订阅，跳转到查看对话历史页面\n        this.$router.push({\n          name: 'ConversationHistory',\n          params: { id: this.robot.id },\n        });\n      } else {\n        // 未订阅，打开订阅弹窗\n        this.openSubscriptionDialog();\n      }\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@use '@/assets/styles/mixins.scss' as *;\n@use '@/assets/styles/variables.scss' as *;\n.robot-detail-page {\n  background-color: $background-color;\n  color: $text-color;\n  padding: 20px;\n  font-family: Arial, sans-serif;\n\n  .robot-header {\n    display: flex;\n    align-items: center;\n    gap: 20px;\n    margin-bottom: 30px;\n\n    .robot-icon-container {\n      width: 100px;\n      height: 100px;\n      border: 2px solid $border-color;\n      border-radius: 50%;\n      overflow: hidden;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      background-color: $card-background-color;\n\n      .robot-icon {\n        width: 80%;\n        height: auto;\n      }\n    }\n\n    .robot-header-content {\n      .robot-name {\n        font-size: 1.8rem;\n        font-weight: bold;\n        color: $accent-color;\n        margin-bottom: 5px;\n      }\n\n      .robot-type {\n        font-size: 1rem;\n        color: $secondary-color;\n        margin-bottom: 5px;\n      }\n\n      .robot-description {\n        font-size: 1rem;\n        color: $text-color;\n        margin-bottom: 10px;\n      }\n\n      .robot-creator {\n        font-size: 0.9rem;\n        color: $hover-text-color;\n      }\n    }\n  }\n\n  .subscription-section {\n    text-align: center;\n    margin: 30px 0;\n\n    .subscribe-button {\n      background-color: $accent-color;\n      color: $primary-color;\n\n      &:hover {\n        background-color: $accent-hover-color;\n        color: $hover-text-color;\n      }\n    }\n  }\n\n  .robot-extended-info {\n    .section-title {\n      font-size: 1.5rem;\n      color: $accent-color;\n      margin-bottom: 10px;\n    }\n\n    .robot-usage-info,\n    .robot-blogs,\n    .robot-comments,\n    .robot-creator-info {\n      margin: 20px 0;\n\n      h3 {\n        font-size: 1.2rem;\n        color: $text-color;\n      }\n\n      p {\n        font-size: 1rem;\n        color: $secondary-color;\n      }\n    }\n  }\n}\n</style>\n"],"mappings":";AA8FA,SAAAA,gBAAA,IAAAC,mBAAA;AACA,SAAAC,cAAA,IAAAC,iBAAA;AACA,OAAAC,KAAA;AACA,OAAAC,oBAAA;AACA;EACAC,UAAA;IACAD;EACA;EACAE,KAAA;IACA;MACAC,KAAA;MAAA;MACAC,SAAA;QACA;QACA;QACA;MACA;MACAC,OAAA;MAAA;MACAC,2BAAA;IACA;EACA;EACAC,QAAA;IACA,MAAAC,OAAA,QAAAC,MAAA,CAAAC,MAAA,CAAAC,EAAA;IACAC,OAAA,CAAAC,GAAA,gBAAAd,KAAA,CAAAe,KAAA;IACA,KAAAN,OAAA;MACA,KAAAO,QAAA,CAAAC,KAAA;MACA,KAAAC,OAAA,CAAAC,IAAA;IACA;MACA,KAAAC,gBAAA,CAAAX,OAAA;IACA;EACA;EACAY,QAAA;IACAC,uBAAA;MACA,MAAAC,eAAA,QAAAC,MAAA,CAAAT,KAAA,CAAAf,KAAA,CAAAyB,cAAA,CAAAC,IAAA,CACAC,CAAA,IAAAA,CAAA,CAAAC,QAAA,UAAAxB,KAAA,CAAAQ,EACA;MACA,OAAAW,eAAA,IAAAA,eAAA,CAAAM,MAAA,GACA,eACA;IACA;EACA;EACAC,OAAA;IACAC,eAAAC,IAAA;MACA,MAAAC,IAAA,GAAAD,IAAA,CAAAE,WAAA;MACA,MAAAC,KAAA,GAAAC,MAAA,CAAAJ,IAAA,CAAAK,QAAA,QAAAC,QAAA;MACA,MAAAC,GAAA,GAAAH,MAAA,CAAAJ,IAAA,CAAAQ,OAAA,IAAAF,QAAA;MACA,MAAAG,KAAA,GAAAL,MAAA,CAAAJ,IAAA,CAAAU,QAAA,IAAAJ,QAAA;MACA,MAAAK,OAAA,GAAAP,MAAA,CAAAJ,IAAA,CAAAY,UAAA,IAAAN,QAAA;MACA,MAAAO,OAAA,GAAAT,MAAA,CAAAJ,IAAA,CAAAc,UAAA,IAAAR,QAAA;MACA,UAAAL,IAAA,IAAAE,KAAA,IAAAI,GAAA,IAAAE,KAAA,IAAAE,OAAA,IAAAE,OAAA;IACA;IACAE,uBAAA;MACA,KAAAxC,2BAAA;IACA;IACA,MAAAyC,0BAAAC,QAAA,EAAAC,MAAA;MACArC,OAAA,CAAAC,GAAA,UAAAmC,QAAA;MACApC,OAAA,CAAAC,GAAA,UAAAoC,MAAA;MACA;;MAEA;MACA,WAAAC,cAAA,CAAAF,QAAA;IACA;IACA,MAAA7B,iBAAAX,OAAA;MACA;QACA,MAAA2C,QAAA,SAAAvD,mBAAA,CAAAY,OAAA;QACA,KAAAL,KAAA,GAAAgD,QAAA,CAAAjD,IAAA;QACA,KAAAG,OAAA;MACA,SAAAW,KAAA;QACAJ,OAAA,CAAAI,KAAA,eAAAA,KAAA;QACA,KAAAD,QAAA,CAAAC,KAAA;MACA;IACA;IACA,MAAAkC,eAAAE,QAAA;MACA;QACA,MAAAC,WAAA,QAAAvB,cAAA,KAAAwB,IAAA;QACA;QACA,MAAAC,OAAA;UACAC,OAAA,OAAAjC,MAAA,CAAAT,KAAA,CAAA2C,IAAA,CAAAC,MAAA;UACA/B,QAAA,OAAAxB,KAAA,CAAAQ,EAAA;UACAgD,QAAA,EAAAN,WAAA;UAAA;UACAL,QAAA,EAAAI;QACA;QACAxC,OAAA,CAAAC,GAAA,gBAAA0C,OAAA;QACA,MAAAJ,QAAA,SAAArD,iBAAA,CAAAyD,OAAA;QACA,IAAAJ,QAAA,CAAAvB,MAAA;UACA,KAAAb,QAAA,CAAA6C,OAAA;UACA;UACA,KAAArC,MAAA,CAAAsC,QAAA,CACA,gCACA,KAAAtC,MAAA,CAAAT,KAAA,CAAA2C,IAAA,CAAAC,MACA;UACA9C,OAAA,CAAAC,GAAA,aAAAsC,QAAA;UACAvC,OAAA,CAAAC,GAAA,CACA,iBACA,KAAAU,MAAA,CAAAT,KAAA,CAAAf,KAAA,CAAAyB,cACA;QACA;UACA,KAAAT,QAAA,CAAAC,KAAA;QACA;MACA,SAAAA,KAAA;QACAJ,OAAA,CAAAI,KAAA,UAAAA,KAAA;QACA,KAAAD,QAAA,CAAAC,KAAA;MACA;IACA;IACA8C,mBAAA;MACA,MAAAxC,eAAA,QAAAC,MAAA,CAAAT,KAAA,CAAAf,KAAA,CAAAyB,cAAA,CAAAC,IAAA,CACAC,CAAA,IAAAA,CAAA,CAAAC,QAAA,UAAAxB,KAAA,CAAAQ,EACA;MAEA,IAAAW,eAAA,IAAAA,eAAA,CAAAM,MAAA;QACA;QACA,KAAAX,OAAA,CAAAC,IAAA;UACA6C,IAAA;UACArD,MAAA;YAAAC,EAAA,OAAAR,KAAA,CAAAQ;UAAA;QACA;MACA;QACA;QACA,KAAAmC,sBAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}