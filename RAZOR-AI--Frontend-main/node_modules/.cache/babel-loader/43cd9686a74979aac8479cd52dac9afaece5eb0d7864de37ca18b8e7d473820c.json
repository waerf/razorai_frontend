{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mapState } from 'vuex';\nimport { fetchAgentDetail as apifetchAgentDetail } from '../utils/api';\nimport { subscribeAgent as apisubscribeAgent } from '../utils/api';\nimport { getSubscriptionCnt } from '../utils/api';\nimport { getAgentComment as apiGetAgentComment, sendAgentComment as apiSendAgentComment, deleteAgentComment as apiDeleteAgentComment } from '../utils/api';\nimport SubscriptionSelector from '@/components/SubscriptionSelector.vue';\nexport default {\n  name: 'RobotDetailDialog',\n  components: {\n    SubscriptionSelector\n  },\n  props: {\n    visible: {\n      type: Boolean,\n      default: false\n    },\n    robotId: {\n      type: [String, Number],\n      default: null\n    }\n  },\n  data() {\n    return {\n      robot: {},\n      loading: false,\n      isSubscriptionDialogVisible: false,\n      recommendationDialogVisible: false,\n      showAddCommentForm: false,\n      currentRating: 5,\n      newComment: {\n        text: '',\n        rating: 5\n      },\n      // 弹窗引用计数管理\n      dialogRefCount: 0,\n      // 防止连带关闭的标识\n      isClosingSubDialog: false,\n      // 删除评论确认弹窗\n      deleteCommentDialogVisible: false,\n      deleteCommentIndex: -1,\n      // 机器人统计信息\n      robotStats: {\n        rating: 0,\n        // 初始为0，将通过评论计算\n        subscriptions: 0,\n        // 将通过API获取\n        comments: 0 // 将通过评论数量设置\n      },\n      // 评论列表 - 从后端获取\n      comments: [],\n      // 模拟数据 - 推荐机器人分类\n      recommendationCategories: [{\n        type: 'similar',\n        title: '相似功能机器人',\n        robots: [{\n          id: 101,\n          name: 'ChatBot Pro',\n          type: 1,\n          description: '专业的对话机器人，支持多种语言',\n          rating: 4.8,\n          developer: '开发者A',\n          price: 1\n        }]\n      }, {\n        type: 'popular',\n        title: '热门推荐',\n        robots: [{\n          id: 201,\n          name: 'Image Creator',\n          type: 2,\n          description: '强大的图像生成工具',\n          rating: 4.9,\n          developer: '开发者C',\n          price: 1\n        }]\n      }]\n    };\n  },\n  computed: {\n    ...mapState('user', ['isLoggedIn', 'userName', 'userId']),\n    subscriptionButtonText() {\n      const subscribedRobot = this.$store.state.agent.haveSubscribed.find(r => r.agent_id === this.robot.id);\n      return subscribedRobot && subscribedRobot.status ? '已订阅，查看对话历史' : '未订阅，点击订阅';\n    },\n    // 计算是否应该监听点击事件（引用计数为0且没有正在关闭子弹窗时才监听）\n    shouldListenToClicks() {\n      return this.dialogRefCount === 0 && !this.isClosingSubDialog;\n    },\n    // 检查用户是否已订阅该机器人\n    isUserSubscribed() {\n      const subscribedRobot = this.$store.state.agent.haveSubscribed.find(r => r.agent_id === this.robot.id);\n      return subscribedRobot && subscribedRobot.status;\n    }\n  },\n  watch: {\n    visible(newVal) {\n      if (newVal && this.robotId) {\n        this.fetchRobotDetail(this.robotId);\n        this.loadComments(this.robotId);\n        this.loadSubscriptionCount(this.robotId);\n      }\n      // 监听弹窗显示状态变化，添加或移除键盘事件监听\n      if (newVal) {\n        this.addKeyboardListener();\n        this.disableBodyScroll();\n      } else {\n        this.removeKeyboardListener();\n        this.enableBodyScroll();\n      }\n    },\n    robotId(newVal) {\n      if (newVal && this.visible) {\n        this.fetchRobotDetail(newVal);\n        this.loadComments(newVal);\n        this.loadSubscriptionCount(newVal);\n      }\n    }\n  },\n  methods: {\n    // 键盘事件监听管理\n    addKeyboardListener() {\n      document.addEventListener('keydown', this.handleKeyDown);\n      // 添加滚轮事件监听\n      document.addEventListener('wheel', this.handleWheelEvent, {\n        passive: false\n      });\n      // 添加触摸事件监听（移动端）\n      document.addEventListener('touchmove', this.handleTouchEvent, {\n        passive: false\n      });\n    },\n    removeKeyboardListener() {\n      document.removeEventListener('keydown', this.handleKeyDown);\n      // 移除滚轮事件监听\n      document.removeEventListener('wheel', this.handleWheelEvent);\n      // 移除触摸事件监听\n      document.removeEventListener('touchmove', this.handleTouchEvent);\n    },\n    handleKeyDown(event) {\n      // 只处理ESC键\n      if (event.key === 'Escape') {\n        event.preventDefault();\n        this.handleEscapeKey();\n      } else if (!this.shouldListenToClicks) {\n        // 如果有子弹窗打开，阻止所有其他键盘事件\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    },\n    handleWheelEvent(event) {\n      // 如果有子弹窗打开，阻止滚轮事件\n      if (!this.shouldListenToClicks) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    },\n    handleTouchEvent(event) {\n      // 如果有子弹窗打开，阻止触摸滚动事件\n      if (!this.shouldListenToClicks) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    },\n    // 禁用body滚动\n    disableBodyScroll() {\n      document.body.style.overflow = 'hidden';\n      document.body.style.position = 'fixed';\n      document.body.style.width = '100%';\n      document.body.style.top = `-${window.scrollY}px`;\n    },\n    // 恢复body滚动\n    enableBodyScroll() {\n      const scrollY = document.body.style.top;\n      document.body.style.overflow = '';\n      document.body.style.position = '';\n      document.body.style.width = '';\n      document.body.style.top = '';\n      if (scrollY) {\n        window.scrollTo(0, parseInt(scrollY || '0') * -1);\n      }\n    },\n    handleEscapeKey() {\n      // 按照优先级顺序关闭弹窗：同级别的子弹窗（删除确认、订阅确认、推荐机器人）> 机器人详情\n      if (this.deleteCommentDialogVisible) {\n        this.closeDeleteCommentDialog();\n      } else if (this.isSubscriptionDialogVisible) {\n        this.closeSubscriptionDialog();\n      } else if (this.recommendationDialogVisible) {\n        this.closeRecommendations();\n      } else if (this.shouldListenToClicks) {\n        // 只有在没有子弹窗时才允许关闭主弹窗\n        this.closeDetail();\n      }\n    },\n    // 弹窗引用计数管理方法\n    incrementDialogRef() {\n      this.dialogRefCount++;\n      console.log('Dialog ref count incremented:', this.dialogRefCount);\n    },\n    decrementDialogRef() {\n      this.dialogRefCount = Math.max(0, this.dialogRefCount - 1);\n      console.log('Dialog ref count decremented:', this.dialogRefCount);\n    },\n    closeDetail() {\n      // 只有在没有子弹窗时才允许关闭\n      if (this.shouldListenToClicks) {\n        this.$emit('close');\n      }\n    },\n    getRobotImage(type) {\n      switch (type) {\n        case 1:\n          return require('@/assets/images/Agents/textAgent.png');\n        case 2:\n          return require('@/assets/images/Agents/imageAgent.png');\n        case 3:\n          return require('@/assets/images/Agents/videoAgent.png');\n        default:\n          return require('@/assets/images/Agents/baseAgent.png');\n      }\n    },\n    truncate(text, length = 50) {\n      if (!text) return '';\n      return text.length > length ? text.slice(0, length) + '...' : text;\n    },\n    formatPrice(points) {\n      // 当points为0时，返回\"免费\"\n      if (points === 0) {\n        return '免费';\n      }\n      return `${points} 积分`;\n    },\n    formatRating(rating) {\n      // 当rating为0时，返回\"暂无评分\"\n      if (rating === 0) {\n        return '暂无评分';\n      }\n      return rating.toString();\n    },\n    // 评论相关方法\n    setRating(rating) {\n      this.currentRating = rating;\n      this.newComment.rating = rating;\n    },\n    async submitComment() {\n      if (!this.newComment.text.trim()) {\n        this.$message.warning('请输入评论内容');\n        return;\n      }\n\n      // 检查用户是否已订阅该机器人\n      if (!this.isUserSubscribed) {\n        this.$message.warning('请先订阅该机器人后再发表评论');\n        return;\n      }\n      try {\n        const commentLoad = {\n          agentId: this.robot.id,\n          comment: this.newComment.text,\n          score: this.currentRating\n        };\n        const response = await apiSendAgentComment(commentLoad);\n        if (response.status === 200) {\n          this.$message.success('评论发布成功！');\n\n          // 重置表单\n          this.newComment.text = '';\n          this.currentRating = 5;\n          this.showAddCommentForm = false;\n\n          // 重新加载评论列表\n          await this.loadComments(this.robot.id);\n        } else {\n          this.$message.error('评论发布失败，请稍后重试');\n        }\n      } catch (error) {\n        console.error('发布评论失败:', error);\n        this.$message.error('评论发布失败，请稍后重试');\n      }\n    },\n    // 点赞/点踩功能已注释\n    /*\n    likeComment(index) {\n      const comment = this.comments[index];\n      if (comment.userLiked) {\n        comment.likes--;\n        comment.userLiked = false;\n      } else {\n        if (comment.userDisliked) {\n          comment.dislikes--;\n          comment.userDisliked = false;\n        }\n        comment.likes++;\n        comment.userLiked = true;\n      }\n    },\n    dislikeComment(index) {\n      const comment = this.comments[index];\n      if (comment.userDisliked) {\n        comment.dislikes--;\n        comment.userDisliked = false;\n      } else {\n        if (comment.userLiked) {\n          comment.likes--;\n          comment.userLiked = false;\n        }\n        comment.dislikes++;\n        comment.userDisliked = true;\n      }\n    },\n    */\n    // 确认删除评论\n    confirmDeleteComment(index) {\n      console.log('准备删除评论，索引:', index);\n      if (index < 0 || index >= this.comments.length) {\n        this.$message.error('评论不存在');\n        return;\n      }\n      const comment = this.comments[index];\n      console.log('当前用户ID:', this.userId);\n      console.log('评论用户ID:', comment.user_id);\n\n      // 检查权限：只能删除自己的评论\n      if (comment.user_id !== this.userId) {\n        this.$message.error('您只能删除自己的评论');\n        return;\n      }\n      this.deleteCommentIndex = index;\n      this.deleteCommentDialogVisible = true;\n      this.incrementDialogRef();\n      console.log('删除确认弹窗已显示，引用计数:', this.dialogRefCount);\n    },\n    // 执行删除评论\n    async executeDeleteComment() {\n      if (this.deleteCommentIndex >= 0 && this.deleteCommentIndex < this.comments.length) {\n        try {\n          const comment = this.comments[this.deleteCommentIndex];\n          const response = await apiDeleteAgentComment(comment.id);\n          if (response.status === 200) {\n            this.$message.success('评论删除成功！');\n\n            // 重新加载评论列表\n            await this.loadComments(this.robot.id);\n\n            // 如果删除后没有评论了，显示提示\n            if (this.comments.length === 0) {\n              this.$message.info('已删除所有评论，快来添加第一条评论吧！');\n            }\n          } else {\n            this.$message.error('评论删除失败，请稍后重试');\n          }\n        } catch (error) {\n          console.error('删除评论失败:', error);\n          this.$message.error('评论删除失败，请稍后重试');\n        }\n      }\n      this.closeDeleteCommentDialog();\n    },\n    // 关闭删除确认弹窗\n    closeDeleteCommentDialog() {\n      this.isClosingSubDialog = true;\n      this.deleteCommentDialogVisible = false;\n      this.deleteCommentIndex = -1;\n      this.decrementDialogRef();\n      // 延迟重置标识，防止连带关闭\n      setTimeout(() => {\n        this.isClosingSubDialog = false;\n      }, 100);\n      console.log('删除确认弹窗已关闭，防连带关闭标识已设置');\n    },\n    handleCommentAction(command) {\n      if (command.startsWith('delete-')) {\n        const index = parseInt(command.split('-')[1]);\n\n        // 验证索引有效性\n        if (isNaN(index)) {\n          this.$message.error('无效的评论索引');\n          return;\n        }\n        this.confirmDeleteComment(index);\n      } else {\n        // 处理其他可能的评论操作\n        console.log('未知的评论操作:', command);\n      }\n    },\n    deleteComment(index) {\n      // 这个方法已被 confirmDeleteComment 替代，保留以防兼容性问题\n      this.confirmDeleteComment(index);\n    },\n    showRecommendations() {\n      this.incrementDialogRef();\n      this.recommendationDialogVisible = true;\n      this.disableBodyScroll();\n    },\n    closeRecommendations() {\n      this.isClosingSubDialog = true;\n      this.recommendationDialogVisible = false;\n      this.decrementDialogRef();\n      // 延迟重置标识，防止连带关闭\n      setTimeout(() => {\n        this.isClosingSubDialog = false;\n      }, 100);\n    },\n    showAnotherRobotDetail(robotId) {\n      this.closeRecommendations();\n      this.$emit('show-robot', robotId);\n    },\n    subscribeRecommendedRobot(robotId) {\n      this.incrementDialogRef();\n      console.log('订阅机器人ID:', robotId);\n      this.$message.success(`订阅机器人 ${robotId} 成功！`);\n      // 模拟订阅完成后自动关闭\n      setTimeout(() => {\n        this.decrementDialogRef();\n      }, 1500);\n    },\n    formatDateTime(date) {\n      // 使用ISO 8601格式，与后端API保持一致\n      return date.toISOString();\n    },\n    openSubscriptionDialog() {\n      this.incrementDialogRef();\n      this.isSubscriptionDialogVisible = true;\n      this.disableBodyScroll();\n    },\n    closeSubscriptionDialog() {\n      this.isClosingSubDialog = true;\n      this.isSubscriptionDialogVisible = false;\n      this.decrementDialogRef();\n      this.enableBodyScroll();\n      // 延迟重置标识，防止连带关闭\n      setTimeout(() => {\n        this.isClosingSubDialog = false;\n      }, 100);\n    },\n    async handleSubscriptionConfirm(duration, points) {\n      console.log('订阅时长:', duration);\n      console.log('所需积分:', points);\n      await this.subscribeRobot(duration);\n      this.closeSubscriptionDialog();\n    },\n    async fetchRobotDetail(agentId) {\n      this.loading = true;\n      try {\n        const response = await apifetchAgentDetail(agentId);\n        this.robot = response.data;\n        // 确保机器人对象有price属性，当price为undefined或null时默认为1，但保留0值\n        if (this.robot.price === undefined || this.robot.price === null) {\n          this.robot.price = 1;\n        }\n      } catch (error) {\n        console.error('获取机器人详情失败:', error);\n        this.$message.error('无法加载机器人详情');\n      } finally {\n        this.loading = false;\n      }\n    },\n    async loadSubscriptionCount(agentId) {\n      try {\n        const response = await getSubscriptionCnt(agentId);\n        if (response.status === 200) {\n          this.robotStats.subscriptions = response.data.subscriptionCnt;\n        }\n      } catch (error) {\n        console.warn('获取订阅数失败:', error);\n        this.robotStats.subscriptions = 0;\n      }\n    },\n    async subscribeRobot(Duration) {\n      try {\n        const currentTime = this.formatDateTime(new Date());\n        const payload = {\n          userId: this.$store.state.user.userId,\n          agentId: this.robot.id,\n          startTime: currentTime,\n          duration: Duration,\n          subscriptionType: 1\n        };\n        console.log('请求 payload:', payload);\n        const response = await apisubscribeAgent(payload);\n        if (response.status === 200) {\n          this.$message.success('订阅成功！');\n\n          // 1. 更新用户订阅数据\n          await this.$store.dispatch('agent/fetchUserSubscriptions', this.$store.state.user.userId);\n\n          // 2. 重新加载机器人订阅数量\n          await this.loadSubscriptionCount(this.robot.id);\n\n          // 3. 强制更新页面，确保按钮状态正确显示\n          this.$forceUpdate();\n\n          // 4. 通知父组件订阅状态已变化\n          this.$emit('subscription-changed', this.robot.id);\n          console.log('订阅成功!!!:', response);\n          console.log('订阅成功后的用户订阅列表:', this.$store.state.agent.haveSubscribed);\n        } else {\n          this.$message.error('订阅失败，请稍后重试。');\n        }\n      } catch (error) {\n        console.error('订阅失败:', error);\n        this.$message.error('无法订阅机器人，请稍后重试。');\n      }\n    },\n    handleSubscription() {\n      const subscribedRobot = this.$store.state.agent.haveSubscribed.find(r => r.agent_id === this.robot.id);\n      if (subscribedRobot && subscribedRobot.status) {\n        this.$router.push({\n          name: 'ConversationHistory',\n          params: {\n            id: this.robot.id\n          }\n        });\n      } else {\n        this.openSubscriptionDialog();\n      }\n    },\n    // 加载机器人评论\n    async loadComments(agentId) {\n      try {\n        const response = await apiGetAgentComment(agentId);\n        if (response.status === 200 && response.data) {\n          // 后端返回的数据格式：id, user_id, userName, comment, createdAt, score\n          this.comments = response.data.map(comment => ({\n            id: comment.id,\n            user_id: comment.user_id,\n            userName: comment.userName || '匿名用户',\n            rating: comment.rating,\n            text: comment.comment,\n            timestamp: new Date(comment.createdAt).toLocaleString('zh-CN')\n          }));\n\n          // 更新评论统计\n          this.robotStats.comments = this.comments.length;\n\n          // 计算平均评分\n          if (this.comments.length > 0) {\n            const avgRating = this.comments.reduce((sum, comment) => sum + (comment.rating || 0), 0) / this.comments.length;\n            this.robotStats.rating = Math.round(avgRating * 10) / 10; // 保留一位小数\n          } else {\n            // 没有评论时显示暂无评分\n            this.robotStats.rating = 0;\n          }\n        } else {\n          this.comments = [];\n          this.robotStats.comments = 0;\n          this.robotStats.rating = 0;\n        }\n      } catch (error) {\n        console.error('加载评论失败:', error);\n        this.comments = [];\n        this.robotStats.comments = 0;\n        this.robotStats.rating = 0;\n      }\n    }\n  },\n  // 组件销毁时移除键盘事件监听\n  beforeDestroy() {\n    this.removeKeyboardListener();\n  }\n};","map":{"version":3,"names":["mapState","fetchAgentDetail","apifetchAgentDetail","subscribeAgent","apisubscribeAgent","getSubscriptionCnt","getAgentComment","apiGetAgentComment","sendAgentComment","apiSendAgentComment","deleteAgentComment","apiDeleteAgentComment","SubscriptionSelector","name","components","props","visible","type","Boolean","default","robotId","String","Number","data","robot","loading","isSubscriptionDialogVisible","recommendationDialogVisible","showAddCommentForm","currentRating","newComment","text","rating","dialogRefCount","isClosingSubDialog","deleteCommentDialogVisible","deleteCommentIndex","robotStats","subscriptions","comments","recommendationCategories","title","robots","id","description","developer","price","computed","subscriptionButtonText","subscribedRobot","$store","state","agent","haveSubscribed","find","r","agent_id","status","shouldListenToClicks","isUserSubscribed","watch","newVal","fetchRobotDetail","loadComments","loadSubscriptionCount","addKeyboardListener","disableBodyScroll","removeKeyboardListener","enableBodyScroll","methods","document","addEventListener","handleKeyDown","handleWheelEvent","passive","handleTouchEvent","removeEventListener","event","key","preventDefault","handleEscapeKey","stopPropagation","body","style","overflow","position","width","top","window","scrollY","scrollTo","parseInt","closeDeleteCommentDialog","closeSubscriptionDialog","closeRecommendations","closeDetail","incrementDialogRef","console","log","decrementDialogRef","Math","max","$emit","getRobotImage","require","truncate","length","slice","formatPrice","points","formatRating","toString","setRating","submitComment","trim","$message","warning","commentLoad","agentId","comment","score","response","success","error","confirmDeleteComment","index","userId","user_id","executeDeleteComment","info","setTimeout","handleCommentAction","command","startsWith","split","isNaN","deleteComment","showRecommendations","showAnotherRobotDetail","subscribeRecommendedRobot","formatDateTime","date","toISOString","openSubscriptionDialog","handleSubscriptionConfirm","duration","subscribeRobot","undefined","subscriptionCnt","warn","Duration","currentTime","Date","payload","user","startTime","subscriptionType","dispatch","$forceUpdate","handleSubscription","$router","push","params","map","userName","timestamp","createdAt","toLocaleString","avgRating","reduce","sum","round","beforeDestroy"],"sources":["src/views/RobotDetailPage.vue"],"sourcesContent":["<template>\n  <!-- 机器人详情弹窗遮罩层 -->\n  <div\n    v-if=\"visible\"\n    class=\"robot-detail-overlay\"\n    @click=\"shouldListenToClicks ? closeDetail() : null\"\n    @wheel=\"shouldListenToClicks ? null : $event.preventDefault()\"\n    @touchmove=\"shouldListenToClicks ? null : $event.preventDefault()\"\n    @keydown=\"shouldListenToClicks ? null : $event.preventDefault()\"\n  >\n    <div\n      class=\"robot-detail-content\"\n      :class=\"{ 'content-disabled': !shouldListenToClicks }\"\n      @click.stop\n      @wheel.stop=\"shouldListenToClicks ? null : $event.preventDefault()\"\n      @touchmove.stop=\"shouldListenToClicks ? null : $event.preventDefault()\"\n      @keydown.stop=\"shouldListenToClicks ? null : $event.preventDefault()\"\n      v-loading=\"loading\"\n    >\n      <!-- 弹窗头部 -->\n      <div class=\"robot-detail-header\">\n        <h2 class=\"robot-detail-title\">机器人详情</h2>\n        <button\n          class=\"robot-detail-close\"\n          @click=\"shouldListenToClicks ? closeDetail() : null\"\n        >\n          <i class=\"el-icon-close\"></i>\n        </button>\n      </div>\n\n      <!-- 弹窗内容 -->\n      <div class=\"robot-detail-body\">\n        <!-- 机器人信息区域 -->\n        <div class=\"robot-info-section\">\n          <div class=\"robot-info-header\">\n            <img\n              :src=\"getRobotImage(robot.type)\"\n              alt=\"Robot Icon\"\n              class=\"robot-detail-logo\"\n            />\n            <div class=\"robot-info\">\n              <h1 class=\"robot-detail-name\">\n                {{ robot.name || '机器人名称' }}\n              </h1>\n              <p class=\"robot-detail-description\">\n                {{\n                  robot.description ||\n                  '这是一个功能强大的AI机器人，可以帮助您完成各种任务。'\n                }}\n              </p>\n              <p class=\"robot-developer\">\n                <span class=\"developer-label\">开发者：</span>\n                <span class=\"developer-name\">{{\n                  robot.creatorName || '未知开发者'\n                }}</span>\n              </p>\n              <div class=\"robot-stats\">\n                <div class=\"stat-item\">\n                  <div class=\"stat-value\">\n                    {{ formatRating(robotStats.rating) }}\n                  </div>\n                  <div class=\"stat-label\">评分</div>\n                </div>\n                <div class=\"stat-item\">\n                  <div class=\"stat-value\">{{ robotStats.subscriptions }}</div>\n                  <div class=\"stat-label\">订阅数</div>\n                </div>\n                <div class=\"stat-item\">\n                  <div class=\"stat-value\">{{ robotStats.comments }}</div>\n                  <div class=\"stat-label\">评论数</div>\n                </div>\n                <div class=\"stat-item\">\n                  <div class=\"stat-value\">{{ formatPrice(robot.price) }}</div>\n                  <div class=\"stat-label\">所需积分</div>\n                </div>\n              </div>\n              <div class=\"robot-detail-actions\">\n                <el-button\n                  type=\"primary\"\n                  class=\"action-btn primary\"\n                  @click=\"handleSubscription\"\n                >\n                  {{ subscriptionButtonText }}\n                </el-button>\n                <el-button\n                  class=\"action-btn secondary\"\n                  @click=\"showRecommendations\"\n                >\n                  推荐相似机器人\n                </el-button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <!-- 评论区 -->\n        <div class=\"comments-section\">\n          <div class=\"comments-header\">\n            <h3 class=\"comments-title\">用户评论 ({{ comments.length }})</h3>\n            <el-button\n              v-if=\"isLoggedIn && isUserSubscribed\"\n              type=\"primary\"\n              class=\"add-comment-btn\"\n              @click=\"showAddCommentForm = !showAddCommentForm\"\n            >\n              添加评论\n            </el-button>\n            <el-button\n              v-else-if=\"isLoggedIn && !isUserSubscribed\"\n              type=\"info\"\n              class=\"add-comment-btn\"\n              disabled\n              title=\"请先订阅该机器人后再发表评论\"\n            >\n              请先订阅后评论\n            </el-button>\n          </div>\n\n          <!-- 添加评论表单 -->\n          <div\n            v-if=\"showAddCommentForm && isLoggedIn && isUserSubscribed\"\n            class=\"add-comment-form\"\n          >\n            <div class=\"comment-form-group\">\n              <label class=\"comment-form-label\">评分</label>\n              <div class=\"rating-input\">\n                <i\n                  v-for=\"star in 5\"\n                  :key=\"star\"\n                  class=\"el-icon-star-on rating-star\"\n                  :class=\"{ active: star <= currentRating }\"\n                  @click=\"setRating(star)\"\n                ></i>\n              </div>\n            </div>\n            <div class=\"comment-form-group\">\n              <label class=\"comment-form-label\">评论内容</label>\n              <el-input\n                v-model=\"newComment.text\"\n                type=\"textarea\"\n                class=\"comment-input\"\n                placeholder=\"请输入您的评论...\"\n                :rows=\"4\"\n              ></el-input>\n            </div>\n            <div class=\"comment-form-actions\">\n              <el-button @click=\"showAddCommentForm = false\">取消</el-button>\n              <el-button type=\"primary\" @click=\"submitComment\"\n                >提交评论</el-button\n              >\n            </div>\n          </div>\n\n          <!-- 评论列表 -->\n          <div class=\"comments-list\">\n            <div\n              v-for=\"(comment, index) in comments\"\n              :key=\"comment.id\"\n              class=\"comment-item\"\n            >\n              <div class=\"comment-header\">\n                <div class=\"comment-user\">{{ comment.userName }}</div>\n                <div class=\"comment-rating\">\n                  <i\n                    v-for=\"star in 5\"\n                    :key=\"star\"\n                    class=\"el-icon-star-on\"\n                    :style=\"{\n                      color: star <= comment.rating ? '#ffc107' : '#ddd',\n                    }\"\n                  ></i>\n                </div>\n                <div class=\"comment-menu\">\n                  <button\n                    class=\"comment-delete-btn\"\n                    v-if=\"comment.user_id === userId && isLoggedIn\"\n                    @click=\"confirmDeleteComment(index)\"\n                    title=\"删除评论\"\n                  >\n                    <i class=\"el-icon-delete\"></i>\n                  </button>\n                </div>\n              </div>\n              <div class=\"comment-text\">{{ comment.text }}</div>\n              <div class=\"comment-actions\">\n                <!-- 点赞/点踩功能已注释 -->\n                <!--\n                <button\n                  class=\"comment-action\"\n                  :class=\"{ liked: comment.userLiked }\"\n                  @click=\"likeComment(index)\"\n                >\n                  <i class=\"el-icon-thumb\"></i> {{ comment.likes || 0 }}\n                </button>\n                <button\n                  class=\"comment-action\"\n                  :class=\"{ disliked: comment.userDisliked }\"\n                  @click=\"dislikeComment(index)\"\n                >\n                  <i class=\"el-icon-thumb\"></i> {{ comment.dislikes || 0 }}\n                </button>\n                -->\n              </div>\n            </div>\n          </div>\n\n          <!-- 无评论提示 -->\n          <div v-if=\"comments.length === 0\" class=\"no-comments\">\n            暂无评论，快来添加第一条评论吧！\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- 推荐机器人弹窗 -->\n    <el-dialog\n      title=\"推荐相似机器人\"\n      :visible.sync=\"recommendationDialogVisible\"\n      :close-on-click-modal=\"false\"\n      :close-on-press-escape=\"false\"\n      :before-close=\"closeRecommendations\"\n      width=\"80%\"\n      center\n    >\n      <div class=\"recommendation-content\">\n        <div\n          v-for=\"category in recommendationCategories\"\n          :key=\"category.type\"\n          class=\"recommendation-section\"\n        >\n          <h4 class=\"recommendation-category-title\">{{ category.title }}</h4>\n          <div class=\"recommendation-grid\">\n            <el-card\n              v-for=\"recRobot in category.robots\"\n              :key=\"recRobot.id\"\n              class=\"recommendation-card\"\n              @click.native=\"showAnotherRobotDetail(recRobot.id)\"\n            >\n              <div class=\"recommendation-card-header\">\n                <img\n                  :src=\"getRobotImage(recRobot.type)\"\n                  alt=\"robot\"\n                  class=\"recommendation-card-logo\"\n                />\n                <div class=\"recommendation-card-info\">\n                  <div class=\"recommendation-card-name\">\n                    {{ recRobot.name }}\n                  </div>\n                  <div class=\"recommendation-card-developer\">\n                    开发者: {{ recRobot.developer || '未知' }}\n                  </div>\n                </div>\n              </div>\n              <div class=\"recommendation-card-description\">\n                {{ truncate(recRobot.description, 60) }}\n              </div>\n              <div class=\"recommendation-card-footer\">\n                <div class=\"recommendation-card-stats\">\n                  <div class=\"recommendation-card-rating\">\n                    <i class=\"el-icon-star-on\" style=\"color: #ffc107\"></i>\n                    {{ recRobot.rating || 4.5 }}\n                  </div>\n                  <div class=\"recommendation-card-points\">\n                    <i class=\"el-icon-coin\" style=\"color: #f39c12\"></i>\n                    {{ formatPrice(recRobot.price) }}\n                  </div>\n                </div>\n                <el-button\n                  size=\"mini\"\n                  type=\"primary\"\n                  class=\"recommendation-card-btn\"\n                  @click.stop=\"subscribeRecommendedRobot(recRobot.id)\"\n                >\n                  订阅\n                </el-button>\n              </div>\n            </el-card>\n          </div>\n        </div>\n      </div>\n    </el-dialog>\n\n    <!-- 订阅确认对话框 -->\n    <el-dialog\n      title=\"订阅确认\"\n      :visible.sync=\"isSubscriptionDialogVisible\"\n      :close-on-click-modal=\"false\"\n      :close-on-press-escape=\"false\"\n      :before-close=\"closeSubscriptionDialog\"\n      width=\"400px\"\n      center\n    >\n      <subscription-selector\n        v-if=\"robot.id\"\n        :robotId=\"robot.id\"\n        :price=\"\n          robot.price !== undefined && robot.price !== null ? robot.price : 1\n        \"\n        :onConfirm=\"handleSubscriptionConfirm\"\n        :onClose=\"closeSubscriptionDialog\"\n      />\n    </el-dialog>\n\n    <!-- 删除评论确认对话框 -->\n    <el-dialog\n      title=\"删除确认\"\n      :visible.sync=\"deleteCommentDialogVisible\"\n      :close-on-click-modal=\"false\"\n      :close-on-press-escape=\"false\"\n      :before-close=\"closeDeleteCommentDialog\"\n      width=\"400px\"\n      center\n    >\n      <div style=\"text-align: center; padding: 20px 0\">\n        <p style=\"margin: 15px 0; font-size: 16px\">确定要删除这条评论吗？</p>\n        <div\n          v-if=\"deleteCommentIndex >= 0 && comments[deleteCommentIndex]\"\n        ></div>\n      </div>\n      <div slot=\"footer\" class=\"dialog-footer\" style=\"text-align: center\">\n        <el-button @click=\"closeDeleteCommentDialog\">取消</el-button>\n        <el-button @click=\"executeDeleteComment\">确定删除</el-button>\n      </div>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport { fetchAgentDetail as apifetchAgentDetail } from '../utils/api';\nimport { subscribeAgent as apisubscribeAgent } from '../utils/api';\nimport { getSubscriptionCnt } from '../utils/api';\nimport {\n  getAgentComment as apiGetAgentComment,\n  sendAgentComment as apiSendAgentComment,\n  deleteAgentComment as apiDeleteAgentComment,\n} from '../utils/api';\nimport SubscriptionSelector from '@/components/SubscriptionSelector.vue';\n\nexport default {\n  name: 'RobotDetailDialog',\n  components: {\n    SubscriptionSelector,\n  },\n  props: {\n    visible: {\n      type: Boolean,\n      default: false,\n    },\n    robotId: {\n      type: [String, Number],\n      default: null,\n    },\n  },\n  data() {\n    return {\n      robot: {},\n      loading: false,\n      isSubscriptionDialogVisible: false,\n      recommendationDialogVisible: false,\n      showAddCommentForm: false,\n      currentRating: 5,\n      newComment: {\n        text: '',\n        rating: 5,\n      },\n      // 弹窗引用计数管理\n      dialogRefCount: 0,\n      // 防止连带关闭的标识\n      isClosingSubDialog: false,\n      // 删除评论确认弹窗\n      deleteCommentDialogVisible: false,\n      deleteCommentIndex: -1,\n      // 机器人统计信息\n      robotStats: {\n        rating: 0, // 初始为0，将通过评论计算\n        subscriptions: 0, // 将通过API获取\n        comments: 0, // 将通过评论数量设置\n      },\n      // 评论列表 - 从后端获取\n      comments: [],\n      // 模拟数据 - 推荐机器人分类\n      recommendationCategories: [\n        {\n          type: 'similar',\n          title: '相似功能机器人',\n          robots: [\n            {\n              id: 101,\n              name: 'ChatBot Pro',\n              type: 1,\n              description: '专业的对话机器人，支持多种语言',\n              rating: 4.8,\n              developer: '开发者A',\n              price: 1,\n            },\n          ],\n        },\n        {\n          type: 'popular',\n          title: '热门推荐',\n          robots: [\n            {\n              id: 201,\n              name: 'Image Creator',\n              type: 2,\n              description: '强大的图像生成工具',\n              rating: 4.9,\n              developer: '开发者C',\n              price: 1,\n            },\n          ],\n        },\n      ],\n    };\n  },\n  computed: {\n    ...mapState('user', ['isLoggedIn', 'userName', 'userId']),\n    subscriptionButtonText() {\n      const subscribedRobot = this.$store.state.agent.haveSubscribed.find(\n        (r) => r.agent_id === this.robot.id\n      );\n      return subscribedRobot && subscribedRobot.status\n        ? '已订阅，查看对话历史'\n        : '未订阅，点击订阅';\n    },\n    // 计算是否应该监听点击事件（引用计数为0且没有正在关闭子弹窗时才监听）\n    shouldListenToClicks() {\n      return this.dialogRefCount === 0 && !this.isClosingSubDialog;\n    },\n    // 检查用户是否已订阅该机器人\n    isUserSubscribed() {\n      const subscribedRobot = this.$store.state.agent.haveSubscribed.find(\n        (r) => r.agent_id === this.robot.id\n      );\n      return subscribedRobot && subscribedRobot.status;\n    },\n  },\n  watch: {\n    visible(newVal) {\n      if (newVal && this.robotId) {\n        this.fetchRobotDetail(this.robotId);\n        this.loadComments(this.robotId);\n        this.loadSubscriptionCount(this.robotId);\n      }\n      // 监听弹窗显示状态变化，添加或移除键盘事件监听\n      if (newVal) {\n        this.addKeyboardListener();\n        this.disableBodyScroll();\n      } else {\n        this.removeKeyboardListener();\n        this.enableBodyScroll();\n      }\n    },\n    robotId(newVal) {\n      if (newVal && this.visible) {\n        this.fetchRobotDetail(newVal);\n        this.loadComments(newVal);\n        this.loadSubscriptionCount(newVal);\n      }\n    },\n  },\n  methods: {\n    // 键盘事件监听管理\n    addKeyboardListener() {\n      document.addEventListener('keydown', this.handleKeyDown);\n      // 添加滚轮事件监听\n      document.addEventListener('wheel', this.handleWheelEvent, {\n        passive: false,\n      });\n      // 添加触摸事件监听（移动端）\n      document.addEventListener('touchmove', this.handleTouchEvent, {\n        passive: false,\n      });\n    },\n    removeKeyboardListener() {\n      document.removeEventListener('keydown', this.handleKeyDown);\n      // 移除滚轮事件监听\n      document.removeEventListener('wheel', this.handleWheelEvent);\n      // 移除触摸事件监听\n      document.removeEventListener('touchmove', this.handleTouchEvent);\n    },\n    handleKeyDown(event) {\n      // 只处理ESC键\n      if (event.key === 'Escape') {\n        event.preventDefault();\n        this.handleEscapeKey();\n      } else if (!this.shouldListenToClicks) {\n        // 如果有子弹窗打开，阻止所有其他键盘事件\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    },\n    handleWheelEvent(event) {\n      // 如果有子弹窗打开，阻止滚轮事件\n      if (!this.shouldListenToClicks) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    },\n    handleTouchEvent(event) {\n      // 如果有子弹窗打开，阻止触摸滚动事件\n      if (!this.shouldListenToClicks) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    },\n    // 禁用body滚动\n    disableBodyScroll() {\n      document.body.style.overflow = 'hidden';\n      document.body.style.position = 'fixed';\n      document.body.style.width = '100%';\n      document.body.style.top = `-${window.scrollY}px`;\n    },\n    // 恢复body滚动\n    enableBodyScroll() {\n      const scrollY = document.body.style.top;\n      document.body.style.overflow = '';\n      document.body.style.position = '';\n      document.body.style.width = '';\n      document.body.style.top = '';\n      if (scrollY) {\n        window.scrollTo(0, parseInt(scrollY || '0') * -1);\n      }\n    },\n    handleEscapeKey() {\n      // 按照优先级顺序关闭弹窗：同级别的子弹窗（删除确认、订阅确认、推荐机器人）> 机器人详情\n      if (this.deleteCommentDialogVisible) {\n        this.closeDeleteCommentDialog();\n      } else if (this.isSubscriptionDialogVisible) {\n        this.closeSubscriptionDialog();\n      } else if (this.recommendationDialogVisible) {\n        this.closeRecommendations();\n      } else if (this.shouldListenToClicks) {\n        // 只有在没有子弹窗时才允许关闭主弹窗\n        this.closeDetail();\n      }\n    },\n    // 弹窗引用计数管理方法\n    incrementDialogRef() {\n      this.dialogRefCount++;\n      console.log('Dialog ref count incremented:', this.dialogRefCount);\n    },\n    decrementDialogRef() {\n      this.dialogRefCount = Math.max(0, this.dialogRefCount - 1);\n      console.log('Dialog ref count decremented:', this.dialogRefCount);\n    },\n    closeDetail() {\n      // 只有在没有子弹窗时才允许关闭\n      if (this.shouldListenToClicks) {\n        this.$emit('close');\n      }\n    },\n    getRobotImage(type) {\n      switch (type) {\n        case 1:\n          return require('@/assets/images/Agents/textAgent.png');\n        case 2:\n          return require('@/assets/images/Agents/imageAgent.png');\n        case 3:\n          return require('@/assets/images/Agents/videoAgent.png');\n        default:\n          return require('@/assets/images/Agents/baseAgent.png');\n      }\n    },\n    truncate(text, length = 50) {\n      if (!text) return '';\n      return text.length > length ? text.slice(0, length) + '...' : text;\n    },\n    formatPrice(points) {\n      // 当points为0时，返回\"免费\"\n      if (points === 0) {\n        return '免费';\n      }\n      return `${points} 积分`;\n    },\n    formatRating(rating) {\n      // 当rating为0时，返回\"暂无评分\"\n      if (rating === 0) {\n        return '暂无评分';\n      }\n      return rating.toString();\n    },\n    // 评论相关方法\n    setRating(rating) {\n      this.currentRating = rating;\n      this.newComment.rating = rating;\n    },\n    async submitComment() {\n      if (!this.newComment.text.trim()) {\n        this.$message.warning('请输入评论内容');\n        return;\n      }\n\n      // 检查用户是否已订阅该机器人\n      if (!this.isUserSubscribed) {\n        this.$message.warning('请先订阅该机器人后再发表评论');\n        return;\n      }\n\n      try {\n        const commentLoad = {\n          agentId: this.robot.id,\n          comment: this.newComment.text,\n          score: this.currentRating,\n        };\n\n        const response = await apiSendAgentComment(commentLoad);\n\n        if (response.status === 200) {\n          this.$message.success('评论发布成功！');\n\n          // 重置表单\n          this.newComment.text = '';\n          this.currentRating = 5;\n          this.showAddCommentForm = false;\n\n          // 重新加载评论列表\n          await this.loadComments(this.robot.id);\n        } else {\n          this.$message.error('评论发布失败，请稍后重试');\n        }\n      } catch (error) {\n        console.error('发布评论失败:', error);\n        this.$message.error('评论发布失败，请稍后重试');\n      }\n    },\n    // 点赞/点踩功能已注释\n    /*\n    likeComment(index) {\n      const comment = this.comments[index];\n      if (comment.userLiked) {\n        comment.likes--;\n        comment.userLiked = false;\n      } else {\n        if (comment.userDisliked) {\n          comment.dislikes--;\n          comment.userDisliked = false;\n        }\n        comment.likes++;\n        comment.userLiked = true;\n      }\n    },\n    dislikeComment(index) {\n      const comment = this.comments[index];\n      if (comment.userDisliked) {\n        comment.dislikes--;\n        comment.userDisliked = false;\n      } else {\n        if (comment.userLiked) {\n          comment.likes--;\n          comment.userLiked = false;\n        }\n        comment.dislikes++;\n        comment.userDisliked = true;\n      }\n    },\n    */\n    // 确认删除评论\n    confirmDeleteComment(index) {\n      console.log('准备删除评论，索引:', index);\n      if (index < 0 || index >= this.comments.length) {\n        this.$message.error('评论不存在');\n        return;\n      }\n\n      const comment = this.comments[index];\n      console.log('当前用户ID:', this.userId);\n      console.log('评论用户ID:', comment.user_id);\n\n      // 检查权限：只能删除自己的评论\n      if (comment.user_id !== this.userId) {\n        this.$message.error('您只能删除自己的评论');\n        return;\n      }\n\n      this.deleteCommentIndex = index;\n      this.deleteCommentDialogVisible = true;\n      this.incrementDialogRef();\n      console.log('删除确认弹窗已显示，引用计数:', this.dialogRefCount);\n    },\n    // 执行删除评论\n    async executeDeleteComment() {\n      if (\n        this.deleteCommentIndex >= 0 &&\n        this.deleteCommentIndex < this.comments.length\n      ) {\n        try {\n          const comment = this.comments[this.deleteCommentIndex];\n          const response = await apiDeleteAgentComment(comment.id);\n\n          if (response.status === 200) {\n            this.$message.success('评论删除成功！');\n\n            // 重新加载评论列表\n            await this.loadComments(this.robot.id);\n\n            // 如果删除后没有评论了，显示提示\n            if (this.comments.length === 0) {\n              this.$message.info('已删除所有评论，快来添加第一条评论吧！');\n            }\n          } else {\n            this.$message.error('评论删除失败，请稍后重试');\n          }\n        } catch (error) {\n          console.error('删除评论失败:', error);\n          this.$message.error('评论删除失败，请稍后重试');\n        }\n      }\n      this.closeDeleteCommentDialog();\n    },\n    // 关闭删除确认弹窗\n    closeDeleteCommentDialog() {\n      this.isClosingSubDialog = true;\n      this.deleteCommentDialogVisible = false;\n      this.deleteCommentIndex = -1;\n      this.decrementDialogRef();\n      // 延迟重置标识，防止连带关闭\n      setTimeout(() => {\n        this.isClosingSubDialog = false;\n      }, 100);\n      console.log('删除确认弹窗已关闭，防连带关闭标识已设置');\n    },\n    handleCommentAction(command) {\n      if (command.startsWith('delete-')) {\n        const index = parseInt(command.split('-')[1]);\n\n        // 验证索引有效性\n        if (isNaN(index)) {\n          this.$message.error('无效的评论索引');\n          return;\n        }\n\n        this.confirmDeleteComment(index);\n      } else {\n        // 处理其他可能的评论操作\n        console.log('未知的评论操作:', command);\n      }\n    },\n    deleteComment(index) {\n      // 这个方法已被 confirmDeleteComment 替代，保留以防兼容性问题\n      this.confirmDeleteComment(index);\n    },\n    showRecommendations() {\n      this.incrementDialogRef();\n      this.recommendationDialogVisible = true;\n      this.disableBodyScroll();\n    },\n    closeRecommendations() {\n      this.isClosingSubDialog = true;\n      this.recommendationDialogVisible = false;\n      this.decrementDialogRef();\n      // 延迟重置标识，防止连带关闭\n      setTimeout(() => {\n        this.isClosingSubDialog = false;\n      }, 100);\n    },\n    showAnotherRobotDetail(robotId) {\n      this.closeRecommendations();\n      this.$emit('show-robot', robotId);\n    },\n    subscribeRecommendedRobot(robotId) {\n      this.incrementDialogRef();\n      console.log('订阅机器人ID:', robotId);\n      this.$message.success(`订阅机器人 ${robotId} 成功！`);\n      // 模拟订阅完成后自动关闭\n      setTimeout(() => {\n        this.decrementDialogRef();\n      }, 1500);\n    },\n    formatDateTime(date) {\n      // 使用ISO 8601格式，与后端API保持一致\n      return date.toISOString();\n    },\n    openSubscriptionDialog() {\n      this.incrementDialogRef();\n      this.isSubscriptionDialogVisible = true;\n      this.disableBodyScroll();\n    },\n    closeSubscriptionDialog() {\n      this.isClosingSubDialog = true;\n      this.isSubscriptionDialogVisible = false;\n      this.decrementDialogRef();\n      this.enableBodyScroll();\n      // 延迟重置标识，防止连带关闭\n      setTimeout(() => {\n        this.isClosingSubDialog = false;\n      }, 100);\n    },\n    async handleSubscriptionConfirm(duration, points) {\n      console.log('订阅时长:', duration);\n      console.log('所需积分:', points);\n      await this.subscribeRobot(duration);\n      this.closeSubscriptionDialog();\n    },\n    async fetchRobotDetail(agentId) {\n      this.loading = true;\n      try {\n        const response = await apifetchAgentDetail(agentId);\n        this.robot = response.data;\n        // 确保机器人对象有price属性，当price为undefined或null时默认为1，但保留0值\n        if (this.robot.price === undefined || this.robot.price === null) {\n          this.robot.price = 1;\n        }\n      } catch (error) {\n        console.error('获取机器人详情失败:', error);\n        this.$message.error('无法加载机器人详情');\n      } finally {\n        this.loading = false;\n      }\n    },\n    async loadSubscriptionCount(agentId) {\n      try {\n        const response = await getSubscriptionCnt(agentId);\n        if (response.status === 200) {\n          this.robotStats.subscriptions = response.data.subscriptionCnt;\n        }\n      } catch (error) {\n        console.warn('获取订阅数失败:', error);\n        this.robotStats.subscriptions = 0;\n      }\n    },\n    async subscribeRobot(Duration) {\n      try {\n        const currentTime = this.formatDateTime(new Date());\n        const payload = {\n          userId: this.$store.state.user.userId,\n          agentId: this.robot.id,\n          startTime: currentTime,\n          duration: Duration,\n          subscriptionType: 1,\n        };\n        console.log('请求 payload:', payload);\n        const response = await apisubscribeAgent(payload);\n        if (response.status === 200) {\n          this.$message.success('订阅成功！');\n\n          // 1. 更新用户订阅数据\n          await this.$store.dispatch(\n            'agent/fetchUserSubscriptions',\n            this.$store.state.user.userId\n          );\n\n          // 2. 重新加载机器人订阅数量\n          await this.loadSubscriptionCount(this.robot.id);\n\n          // 3. 强制更新页面，确保按钮状态正确显示\n          this.$forceUpdate();\n\n          // 4. 通知父组件订阅状态已变化\n          this.$emit('subscription-changed', this.robot.id);\n\n          console.log('订阅成功!!!:', response);\n          console.log(\n            '订阅成功后的用户订阅列表:',\n            this.$store.state.agent.haveSubscribed\n          );\n        } else {\n          this.$message.error('订阅失败，请稍后重试。');\n        }\n      } catch (error) {\n        console.error('订阅失败:', error);\n        this.$message.error('无法订阅机器人，请稍后重试。');\n      }\n    },\n    handleSubscription() {\n      const subscribedRobot = this.$store.state.agent.haveSubscribed.find(\n        (r) => r.agent_id === this.robot.id\n      );\n\n      if (subscribedRobot && subscribedRobot.status) {\n        this.$router.push({\n          name: 'ConversationHistory',\n          params: { id: this.robot.id },\n        });\n      } else {\n        this.openSubscriptionDialog();\n      }\n    },\n    // 加载机器人评论\n    async loadComments(agentId) {\n      try {\n        const response = await apiGetAgentComment(agentId);\n        if (response.status === 200 && response.data) {\n          // 后端返回的数据格式：id, user_id, userName, comment, createdAt, score\n          this.comments = response.data.map((comment) => ({\n            id: comment.id,\n            user_id: comment.user_id,\n            userName: comment.userName || '匿名用户',\n            rating: comment.rating,\n            text: comment.comment,\n            timestamp: new Date(comment.createdAt).toLocaleString('zh-CN'),\n          }));\n\n          // 更新评论统计\n          this.robotStats.comments = this.comments.length;\n\n          // 计算平均评分\n          if (this.comments.length > 0) {\n            const avgRating =\n              this.comments.reduce(\n                (sum, comment) => sum + (comment.rating || 0),\n                0\n              ) / this.comments.length;\n            this.robotStats.rating = Math.round(avgRating * 10) / 10; // 保留一位小数\n          } else {\n            // 没有评论时显示暂无评分\n            this.robotStats.rating = 0;\n          }\n        } else {\n          this.comments = [];\n          this.robotStats.comments = 0;\n          this.robotStats.rating = 0;\n        }\n      } catch (error) {\n        console.error('加载评论失败:', error);\n        this.comments = [];\n        this.robotStats.comments = 0;\n        this.robotStats.rating = 0;\n      }\n    },\n  },\n  // 组件销毁时移除键盘事件监听\n  beforeDestroy() {\n    this.removeKeyboardListener();\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@use '@/assets/styles/mixins.scss' as *;\n@use '@/assets/styles/variables.scss' as *;\n\n// 弹窗覆盖层样式\n.robot-detail-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.95); // 使用完全覆盖下层\n  z-index: 9999;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 2vh;\n  overflow: hidden; // 防止滚动穿透\n\n  // 确保完全阻止滚动穿透\n  &::-webkit-scrollbar {\n    display: none;\n  }\n\n  // 禁用滚动\n  overscroll-behavior: contain;\n  touch-action: none;\n}\n\n// 弹窗主体样式\n.robot-detail-content {\n  background: white;\n  border-radius: 12px;\n  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.8);\n  max-width: 90vw;\n  max-height: 90vh;\n  width: 80vw;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n  animation: slideUp 0.3s ease-out;\n  transition:\n    opacity 0.3s ease,\n    filter 0.3s ease;\n\n  // 当有子弹窗时的禁用状态样式\n  &.content-disabled {\n    opacity: 0.5;\n    filter: grayscale(30%);\n    pointer-events: none;\n    user-select: none;\n    overflow: hidden;\n\n    // 禁用所有滚动\n    * {\n      overflow: hidden !important;\n      pointer-events: none !important;\n      user-select: none !important;\n    }\n  }\n}\n\n// 弹窗动画\n@keyframes slideUp {\n  from {\n    opacity: 0;\n    transform: translateY(30px) scale(0.95);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0) scale(1);\n  }\n}\n\n// 弹窗头部样式\n.robot-detail-header {\n  background: linear-gradient(135deg, $accent-color, $primary-color);\n  color: white;\n  padding: 2vh 3vw;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex-shrink: 0;\n\n  .robot-detail-title {\n    font-size: 1.5rem;\n    font-weight: 600;\n    margin: 0;\n  }\n\n  .robot-detail-close {\n    background: none;\n    border: none;\n    color: $accent-color;\n    font-size: 1.5rem;\n    cursor: pointer;\n    padding: 0.5vh 1vw;\n    border-radius: 50%;\n    transition: background-color 0.3s ease;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 40px;\n    height: 40px;\n  }\n}\n\n// 弹窗主内容区域\n.robot-detail-body {\n  flex: 1;\n  overflow-y: auto;\n  padding: 3vh 3vw;\n  background-color: $background-color;\n  color: $text-color;\n  font-family: Arial, sans-serif;\n\n  .robot-info-section {\n    background: white;\n    padding: 3vh 3vw;\n    margin-bottom: 2vh;\n    border-radius: 8px;\n    box-shadow: $box-shadow-light;\n\n    .robot-info-header {\n      display: flex;\n      gap: 2vw;\n      margin-bottom: 2vh;\n\n      .robot-detail-logo {\n        width: 8vh;\n        height: 8vh;\n        border-radius: 50%;\n        object-fit: cover;\n        background: #f0f0f0;\n      }\n\n      .robot-info {\n        flex: 1;\n\n        .robot-detail-name {\n          font-size: 1.5rem;\n          font-weight: 600;\n          margin-bottom: 1vh;\n          color: $text-color;\n        }\n\n        .robot-detail-description {\n          color: $text-color;\n          line-height: 1.6;\n          margin-bottom: 2vh;\n        }\n\n        .robot-developer {\n          color: $text-color;\n          margin-bottom: 2vh;\n          font-size: 0.95rem;\n\n          .developer-label {\n            font-weight: 500;\n            color: #666;\n          }\n\n          .developer-name {\n            color: $accent-color;\n            font-weight: 500;\n          }\n        }\n\n        .robot-stats {\n          display: flex;\n          gap: 3vw;\n          margin-bottom: 2vh;\n\n          .stat-item {\n            text-align: center;\n\n            .stat-value {\n              font-size: 1.2rem;\n              font-weight: 600;\n              color: $accent-color;\n            }\n\n            .stat-label {\n              font-size: 0.9rem;\n              color: $text-color;\n            }\n          }\n        }\n\n        .robot-detail-actions {\n          display: flex;\n          gap: 1.5vw;\n\n          .action-btn {\n            padding: 1.5vh 2.5vw;\n            border-radius: 6px;\n            font-weight: 500;\n            cursor: pointer;\n            transition: all 0.3s ease;\n\n            &.primary {\n              background: $accent-color;\n              color: white;\n              border: none;\n\n              &:hover {\n                background: $accent-hover-color;\n              }\n            }\n\n            &.secondary {\n              background: white;\n              color: $text-color;\n              border: 1px solid $border-color;\n\n              &:hover {\n                background: #f5f5f5;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  .comments-section {\n    background: white;\n    padding: 3vh 3vw;\n    border-radius: 8px;\n    box-shadow: $box-shadow-light;\n\n    .comments-header {\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      margin-bottom: 2vh;\n\n      .comments-title {\n        font-size: 1.1rem;\n        font-weight: 600;\n        color: $text-color;\n      }\n\n      .add-comment-btn {\n        background: $accent-color;\n        color: white;\n        border: none;\n        padding: 1vh 1.5vw;\n        border-radius: 4px;\n        cursor: pointer;\n      }\n    }\n\n    .add-comment-form {\n      border: 1px solid $border-color;\n      border-radius: 8px;\n      padding: 2vh 2vw;\n      margin-bottom: 2vh;\n      background: #f8f9fa;\n\n      .comment-form-group {\n        margin-bottom: 1.5vh;\n\n        .comment-form-label {\n          display: block;\n          margin-bottom: 0.5vh;\n          font-weight: 500;\n          color: $text-color;\n        }\n\n        .rating-input {\n          display: flex;\n          gap: 0.5vw;\n          margin-top: 0.5vh;\n\n          .rating-star {\n            color: #ddd;\n            font-size: 1.2rem;\n            cursor: pointer;\n            transition: color 0.2s;\n\n            &.active,\n            &:hover {\n              color: #ffc107;\n            }\n          }\n        }\n\n        .comment-input {\n          width: 100%;\n          padding: 1vh 1vw;\n          border: 1px solid $border-color;\n          border-radius: 4px;\n          font-size: 0.9rem;\n          resize: vertical;\n          min-height: 8vh;\n        }\n      }\n\n      .comment-form-actions {\n        display: flex;\n        gap: 1vw;\n        justify-content: flex-end;\n\n        .el-button {\n          padding: 1vh 1.5vw;\n          border-radius: 4px;\n          font-size: 0.9rem;\n        }\n      }\n    }\n\n    .comments-list {\n      .comment-item {\n        border-bottom: 1px solid #f0f0f0;\n        padding: 2vh 0;\n\n        &:last-child {\n          border-bottom: none;\n        }\n\n        .comment-header {\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n          margin-bottom: 1vh;\n\n          .comment-user {\n            font-weight: 500;\n            color: $text-color;\n          }\n\n          .comment-rating {\n            color: #ffc107;\n          }\n\n          .comment-menu {\n            position: relative;\n            margin-left: auto;\n\n            .comment-delete-btn {\n              background: none;\n              border: none;\n              color: #999;\n              cursor: pointer;\n              padding: 0.5vh;\n              border-radius: 50%;\n              width: 3vh;\n              height: 3vh;\n              display: flex;\n              align-items: center;\n              justify-content: center;\n              transition: all 0.3s ease;\n\n              &:hover {\n                background: #ffe6e6;\n                color: #f56c6c;\n                transform: scale(1.1);\n              }\n\n              &:active {\n                transform: scale(0.95);\n              }\n\n              i {\n                font-size: 1rem;\n              }\n            }\n          }\n        }\n\n        .comment-text {\n          color: $text-color;\n          line-height: 1.6;\n          margin-bottom: 1vh;\n        }\n\n        .comment-actions {\n          display: flex;\n          gap: 1.5vw;\n\n          /* 点赞/点踩功能相关样式已注释\n          .comment-action {\n            background: none;\n            border: none;\n            color: $text-color;\n            cursor: pointer;\n            font-size: 0.9rem;\n            display: flex;\n            align-items: center;\n            gap: 0.5vw;\n\n            &:hover {\n              color: $text-color;\n            }\n\n            &.liked {\n              color: #007bff;\n            }\n\n            &.disliked {\n              color: #dc3545;\n            }\n          }\n          */\n        }\n      }\n    }\n\n    .no-comments {\n      text-align: center;\n      color: $text-color;\n      padding: 4vh;\n      font-style: italic;\n    }\n  }\n}\n\n.recommendation-content {\n  .recommendation-section {\n    margin-bottom: 3vh;\n\n    &:last-child {\n      margin-bottom: 0;\n    }\n\n    .recommendation-category-title {\n      font-size: 1.1rem;\n      color: $text-color;\n      font-weight: 600;\n      margin-bottom: 1.5vh;\n      padding-bottom: 1vh;\n      border-bottom: 2px solid $accent-color;\n    }\n\n    .recommendation-grid {\n      display: grid;\n      grid-template-columns: repeat(auto-fill, minmax(25vw, 1fr));\n      gap: 1.5vh;\n\n      .recommendation-card {\n        cursor: pointer;\n        transition: all 0.3s ease;\n        border: 1px solid $border-color;\n        padding: 1.5vh 1.5vw;\n        border-radius: 8px;\n\n        &:hover {\n          transform: translateY(-2px);\n          box-shadow: $box-shadow-medium;\n        }\n\n        .recommendation-card-header {\n          display: flex;\n          align-items: center;\n          gap: 1vw;\n          margin-bottom: 1vh;\n\n          .recommendation-card-logo {\n            width: 4vh;\n            height: 4vh;\n            border-radius: 50%;\n            object-fit: cover;\n          }\n\n          .recommendation-card-info {\n            flex: 1;\n\n            .recommendation-card-name {\n              font-size: 0.9rem;\n              font-weight: 600;\n              color: $text-color;\n              margin-bottom: 0.2vh;\n            }\n\n            .recommendation-card-developer {\n              font-size: 0.8rem;\n              color: $text-color;\n            }\n          }\n        }\n\n        .recommendation-card-description {\n          color: $text-color;\n          font-size: 0.8rem;\n          line-height: 1.4;\n          margin-bottom: 1.5vh;\n          overflow: hidden;\n          display: -webkit-box;\n          -webkit-line-clamp: 2;\n          -webkit-box-orient: vertical;\n        }\n\n        .recommendation-card-footer {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n\n          .recommendation-card-stats {\n            .recommendation-card-rating {\n              display: flex;\n              align-items: center;\n              gap: 0.5vw;\n              color: #ffc107;\n              font-size: 0.8rem;\n              margin-bottom: 0.5vh;\n            }\n\n            .recommendation-card-points {\n              display: flex;\n              align-items: center;\n              gap: 0.5vw;\n              color: #f39c12;\n              font-size: 0.8rem;\n            }\n          }\n\n          .recommendation-card-btn {\n            background: $accent-color;\n            color: white;\n            border: none;\n            padding: 0.5vh 1vw;\n            border-radius: 4px;\n            font-size: 0.8rem;\n            cursor: pointer;\n            transition: all 0.3s ease;\n\n            &:hover {\n              background: $accent-hover-color;\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n// 响应式设计\n@media (max-width: 768px) {\n  .robot-detail-content {\n    width: 95vw;\n    max-height: 95vh;\n  }\n\n  .robot-detail-header {\n    padding: 1.5vh 2vw;\n\n    .robot-detail-title {\n      font-size: 1.2rem;\n    }\n\n    .robot-detail-close {\n      width: 3.5vh;\n      height: 3.5vh;\n    }\n  }\n\n  .robot-detail-body {\n    padding: 2vh 2vw;\n\n    .robot-info-section {\n      padding: 2vh 2vw;\n\n      .robot-info-header {\n        flex-direction: column;\n        text-align: center;\n        gap: 1.5vh;\n\n        .robot-detail-logo {\n          align-self: center;\n          width: 6vh;\n          height: 6vh;\n        }\n\n        .robot-info {\n          .robot-stats {\n            justify-content: center;\n            gap: 2vw;\n          }\n\n          .robot-detail-actions {\n            flex-direction: column;\n            align-items: center;\n            gap: 1vh;\n\n            .action-btn {\n              width: 100%;\n              max-width: 50vw;\n            }\n          }\n        }\n      }\n    }\n\n    .comments-section {\n      padding: 2vh 2vw;\n\n      .comments-header {\n        flex-direction: column;\n        gap: 1vh;\n        align-items: stretch;\n      }\n    }\n  }\n\n  .recommendation-content {\n    .recommendation-section {\n      .recommendation-grid {\n        grid-template-columns: 1fr;\n      }\n    }\n  }\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}