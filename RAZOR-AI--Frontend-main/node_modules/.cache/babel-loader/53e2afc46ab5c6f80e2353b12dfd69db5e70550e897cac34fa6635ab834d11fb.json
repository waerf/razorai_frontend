{"ast":null,"code":"// src/utils/api.js\n//api.js 文件用于封装 API 请求，方便在项目中进行统一管理和调用。\nimport axios from 'axios';\nimport MyStorage from './storage'; // 引入 Storage 工具类\n\nconst api = axios.create({\n  baseURL: '/api',\n  timeout: 5000\n});\nconst adminApi = axios.create({\n  baseURL: 'http://localhost:5253',\n  timeout: 50000\n});\n\n// 为adminApi添加请求拦截器\nadminApi.interceptors.request.use(config => {\n  const token = MyStorage.get('admin_token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 请求拦截器\napi.interceptors.request.use(config => {\n  if (config.method === 'post' && !config.headers.get('Content-Type')) {\n    config.headers.set('Content-Type', 'application/json');\n  }\n  const skipAuth = config.headers.get('skipAuth');\n  if (!skipAuth) {\n    const token = MyStorage.get('token');\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    } else {\n      console.warn('Token is missing; Authorization header not set.');\n    }\n  }\n  // 移除自定义标志以免发送到服务器\n  config.headers.delete('skipAuth');\n  return config;\n}, error => {\n  return Promise.reject(error); // 请求错误直接返回\n});\n\n// 响应拦截器\napi.interceptors.response.use(response => response,\n// 正常响应直接返回\nerror => {\n  // 处理错误响应\n  if (error.response) {\n    console.log('Error response in api.js:', error.response);\n    const {\n      status,\n      data\n    } = error.response;\n    return Promise.reject({\n      code: status,\n      message: data.message\n    }); // 返回错误状态码和消息\n  } else if (error.request) {\n    // 请求已发出但没有收到响应\n    console.error('No response received:', error.request);\n    return Promise.reject({\n      code: 'NETWORK_ERROR',\n      message: '网络连接失败，请检查后端服务是否正常运行'\n    });\n  } else {\n    // 请求配置错误\n    console.error('Request setup error:', error.message);\n    return Promise.reject({\n      code: 'REQUEST_ERROR',\n      message: '请求配置错误: ' + error.message\n    });\n  }\n});\n\n// API 请求方法\nexport const login = payload => api.post('/user/login', payload, {\n  headers: {\n    skipAuth: true\n  } // 跳过 Authorization 头\n});\nexport const register = payload => api.post('/user/register', payload, {\n  headers: {\n    skipAuth: true\n  } // 跳过 Authorization 头\n});\n\n// 获取用户信息\nexport const getUserInfo = userId => api.get(`/user/${userId}`);\n\n// 更新用户信息\nexport const updateUserInfo = (userId, payload) => api.post(`/user/update-info/${userId}`, payload, {\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 获取用户积分余额\nexport const getUserPoints = () => api.get('/points/balance');\n\n// 获取积分历史记录\nexport const getPointsHistory = (page = 1, pageSize = 20) => api.get(`/points/history?page=${page}&pageSize=${pageSize}`);\n\n// 获取积分统计信息\nexport const getPointsStats = () => api.get('/points/stats');\n\n// 用户充值积分\nexport const rechargePoints = (points, description = '用户充值积分') => api.post('/points/recharge', {\n  points,\n  description\n});\n\n// 获取充值历史记录\nexport const getRechargeHistory = (page = 1, pageSize = 20) => api.get(`/points/recharge-history?page=${page}&pageSize=${pageSize}`);\n\n// 检查积分是否足够\nexport const checkPointsEnough = requiredPoints => api.post('/points/check', {\n  requiredPoints\n});\n\n// 管理员增加积分\nexport const addUserPoints = (userId, points, actionType, description, relatedId = null) => api.post('/points/add', {\n  userId,\n  points,\n  actionType,\n  description,\n  relatedId\n});\n\n// 管理员扣除积分\nexport const deductUserPoints = (userId, points, actionType, description, relatedId = null) => api.post('/points/deduct', {\n  userId,\n  points,\n  actionType,\n  description,\n  relatedId\n});\nexport const adminLogin = data => {\n  return adminApi.post('api/admin/login', data);\n};\nexport const approveRobot = robotId => {\n  return adminApi.post(`/admin/robots/${robotId}/approve`);\n};\nexport const rejectRobot = robotId => {\n  return adminApi.post(`/admin/robots/${robotId}/reject`);\n};\nexport const getPendingRobots = () => {\n  return adminApi.get('/api/admin/agent-review/pending');\n};\n\n// 获取管理员信息\nexport const getAdminInfo = () => {\n  return adminApi.get('/api/admin/info');\n};\nexport const getFeedbacks = () => {\n  return adminApi.get('/admin/feedbacks');\n};\nexport const markFeedbackAsRead = feedbackId => {\n  return adminApi.post(`/admin/feedbacks/${feedbackId}/read`);\n};\nexport const deleteFeedback = feedbackId => {\n  return adminApi.delete(`/admin/feedbacks/${feedbackId}`);\n};\nexport const getNotifications = () => {\n  return adminApi.get('/admin/notifications');\n};\nexport const sendNotification = notificationId => {\n  return adminApi.post(`/admin/notifications/${notificationId}/send`);\n};\nexport const createNotification = data => {\n  return adminApi.post('/admin/notifications', data);\n};\nexport const deleteNotification = notificationId => {\n  return adminApi.delete(`/admin/notifications/${notificationId}`);\n};\nexport const fetchAllAgentsData = () => api.get('/market', {\n  headers: {\n    skipAuth: true\n  }\n}); // 跳过 Authorization 头\n\nexport const fetchAgentDetail = agentId => api.get(`/market/agentdetail/${agentId}`, {\n  headers: {\n    skipAuth: true\n  }\n}); // 跳过 Authorization 头\n\nexport const searchAgent = searchload => api.post(`/market/search`, searchload); // 跳过 Authorization 头\n\nexport const fetchUserSubscriptions = async userId => {\n  const response = await api.get(`/market/user/subs/${userId}`, {\n    headers: {\n      skipAuth: false\n    }\n  });\n  return response;\n};\nexport const fetchChatDetailedHistory = async chat_id => {\n  console.log('chat_id in api.js:', chat_id);\n  const response = await api.get(`/agent/user/chat/${chat_id.chat_id}`, {\n    headers: {\n      skipAuth: false\n    }\n  });\n  return response;\n};\nexport const fetchAllChats = user_id => api.post('/agent/user/chat/all', user_id, {\n  headers: {\n    skipAuth: false\n  }\n});\nexport const subscribeAgent = payload => api.post('/market/user/agent/subscribe', payload, {\n  headers: {\n    skipAuth: false\n  }\n});\nexport const createAI = payload => api.post('/agent/user/creation', payload, {\n  headers: {\n    skipAuth: false\n  }\n});\nexport const createChat = payload => api.post('/agent/user/chat/creation', payload, {\n  headers: {\n    skipAuth: false\n  }\n});\nexport const sendMessage = payload => api.post(`/agent/user/chat/${payload.chat_id}`, {\n  question: payload.content\n}, {\n  headers: {\n    skipAuth: false\n  },\n  timeout: 30000 // 设置 30 秒超时时间\n});\nexport const saveChatHistory = chatId => api.post(`/agent/chat/save/${chatId.chat_id}`, {\n  headers: {\n    skipAuth: true\n  }\n});\nexport const closeChat = chatId => api.delete(`/agent/user/chat/${chatId.chat_id}`, {\n  headers: {\n    skipAuth: false\n  }\n});\nexport const deleteChat = chatId => api.delete(`/agent/user/chat/delete/${chatId.chat_id}`, {\n  headers: {\n    skipAuth: false\n  }\n});\n\n// 获取机器人订阅数量\nexport const getSubscriptionCnt = agentId => api.get(`/market/subscription/count/${agentId}`, {\n  headers: {\n    skipAuth: true\n  }\n});\n\n// 获取机器人评论\nexport const getAgentComment = agentId => api.get(`/market/feedback/${agentId}`, {\n  headers: {\n    skipAuth: true\n  }\n});\n\n// 发布机器人评论\nexport const sendAgentComment = payload => api.post('/market/feedback', payload, {\n  headers: {\n    skipAuth: false\n  }\n});\n\n// 删除机器人评论\nexport const deleteAgentComment = feedbackId => api.delete(`/market/feedback/${feedbackId}`, {\n  headers: {\n    skipAuth: false\n  }\n});\n\n//根据机器人类型分页\nexport const getRobotsByType = agentload => api.post(`/market/agents/by-type`, agentload, {\n  headers: {\n    skipAuth: true\n  }\n});\n\n//获取推荐机器人\nexport const getRecommendedRobots = userId => api.post(`/agent/recommend`, userId, {\n  headers: {\n    skipAuth: true\n  }\n});\n\n// ====================== 社区模块 API ======================\n// 创建帖子\nexport const createCommunityPost = payload => api.post('/community/posts', payload, {\n  headers: {\n    skipAuth: false\n  }\n});\n\n// 修改帖子\nexport const updateCommunityPost = (postId, payload) => api.put(`/community/posts/${postId}`, payload, {\n  headers: {\n    skipAuth: false\n  }\n});\n\n// 删除帖子\nexport const deleteCommunityPost = (postId, payload) => api.delete(`/community/posts/${postId}`, {\n  data: payload,\n  headers: {\n    skipAuth: false\n  }\n});\n\n// 获取单个帖子详情\nexport const getCommunityPostDetail = postId => api.get(`/community/posts/${postId}`, {\n  headers: {\n    skipAuth: true\n  }\n});\n\n// 获取指定用户的所有帖子\nexport const getCommunityUserPosts = userId => api.get(`/community/posts/user/${userId}`, {\n  headers: {\n    skipAuth: false\n  }\n});\n\n// 发布评论\nexport const createCommunityComment = (postId, payload) => api.post(`/community/posts/${postId}/comments`, payload, {\n  headers: {\n    skipAuth: false\n  }\n});\n\n// 删除评论\nexport const deleteCommunityComment = (commentId, payload) => api.delete(`/community/comments/${commentId}`, {\n  data: payload,\n  // DELETE 请求携带请求体\n  headers: {\n    skipAuth: false\n  }\n});\n\n// 获取帖子的所有评论\nexport const getCommunityPostComments = postId => api.get(`/community/posts/${postId}/comments`, {\n  headers: {\n    skipAuth: true\n  }\n});\n\n// 获取帖子评论数\nexport const getCommunityCommentCount = postId => api.get(`/community/posts/${postId}/comments/count`, {\n  headers: {\n    skipAuth: true\n  }\n});\n\n// 点赞帖子\nexport const likeCommunityPost = (postId, payload) => api.post(`/community/posts/${postId}/like`, payload, {\n  headers: {\n    skipAuth: false\n  }\n});\n\n// 取消点赞\nexport const cancelLikeCommunityPost = (postId, payload) => api.delete(`/community/posts/${postId}/like`, {\n  data: payload,\n  headers: {\n    skipAuth: false\n  }\n});\n\n// 获取帖子点赞数\nexport const getCommunityLikeCount = postId => api.get(`/community/posts/${postId}/likes/count`, {\n  headers: {\n    skipAuth: true\n  }\n});\n\n// 获取推荐的最新帖子\nexport const getRecommendedPosts = count => api.post('/community/posts/recommend', {\n  Count: count\n}, {\n  headers: {\n    skipAuth: true\n  }\n});","map":{"version":3,"names":["axios","MyStorage","api","create","baseURL","timeout","adminApi","interceptors","request","use","config","token","get","headers","Authorization","error","Promise","reject","method","set","skipAuth","console","warn","delete","response","log","status","data","code","message","login","payload","post","register","getUserInfo","userId","updateUserInfo","getUserPoints","getPointsHistory","page","pageSize","getPointsStats","rechargePoints","points","description","getRechargeHistory","checkPointsEnough","requiredPoints","addUserPoints","actionType","relatedId","deductUserPoints","adminLogin","approveRobot","robotId","rejectRobot","getPendingRobots","getAdminInfo","getFeedbacks","markFeedbackAsRead","feedbackId","deleteFeedback","getNotifications","sendNotification","notificationId","createNotification","deleteNotification","fetchAllAgentsData","fetchAgentDetail","agentId","searchAgent","searchload","fetchUserSubscriptions","fetchChatDetailedHistory","chat_id","fetchAllChats","user_id","subscribeAgent","createAI","createChat","sendMessage","question","content","saveChatHistory","chatId","closeChat","deleteChat","getSubscriptionCnt","getAgentComment","sendAgentComment","deleteAgentComment","getRobotsByType","agentload","getRecommendedRobots","createCommunityPost","updateCommunityPost","postId","put","deleteCommunityPost","getCommunityPostDetail","getCommunityUserPosts","createCommunityComment","deleteCommunityComment","commentId","getCommunityPostComments","getCommunityCommentCount","likeCommunityPost","cancelLikeCommunityPost","getCommunityLikeCount","getRecommendedPosts","count","Count"],"sources":["D:/1/razorai_frontend/RAZOR-AI--Frontend-main/src/utils/api.js"],"sourcesContent":["// src/utils/api.js\n//api.js 文件用于封装 API 请求，方便在项目中进行统一管理和调用。\nimport axios from 'axios';\nimport MyStorage from './storage'; // 引入 Storage 工具类\n\nconst api = axios.create({\n  baseURL: '/api',\n  timeout: 5000,\n});\n\nconst adminApi = axios.create({\n  baseURL: 'http://localhost:5253',\n  timeout: 50000,\n});\n\n// 为adminApi添加请求拦截器\nadminApi.interceptors.request.use(\n  (config) => {\n    const token = MyStorage.get('admin_token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// 请求拦截器\napi.interceptors.request.use(\n  (config) => {\n    if (config.method === 'post' && !config.headers.get('Content-Type')) {\n      config.headers.set('Content-Type', 'application/json');\n    }\n    const skipAuth = config.headers.get('skipAuth');\n    if (!skipAuth) {\n      const token = MyStorage.get('token');\n      if (token) {\n        config.headers['Authorization'] = `Bearer ${token}`;\n      } else {\n        console.warn('Token is missing; Authorization header not set.');\n      }\n    }\n    // 移除自定义标志以免发送到服务器\n    config.headers.delete('skipAuth');\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error); // 请求错误直接返回\n  }\n);\n\n// 响应拦截器\napi.interceptors.response.use(\n  (response) => response, // 正常响应直接返回\n  (error) => {\n    // 处理错误响应\n    if (error.response) {\n      console.log('Error response in api.js:', error.response);\n      const { status, data } = error.response;\n      return Promise.reject({ code: status, message: data.message }); // 返回错误状态码和消息\n    } else if (error.request) {\n      // 请求已发出但没有收到响应\n      console.error('No response received:', error.request);\n      return Promise.reject({\n        code: 'NETWORK_ERROR',\n        message: '网络连接失败，请检查后端服务是否正常运行',\n      });\n    } else {\n      // 请求配置错误\n      console.error('Request setup error:', error.message);\n      return Promise.reject({\n        code: 'REQUEST_ERROR',\n        message: '请求配置错误: ' + error.message,\n      });\n    }\n  }\n);\n\n// API 请求方法\nexport const login = (payload) =>\n  api.post('/user/login', payload, {\n    headers: { skipAuth: true }, // 跳过 Authorization 头\n  });\n\nexport const register = (payload) =>\n  api.post('/user/register', payload, {\n    headers: { skipAuth: true }, // 跳过 Authorization 头\n  });\n\n// 获取用户信息\nexport const getUserInfo = (userId) => api.get(`/user/${userId}`);\n\n// 更新用户信息\nexport const updateUserInfo = (userId, payload) =>\n  api.post(`/user/update-info/${userId}`, payload, {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n\n// 获取用户积分余额\nexport const getUserPoints = () => api.get('/points/balance');\n\n// 获取积分历史记录\nexport const getPointsHistory = (page = 1, pageSize = 20) =>\n  api.get(`/points/history?page=${page}&pageSize=${pageSize}`);\n\n// 获取积分统计信息\nexport const getPointsStats = () => api.get('/points/stats');\n\n// 用户充值积分\nexport const rechargePoints = (points, description = '用户充值积分') =>\n  api.post('/points/recharge', { points, description });\n\n// 获取充值历史记录\nexport const getRechargeHistory = (page = 1, pageSize = 20) =>\n  api.get(`/points/recharge-history?page=${page}&pageSize=${pageSize}`);\n\n// 检查积分是否足够\nexport const checkPointsEnough = (requiredPoints) =>\n  api.post('/points/check', { requiredPoints });\n\n// 管理员增加积分\nexport const addUserPoints = (\n  userId,\n  points,\n  actionType,\n  description,\n  relatedId = null\n) =>\n  api.post('/points/add', {\n    userId,\n    points,\n    actionType,\n    description,\n    relatedId,\n  });\n\n// 管理员扣除积分\nexport const deductUserPoints = (\n  userId,\n  points,\n  actionType,\n  description,\n  relatedId = null\n) =>\n  api.post('/points/deduct', {\n    userId,\n    points,\n    actionType,\n    description,\n    relatedId,\n  });\n\nexport const adminLogin = (data) => {\n  return adminApi.post('api/admin/login', data);\n};\n\nexport const approveRobot = (robotId) => {\n  return adminApi.post(`/admin/robots/${robotId}/approve`);\n};\n\nexport const rejectRobot = (robotId) => {\n  return adminApi.post(`/admin/robots/${robotId}/reject`);\n};\n\nexport const getPendingRobots = () => {\n  return adminApi.get('/api/admin/agent-review/pending');\n};\n\n// 获取管理员信息\nexport const getAdminInfo = () => {\n  return adminApi.get('/api/admin/info');\n};\n\nexport const getFeedbacks = () => {\n  return adminApi.get('/admin/feedbacks');\n};\n\nexport const markFeedbackAsRead = (feedbackId) => {\n  return adminApi.post(`/admin/feedbacks/${feedbackId}/read`);\n};\n\nexport const deleteFeedback = (feedbackId) => {\n  return adminApi.delete(`/admin/feedbacks/${feedbackId}`);\n};\n\nexport const getNotifications = () => {\n  return adminApi.get('/admin/notifications');\n};\n\nexport const sendNotification = (notificationId) => {\n  return adminApi.post(`/admin/notifications/${notificationId}/send`);\n};\n\nexport const createNotification = (data) => {\n  return adminApi.post('/admin/notifications', data);\n};\n\nexport const deleteNotification = (notificationId) => {\n  return adminApi.delete(`/admin/notifications/${notificationId}`);\n};\n\nexport const fetchAllAgentsData = () =>\n  api.get('/market', { headers: { skipAuth: true } }); // 跳过 Authorization 头\n\nexport const fetchAgentDetail = (agentId) =>\n  api.get(`/market/agentdetail/${agentId}`, { headers: { skipAuth: true } }); // 跳过 Authorization 头\n\nexport const searchAgent = (searchload) =>\n  api.post(`/market/search`, searchload); // 跳过 Authorization 头\n\nexport const fetchUserSubscriptions = async (userId) => {\n  const response = await api.get(`/market/user/subs/${userId}`, {\n    headers: { skipAuth: false },\n  });\n  return response;\n};\n\nexport const fetchChatDetailedHistory = async (chat_id) => {\n  console.log('chat_id in api.js:', chat_id);\n  const response = await api.get(`/agent/user/chat/${chat_id.chat_id}`, {\n    headers: { skipAuth: false },\n  });\n  return response;\n};\n\nexport const fetchAllChats = (user_id) =>\n  api.post('/agent/user/chat/all', user_id, {\n    headers: { skipAuth: false },\n  });\n\nexport const subscribeAgent = (payload) =>\n  api.post('/market/user/agent/subscribe', payload, {\n    headers: { skipAuth: false },\n  });\n\nexport const createAI = (payload) =>\n  api.post('/agent/user/creation', payload, {\n    headers: { skipAuth: false },\n  });\n\nexport const createChat = (payload) =>\n  api.post('/agent/user/chat/creation', payload, {\n    headers: { skipAuth: false },\n  });\n\nexport const sendMessage = (payload) =>\n  api.post(\n    `/agent/user/chat/${payload.chat_id}`,\n    { question: payload.content },\n    {\n      headers: { skipAuth: false },\n      timeout: 30000, // 设置 30 秒超时时间\n    }\n  );\n\nexport const saveChatHistory = (chatId) =>\n  api.post(`/agent/chat/save/${chatId.chat_id}`, {\n    headers: { skipAuth: true },\n  });\n\nexport const closeChat = (chatId) =>\n  api.delete(`/agent/user/chat/${chatId.chat_id}`, {\n    headers: { skipAuth: false },\n  });\n\nexport const deleteChat = (chatId) =>\n  api.delete(`/agent/user/chat/delete/${chatId.chat_id}`, {\n    headers: { skipAuth: false },\n  });\n\n// 获取机器人订阅数量\nexport const getSubscriptionCnt = (agentId) =>\n  api.get(`/market/subscription/count/${agentId}`, {\n    headers: { skipAuth: true },\n  });\n\n// 获取机器人评论\nexport const getAgentComment = (agentId) =>\n  api.get(`/market/feedback/${agentId}`, {\n    headers: { skipAuth: true },\n  });\n\n// 发布机器人评论\nexport const sendAgentComment = (payload) =>\n  api.post('/market/feedback', payload, {\n    headers: { skipAuth: false },\n  });\n\n// 删除机器人评论\nexport const deleteAgentComment = (feedbackId) =>\n  api.delete(`/market/feedback/${feedbackId}`, {\n    headers: { skipAuth: false },\n  });\n\n//根据机器人类型分页\nexport const getRobotsByType = (agentload) =>\n  api.post(`/market/agents/by-type`, agentload, {\n    headers: { skipAuth: true },\n  });\n\n//获取推荐机器人\nexport const getRecommendedRobots = (userId) =>\n  api.post(`/agent/recommend`, userId, {\n    headers: { skipAuth: true },\n  });\n\n// ====================== 社区模块 API ======================\n// 创建帖子\nexport const createCommunityPost = (payload) =>\n  api.post('/community/posts', payload, {\n    headers: { skipAuth: false },\n  });\n\n// 修改帖子\nexport const updateCommunityPost = (postId, payload) =>\n  api.put(`/community/posts/${postId}`, payload, {\n    headers: { skipAuth: false },\n  });\n\n// 删除帖子\nexport const deleteCommunityPost = (postId, payload) =>\n  api.delete(`/community/posts/${postId}`, {\n    data: payload,\n    headers: { skipAuth: false },\n  });\n\n// 获取单个帖子详情\nexport const getCommunityPostDetail = (postId) =>\n  api.get(`/community/posts/${postId}`, {\n    headers: { skipAuth: true },\n  });\n\n// 获取指定用户的所有帖子\nexport const getCommunityUserPosts = (userId) =>\n  api.get(`/community/posts/user/${userId}`, {\n    headers: { skipAuth: false },\n  });\n\n// 发布评论\nexport const createCommunityComment = (postId, payload) =>\n  api.post(`/community/posts/${postId}/comments`, payload, {\n    headers: { skipAuth: false },\n  });\n\n// 删除评论\nexport const deleteCommunityComment = (commentId, payload) =>\n  api.delete(`/community/comments/${commentId}`, {\n    data: payload, // DELETE 请求携带请求体\n    headers: { skipAuth: false },\n  });\n\n// 获取帖子的所有评论\nexport const getCommunityPostComments = (postId) =>\n  api.get(`/community/posts/${postId}/comments`, {\n    headers: { skipAuth: true },\n  });\n\n// 获取帖子评论数\nexport const getCommunityCommentCount = (postId) =>\n  api.get(`/community/posts/${postId}/comments/count`, {\n    headers: { skipAuth: true },\n  });\n\n// 点赞帖子\nexport const likeCommunityPost = (postId, payload) =>\n  api.post(`/community/posts/${postId}/like`, payload, {\n    headers: { skipAuth: false },\n  });\n\n// 取消点赞\nexport const cancelLikeCommunityPost = (postId, payload) =>\n  api.delete(`/community/posts/${postId}/like`, {\n    data: payload,\n    headers: { skipAuth: false },\n  });\n\n// 获取帖子点赞数\nexport const getCommunityLikeCount = (postId) =>\n  api.get(`/community/posts/${postId}/likes/count`, {\n    headers: { skipAuth: true },\n  });\n\n// 获取推荐的最新帖子\nexport const getRecommendedPosts = (count) =>\n  api.post(\n    '/community/posts/recommend',\n    { Count: count },\n    {\n      headers: { skipAuth: true },\n    }\n  );\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}