{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mapActions, mapGetters } from 'vuex';\nexport default {\n  name: 'LoginForm',\n  data() {\n    return {\n      loginForm: {\n        identifier: '',\n        password: '',\n        rememberMe: false\n      },\n      loginRules: {\n        identifier: [{\n          required: true,\n          message: '请输入账号',\n          trigger: 'blur'\n        }, {\n          min: 2,\n          message: '账号至少2个字符',\n          trigger: 'blur'\n        }, {\n          validator: (rule, value, callback) => {\n            if (!value) {\n              callback();\n              return;\n            }\n\n            // 检查是否是有效的格式（用户名、邮箱或手机号）\n            const isEmail = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(value);\n            const isPhone = /^1[3-9]\\d{9}$/.test(value);\n            const isUsername = /^[a-zA-Z0-9_\\u4e00-\\u9fa5]{2,20}$/.test(value);\n            if (!isEmail && !isPhone && !isUsername) {\n              callback(new Error('请输入有效的用户名、邮箱或手机号'));\n            } else {\n              callback();\n            }\n          },\n          trigger: 'blur'\n        }],\n        password: [{\n          required: true,\n          message: '请输入您的密码',\n          trigger: 'blur'\n        }]\n      },\n      isLoading: false\n    };\n  },\n  computed: {\n    ...mapGetters('user', ['isLoggedIn', 'user_id']) // 指定 user 命名空间\n  },\n  methods: {\n    ...mapActions('user', ['login']),\n    // 映射 user 模块中的 login 方法\n    async onSubmit() {\n      this.$refs.loginForm.validate(async valid => {\n        if (valid) {\n          this.isLoading = true; // 开始加载状态\n          try {\n            // 调用Vuex中user模块的login方法\n            const result = await this.login({\n              Identifier: this.loginForm.identifier,\n              // 使用后端期望的参数名\n              Password: this.loginForm.password // 使用后端期望的参数名\n            });\n            console.log('isLoggedIn in LoginForm:', this.isLoggedIn);\n            if (result.success) {\n              this.$message.success(result.message || '登录成功！'); // 提示登录成功\n              this.closeDialog(); // 关闭对话框\n            } else {\n              this.$message.error(result.message || '登录失败，请检查用户名和密码'); // 提示登录失败\n            }\n          } catch (error) {\n            console.error(error); // 打印错误信息\n            this.$message.error(error.message || '登录失败，打开控制台检查');\n          } finally {\n            // 无论成功或失败都会执行\n            this.isLoading = false; // 结束加载状态\n            location.reload(); // 强制刷新页面\n          }\n        } else {\n          this.$message.error('请正确填写表单');\n        }\n      });\n    },\n    closeDialog() {\n      this.$emit('close'); // 触发关闭事件\n      this.resetForm(); // 重置表单\n    },\n    resetForm() {\n      this.loginForm.identifier = '';\n      this.loginForm.password = '';\n      this.loginForm.rememberMe = false;\n    },\n    navigateTo(route) {\n      if (this.$route.name !== route) {\n        this.$router.push({\n          name: route\n        });\n      }\n    },\n    handleRegister() {\n      this.closeDialog(); // 关闭对话框\n      this.navigateTo('Register'); // 跳转到注册页面\n    },\n    handleAdminLogin() {\n      this.closeDialog(); // 关闭对话框\n      this.navigateTo('AdminLogin'); // 跳转到管理员登录页面\n    }\n  }\n};","map":{"version":3,"names":["mapActions","mapGetters","name","data","loginForm","identifier","password","rememberMe","loginRules","required","message","trigger","min","validator","rule","value","callback","isEmail","test","isPhone","isUsername","Error","isLoading","computed","methods","onSubmit","$refs","validate","valid","result","login","Identifier","Password","console","log","isLoggedIn","success","$message","closeDialog","error","location","reload","$emit","resetForm","navigateTo","route","$route","$router","push","handleRegister","handleAdminLogin"],"sources":["src/components/LoginForm.vue"],"sourcesContent":["<!-- src/components/LoginForm.vue -->\n<template>\n  <el-form\n    :model=\"loginForm\"\n    :rules=\"loginRules\"\n    ref=\"loginForm\"\n    @keyup.enter.native=\"onSubmit\"\n    v-loading=\"isLoading\"\n  >\n    <el-form-item label=\"账号\" prop=\"identifier\">\n      <el-input\n        v-model=\"loginForm.identifier\"\n        placeholder=\"用户名/邮箱/手机号\"\n        prefix-icon=\"el-icon-user\"\n      ></el-input>\n      <div style=\"font-size: 12px; color: #909399; margin-top: 2px\">\n        支持用户名、邮箱或手机号登录\n      </div>\n    </el-form-item>\n    <el-form-item label=\"密码\" prop=\"password\">\n      <el-input\n        v-model=\"loginForm.password\"\n        type=\"password\"\n        placeholder=\"请输入密码\"\n        prefix-icon=\"el-icon-lock\"\n        show-password\n      ></el-input>\n    </el-form-item>\n    <el-form-item>\n      <div class=\"form-footer\">\n        <el-checkbox v-model=\"loginForm.rememberMe\">记住我</el-checkbox>\n        <div class=\"register-prompt\">\n          <span>没有账户？</span>\n          <el-button type=\"text\" @click=\"handleRegister\">点击注册</el-button>\n        </div>\n      </div>\n    </el-form-item>\n    <el-form-item>\n      <el-button\n        type=\"primary\"\n        @click=\"onSubmit\"\n        class=\"login-button\"\n        :loading=\"isLoading\"\n        >登录</el-button\n      >\n      <el-button class=\"login-button\" @click=\"closeDialog\">取消</el-button>\n      <el-button type=\"text\" @click=\"handleAdminLogin\" style=\"margin-left: 10px\"\n        >管理员登录</el-button\n      >\n    </el-form-item>\n  </el-form>\n</template>\n\n<script>\nimport { mapActions, mapGetters } from 'vuex';\n\nexport default {\n  name: 'LoginForm',\n  data() {\n    return {\n      loginForm: {\n        identifier: '',\n        password: '',\n        rememberMe: false,\n      },\n      loginRules: {\n        identifier: [\n          { required: true, message: '请输入账号', trigger: 'blur' },\n          { min: 2, message: '账号至少2个字符', trigger: 'blur' },\n          {\n            validator: (rule, value, callback) => {\n              if (!value) {\n                callback();\n                return;\n              }\n\n              // 检查是否是有效的格式（用户名、邮箱或手机号）\n              const isEmail = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(value);\n              const isPhone = /^1[3-9]\\d{9}$/.test(value);\n              const isUsername = /^[a-zA-Z0-9_\\u4e00-\\u9fa5]{2,20}$/.test(\n                value\n              );\n\n              if (!isEmail && !isPhone && !isUsername) {\n                callback(new Error('请输入有效的用户名、邮箱或手机号'));\n              } else {\n                callback();\n              }\n            },\n            trigger: 'blur',\n          },\n        ],\n        password: [\n          { required: true, message: '请输入您的密码', trigger: 'blur' },\n        ],\n      },\n      isLoading: false,\n    };\n  },\n  computed: {\n    ...mapGetters('user', ['isLoggedIn', 'user_id']), // 指定 user 命名空间\n  },\n  methods: {\n    ...mapActions('user', ['login']), // 映射 user 模块中的 login 方法\n    async onSubmit() {\n      this.$refs.loginForm.validate(async (valid) => {\n        if (valid) {\n          this.isLoading = true; // 开始加载状态\n          try {\n            // 调用Vuex中user模块的login方法\n            const result = await this.login({\n              Identifier: this.loginForm.identifier, // 使用后端期望的参数名\n              Password: this.loginForm.password, // 使用后端期望的参数名\n            });\n            console.log('isLoggedIn in LoginForm:', this.isLoggedIn);\n            if (result.success) {\n              this.$message.success(result.message || '登录成功！'); // 提示登录成功\n              this.closeDialog(); // 关闭对话框\n            } else {\n              this.$message.error(\n                result.message || '登录失败，请检查用户名和密码'\n              ); // 提示登录失败\n            }\n          } catch (error) {\n            console.error(error); // 打印错误信息\n            this.$message.error(error.message || '登录失败，打开控制台检查');\n          } finally {\n            // 无论成功或失败都会执行\n            this.isLoading = false; // 结束加载状态\n            location.reload(); // 强制刷新页面\n          }\n        } else {\n          this.$message.error('请正确填写表单');\n        }\n      });\n    },\n    closeDialog() {\n      this.$emit('close'); // 触发关闭事件\n      this.resetForm(); // 重置表单\n    },\n    resetForm() {\n      this.loginForm.identifier = '';\n      this.loginForm.password = '';\n      this.loginForm.rememberMe = false;\n    },\n    navigateTo(route) {\n      if (this.$route.name !== route) {\n        this.$router.push({ name: route });\n      }\n    },\n    handleRegister() {\n      this.closeDialog(); // 关闭对话框\n      this.navigateTo('Register'); // 跳转到注册页面\n    },\n    handleAdminLogin() {\n      this.closeDialog(); // 关闭对话框\n      this.navigateTo('AdminLogin'); // 跳转到管理员登录页面\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@use '@/assets/styles/mixins.scss' as *;\n@use '@/assets/styles/variables.scss' as *;\n.login-button {\n  margin-right: 10px;\n  color: $text-color; /* 文字颜色 */\n  background-color: $primary-color; /* 主色调背景 */\n  border-color: $text-color; /* 边框颜色 */\n  &:hover {\n    color: $text-color; /* 文字颜色 */\n    background-color: $hover-text-color; /* 主色调背景 */\n    border-color: $text-color; /* 边框颜色 */\n  }\n}\n.form-footer {\n  display: flex;\n  justify-content: space-between; /* 在左右两边对齐 */\n  align-items: center; /* 垂直居中对齐 */\n}\n\n.register-prompt {\n  display: flex;\n  align-items: center; /* 垂直居中对齐 */\n}\n</style>\n"],"mappings":";AAsDA,SAAAA,UAAA,EAAAC,UAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,SAAA;QACAC,UAAA;QACAC,QAAA;QACAC,UAAA;MACA;MACAC,UAAA;QACAH,UAAA,GACA;UAAAI,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,GACA;UAAAC,GAAA;UAAAF,OAAA;UAAAC,OAAA;QAAA,GACA;UACAE,SAAA,EAAAA,CAAAC,IAAA,EAAAC,KAAA,EAAAC,QAAA;YACA,KAAAD,KAAA;cACAC,QAAA;cACA;YACA;;YAEA;YACA,MAAAC,OAAA,gCAAAC,IAAA,CAAAH,KAAA;YACA,MAAAI,OAAA,mBAAAD,IAAA,CAAAH,KAAA;YACA,MAAAK,UAAA,uCAAAF,IAAA,CACAH,KACA;YAEA,KAAAE,OAAA,KAAAE,OAAA,KAAAC,UAAA;cACAJ,QAAA,KAAAK,KAAA;YACA;cACAL,QAAA;YACA;UACA;UACAL,OAAA;QACA,EACA;QACAL,QAAA,GACA;UAAAG,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA;MAEA;MACAW,SAAA;IACA;EACA;EACAC,QAAA;IACA,GAAAtB,UAAA;EACA;EACAuB,OAAA;IACA,GAAAxB,UAAA;IAAA;IACA,MAAAyB,SAAA;MACA,KAAAC,KAAA,CAAAtB,SAAA,CAAAuB,QAAA,OAAAC,KAAA;QACA,IAAAA,KAAA;UACA,KAAAN,SAAA;UACA;YACA;YACA,MAAAO,MAAA,cAAAC,KAAA;cACAC,UAAA,OAAA3B,SAAA,CAAAC,UAAA;cAAA;cACA2B,QAAA,OAAA5B,SAAA,CAAAE,QAAA;YACA;YACA2B,OAAA,CAAAC,GAAA,kCAAAC,UAAA;YACA,IAAAN,MAAA,CAAAO,OAAA;cACA,KAAAC,QAAA,CAAAD,OAAA,CAAAP,MAAA,CAAAnB,OAAA;cACA,KAAA4B,WAAA;YACA;cACA,KAAAD,QAAA,CAAAE,KAAA,CACAV,MAAA,CAAAnB,OAAA,oBACA;YACA;UACA,SAAA6B,KAAA;YACAN,OAAA,CAAAM,KAAA,CAAAA,KAAA;YACA,KAAAF,QAAA,CAAAE,KAAA,CAAAA,KAAA,CAAA7B,OAAA;UACA;YACA;YACA,KAAAY,SAAA;YACAkB,QAAA,CAAAC,MAAA;UACA;QACA;UACA,KAAAJ,QAAA,CAAAE,KAAA;QACA;MACA;IACA;IACAD,YAAA;MACA,KAAAI,KAAA;MACA,KAAAC,SAAA;IACA;IACAA,UAAA;MACA,KAAAvC,SAAA,CAAAC,UAAA;MACA,KAAAD,SAAA,CAAAE,QAAA;MACA,KAAAF,SAAA,CAAAG,UAAA;IACA;IACAqC,WAAAC,KAAA;MACA,SAAAC,MAAA,CAAA5C,IAAA,KAAA2C,KAAA;QACA,KAAAE,OAAA,CAAAC,IAAA;UAAA9C,IAAA,EAAA2C;QAAA;MACA;IACA;IACAI,eAAA;MACA,KAAAX,WAAA;MACA,KAAAM,UAAA;IACA;IACAM,iBAAA;MACA,KAAAZ,WAAA;MACA,KAAAM,UAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}