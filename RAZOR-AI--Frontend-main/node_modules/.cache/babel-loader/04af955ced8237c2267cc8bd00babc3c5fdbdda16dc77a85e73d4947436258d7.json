{"ast":null,"code":"// src/main.js\nimport Vue from 'vue';\nimport App from './App.vue';\nimport router from './router';\nimport store from './store';\nimport ElementUI from 'element-ui';\nimport 'element-ui/lib/theme-chalk/index.css';\n\n// 引入全局样式\n/*\nimport '@/assets/styles/variables.scss';\nimport '@/assets/styles/mixins.scss';\nimport '@/assets/styles/forms.scss';\nimport '@/assets/styles/utilities.scss';\nimport '@/assets/styles/buttons.scss';\nimport '@/assets/styles/layout.scss';\n*/\nimport '@/assets/styles/global.scss';\nVue.config.productionTip = false;\nVue.use(ElementUI);\n\n// 初始化应用程序\nasync function initApp() {\n  try {\n    // 检查 Vuex 中 haveSubscribed 的状态并初始化\n    if (!store.state.agent.haveSubscribed || store.state.agent.haveSubscribed.length === 0) {\n      const userId = store.state.user.userId;\n      if (userId) {\n        await store.dispatch('agent/fetchUserSubscriptions', userId);\n        console.log('初始化用户订阅机器人信息成功');\n      } else {\n        console.warn('用户 ID 不存在，无法初始化');\n      }\n    }\n    if (store.state.agent.textAgents.length === 0 || store.state.agent.imageAgents.length === 0 || store.state.agent.videoAgents.length === 0) {\n      await store.dispatch('agent/fetchAllAgentsData');\n      console.log('初始化所有AI 机器人信息成功');\n    }\n    if (store.state.chat.chats.length === 0 || store.state.user.userId) {\n      const userId = store.state.user.userId;\n      if (userId) {\n        // 把userId转化为json格式\n        const jsonUserId = {\n          user_id: userId\n        };\n        await store.dispatch('chat/fetchChats', jsonUserId);\n        console.log('初始化所有chat信息成功', store.state.chat.chats);\n      } else {\n        console.warn('用户 ID 不存在，无法初始化');\n      }\n    }\n  } catch (error) {\n    console.error('初始化应用程序失败:', error);\n  }\n}\n// 等待初始化完成后挂载 Vue 实例\ninitApp().then(() => {\n  new Vue({\n    router,\n    store,\n    render: h => h(App)\n  }).$mount('#app');\n}).catch(error => {\n  console.error('应用初始化失败，无法启动:', error);\n});","map":{"version":3,"names":["Vue","App","router","store","ElementUI","config","productionTip","use","initApp","state","agent","haveSubscribed","length","userId","user","dispatch","console","log","warn","textAgents","imageAgents","videoAgents","chat","chats","jsonUserId","user_id","error","then","render","h","$mount","catch"],"sources":["C:/Users/HP/Desktop/数据库课设/RAZOR-AI--Frontend-main/src/main.js"],"sourcesContent":["// src/main.js\nimport Vue from 'vue';\nimport App from './App.vue';\nimport router from './router';\nimport store from './store';\nimport ElementUI from 'element-ui';\nimport 'element-ui/lib/theme-chalk/index.css';\n\n// 引入全局样式\n/*\nimport '@/assets/styles/variables.scss';\nimport '@/assets/styles/mixins.scss';\nimport '@/assets/styles/forms.scss';\nimport '@/assets/styles/utilities.scss';\nimport '@/assets/styles/buttons.scss';\nimport '@/assets/styles/layout.scss';\n*/\nimport '@/assets/styles/global.scss';\nVue.config.productionTip = false;\nVue.use(ElementUI);\n\n// 初始化应用程序\nasync function initApp() {\n  try {\n    // 检查 Vuex 中 haveSubscribed 的状态并初始化\n    if (\n      !store.state.agent.haveSubscribed ||\n      store.state.agent.haveSubscribed.length === 0\n    ) {\n      const userId = store.state.user.userId;\n      if (userId) {\n        await store.dispatch('agent/fetchUserSubscriptions', userId);\n        console.log('初始化用户订阅机器人信息成功');\n      } else {\n        console.warn('用户 ID 不存在，无法初始化');\n      }\n    }\n    if (\n      store.state.agent.textAgents.length === 0 ||\n      store.state.agent.imageAgents.length === 0 ||\n      store.state.agent.videoAgents.length === 0\n    ) {\n      await store.dispatch('agent/fetchAllAgentsData');\n      console.log('初始化所有AI 机器人信息成功');\n    }\n    if (store.state.chat.chats.length === 0 || store.state.user.userId) {\n      const userId = store.state.user.userId;\n      if (userId) {\n        // 把userId转化为json格式\n        const jsonUserId = {\n          user_id: userId,\n        };\n        await store.dispatch('chat/fetchChats', jsonUserId);\n        console.log('初始化所有chat信息成功', store.state.chat.chats);\n      } else {\n        console.warn('用户 ID 不存在，无法初始化');\n      }\n    }\n  } catch (error) {\n    console.error('初始化应用程序失败:', error);\n  }\n}\n// 等待初始化完成后挂载 Vue 实例\ninitApp()\n  .then(() => {\n    new Vue({\n      router,\n      store,\n      render: (h) => h(App),\n    }).$mount('#app');\n  })\n  .catch((error) => {\n    console.error('应用初始化失败，无法启动:', error);\n  });\n"],"mappings":"AAAA;AACA,OAAOA,GAAG,MAAM,KAAK;AACrB,OAAOC,GAAG,MAAM,WAAW;AAC3B,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAO,sCAAsC;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,6BAA6B;AACpCJ,GAAG,CAACK,MAAM,CAACC,aAAa,GAAG,KAAK;AAChCN,GAAG,CAACO,GAAG,CAACH,SAAS,CAAC;;AAElB;AACA,eAAeI,OAAOA,CAAA,EAAG;EACvB,IAAI;IACF;IACA,IACE,CAACL,KAAK,CAACM,KAAK,CAACC,KAAK,CAACC,cAAc,IACjCR,KAAK,CAACM,KAAK,CAACC,KAAK,CAACC,cAAc,CAACC,MAAM,KAAK,CAAC,EAC7C;MACA,MAAMC,MAAM,GAAGV,KAAK,CAACM,KAAK,CAACK,IAAI,CAACD,MAAM;MACtC,IAAIA,MAAM,EAAE;QACV,MAAMV,KAAK,CAACY,QAAQ,CAAC,8BAA8B,EAAEF,MAAM,CAAC;QAC5DG,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;MAC/B,CAAC,MAAM;QACLD,OAAO,CAACE,IAAI,CAAC,iBAAiB,CAAC;MACjC;IACF;IACA,IACEf,KAAK,CAACM,KAAK,CAACC,KAAK,CAACS,UAAU,CAACP,MAAM,KAAK,CAAC,IACzCT,KAAK,CAACM,KAAK,CAACC,KAAK,CAACU,WAAW,CAACR,MAAM,KAAK,CAAC,IAC1CT,KAAK,CAACM,KAAK,CAACC,KAAK,CAACW,WAAW,CAACT,MAAM,KAAK,CAAC,EAC1C;MACA,MAAMT,KAAK,CAACY,QAAQ,CAAC,0BAA0B,CAAC;MAChDC,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;IAChC;IACA,IAAId,KAAK,CAACM,KAAK,CAACa,IAAI,CAACC,KAAK,CAACX,MAAM,KAAK,CAAC,IAAIT,KAAK,CAACM,KAAK,CAACK,IAAI,CAACD,MAAM,EAAE;MAClE,MAAMA,MAAM,GAAGV,KAAK,CAACM,KAAK,CAACK,IAAI,CAACD,MAAM;MACtC,IAAIA,MAAM,EAAE;QACV;QACA,MAAMW,UAAU,GAAG;UACjBC,OAAO,EAAEZ;QACX,CAAC;QACD,MAAMV,KAAK,CAACY,QAAQ,CAAC,iBAAiB,EAAES,UAAU,CAAC;QACnDR,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEd,KAAK,CAACM,KAAK,CAACa,IAAI,CAACC,KAAK,CAAC;MACtD,CAAC,MAAM;QACLP,OAAO,CAACE,IAAI,CAAC,iBAAiB,CAAC;MACjC;IACF;EACF,CAAC,CAAC,OAAOQ,KAAK,EAAE;IACdV,OAAO,CAACU,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;EACpC;AACF;AACA;AACAlB,OAAO,CAAC,CAAC,CACNmB,IAAI,CAAC,MAAM;EACV,IAAI3B,GAAG,CAAC;IACNE,MAAM;IACNC,KAAK;IACLyB,MAAM,EAAGC,CAAC,IAAKA,CAAC,CAAC5B,GAAG;EACtB,CAAC,CAAC,CAAC6B,MAAM,CAAC,MAAM,CAAC;AACnB,CAAC,CAAC,CACDC,KAAK,CAAEL,KAAK,IAAK;EAChBV,OAAO,CAACU,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;AACvC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}