{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: 'AdminRegisterPage',\n  data() {\n    return {\n      registerForm: {\n        adminName: '',\n        email: '',\n        password: '',\n        confirmPassword: '',\n        phone: ''\n      },\n      registerRules: {\n        adminName: [{\n          required: true,\n          message: '请输入管理员名称',\n          trigger: 'blur'\n        }],\n        email: [{\n          required: true,\n          message: '请输入邮箱',\n          trigger: 'blur'\n        }, {\n          type: 'email',\n          message: '请输入正确的邮箱地址',\n          trigger: ['blur', 'change']\n        }],\n        password: [{\n          required: true,\n          message: '请输入密码',\n          trigger: 'blur'\n        }],\n        confirmPassword: [{\n          required: true,\n          message: '请再次输入密码',\n          trigger: 'blur'\n        }, {\n          validator: (rule, value, callback) => {\n            if (value !== this.registerForm.password) {\n              callback(new Error('两次输入密码不一致!'));\n            } else {\n              callback();\n            }\n          },\n          trigger: ['blur', 'change']\n        }]\n      },\n      isLoading: false\n    };\n  },\n  methods: {\n    handleOutsideClick() {\n      // 空方法处理点击外部事件\n    },\n    goToLogin() {\n      this.$router.push('/admin/login');\n    },\n    async onSubmit() {\n      this.$refs.registerForm.validate(async valid => {\n        if (valid) {\n          this.isLoading = true;\n          try {\n            const payload = {\n              AdminName: this.registerForm.adminName,\n              Email: this.registerForm.email,\n              Password: this.registerForm.password\n            };\n            if (this.registerForm.phone) {\n              payload.Phone = this.registerForm.phone;\n            }\n            const response = await this.$axios.post('http://localhost:5253/api/admin/register', payload);\n            if (response.data.success) {\n              this.$message.success(response.data.message || '注册成功');\n              this.registerForm = {\n                adminName: '',\n                email: '',\n                password: '',\n                confirmPassword: '',\n                phone: ''\n              };\n            } else {\n              this.$message.error(response.data.message || '注册失败');\n            }\n          } catch (error) {\n            console.error(error);\n            console.error(error.response?.data);\n            this.$message.error(error.message || '注册失败，请检查控制台');\n          } finally {\n            this.isLoading = false;\n          }\n        } else {\n          this.$message.error('请正确填写表单');\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["name","data","registerForm","adminName","email","password","confirmPassword","phone","registerRules","required","message","trigger","type","validator","rule","value","callback","Error","isLoading","methods","handleOutsideClick","goToLogin","$router","push","onSubmit","$refs","validate","valid","payload","AdminName","Email","Password","Phone","response","$axios","post","success","$message","error","console"],"sources":["src/views/AdminRegisterPage.vue"],"sourcesContent":["<template>\n  <div class=\"admin-login\" @click.self=\"handleOutsideClick\">\n    <div class=\"login-container\">\n      <el-form\n        :model=\"registerForm\"\n        :rules=\"registerRules\"\n        ref=\"registerForm\"\n        @keyup.enter.native=\"onSubmit\"\n        v-loading=\"isLoading\"\n      >\n        <el-form-item label=\"管理员名称\" prop=\"adminName\">\n          <el-input\n            v-model=\"registerForm.adminName\"\n            placeholder=\"管理员名称\"\n            prefix-icon=\"el-icon-user\"\n          ></el-input>\n        </el-form-item>\n        <el-form-item label=\"邮箱\" prop=\"email\">\n          <el-input\n            v-model=\"registerForm.email\"\n            placeholder=\"邮箱\"\n            prefix-icon=\"el-icon-message\"\n          ></el-input>\n        </el-form-item>\n        <el-form-item label=\"电话号码（可选）\" prop=\"phone\">\n          <el-input\n            v-model=\"registerForm.phone\"\n            placeholder=\"可不填\"\n            prefix-icon=\"el-icon-phone\"\n          ></el-input>\n        </el-form-item>\n        <el-form-item label=\"密码\" prop=\"password\">\n          <el-input\n            v-model=\"registerForm.password\"\n            type=\"password\"\n            placeholder=\"密码\"\n            prefix-icon=\"el-icon-lock\"\n          ></el-input>\n        </el-form-item>\n        <el-form-item label=\"确认密码\" prop=\"confirmPassword\">\n          <el-input\n            v-model=\"registerForm.confirmPassword\"\n            type=\"password\"\n            placeholder=\"确认密码\"\n            prefix-icon=\"el-icon-lock\"\n          ></el-input>\n        </el-form-item>\n        <el-form-item>\n          <el-button\n            type=\"primary\"\n            @click=\"onSubmit\"\n            class=\"login-button\"\n            :loading=\"isLoading\"\n            >注册</el-button\n          >\n          <el-button type=\"text\" @click=\"goToLogin\" class=\"login-link-button\"\n            >登录</el-button\n          >\n        </el-form-item>\n      </el-form>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'AdminRegisterPage',\n  data() {\n    return {\n      registerForm: {\n        adminName: '',\n        email: '',\n        password: '',\n        confirmPassword: '',\n        phone: '',\n      },\n      registerRules: {\n        adminName: [\n          { required: true, message: '请输入管理员名称', trigger: 'blur' },\n        ],\n        email: [\n          { required: true, message: '请输入邮箱', trigger: 'blur' },\n          {\n            type: 'email',\n            message: '请输入正确的邮箱地址',\n            trigger: ['blur', 'change'],\n          },\n        ],\n        password: [{ required: true, message: '请输入密码', trigger: 'blur' }],\n        confirmPassword: [\n          { required: true, message: '请再次输入密码', trigger: 'blur' },\n          {\n            validator: (rule, value, callback) => {\n              if (value !== this.registerForm.password) {\n                callback(new Error('两次输入密码不一致!'));\n              } else {\n                callback();\n              }\n            },\n            trigger: ['blur', 'change'],\n          },\n        ],\n      },\n      isLoading: false,\n    };\n  },\n  methods: {\n    handleOutsideClick() {\n      // 空方法处理点击外部事件\n    },\n    goToLogin() {\n      this.$router.push('/admin/login');\n    },\n    async onSubmit() {\n      this.$refs.registerForm.validate(async (valid) => {\n        if (valid) {\n          this.isLoading = true;\n          try {\n            const payload = {\n              AdminName: this.registerForm.adminName,\n              Email: this.registerForm.email,\n              Password: this.registerForm.password,\n            };\n            if (this.registerForm.phone) {\n              payload.Phone = this.registerForm.phone;\n            }\n            const response = await this.$axios.post(\n              'http://localhost:5253/api/admin/register',\n              payload\n            );\n            if (response.data.success) {\n              this.$message.success(response.data.message || '注册成功');\n              this.registerForm = {\n                adminName: '',\n                email: '',\n                password: '',\n                confirmPassword: '',\n                phone: '',\n              };\n            } else {\n              this.$message.error(response.data.message || '注册失败');\n            }\n          } catch (error) {\n            console.error(error);\n            console.error(error.response?.data);\n            this.$message.error(error.message || '注册失败，请检查控制台');\n          } finally {\n            this.isLoading = false;\n          }\n        } else {\n          this.$message.error('请正确填写表单');\n        }\n      });\n    },\n  },\n};\n</script>\n\n<style scoped>\n.admin-login {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 2000;\n}\n\n.login-container {\n  background: #fff;\n  padding: 30px;\n  border-radius: 5px;\n  width: 400px;\n}\n\n.login-button {\n  width: 100%;\n  margin-top: 20px;\n}\n</style>\n"],"mappings":";AAiEA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,YAAA;QACAC,SAAA;QACAC,KAAA;QACAC,QAAA;QACAC,eAAA;QACAC,KAAA;MACA;MACAC,aAAA;QACAL,SAAA,GACA;UAAAM,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,EACA;QACAP,KAAA,GACA;UAAAK,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,GACA;UACAC,IAAA;UACAF,OAAA;UACAC,OAAA;QACA,EACA;QACAN,QAAA;UAAAI,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA;QACAL,eAAA,GACA;UAAAG,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,GACA;UACAE,SAAA,EAAAA,CAAAC,IAAA,EAAAC,KAAA,EAAAC,QAAA;YACA,IAAAD,KAAA,UAAAb,YAAA,CAAAG,QAAA;cACAW,QAAA,KAAAC,KAAA;YACA;cACAD,QAAA;YACA;UACA;UACAL,OAAA;QACA;MAEA;MACAO,SAAA;IACA;EACA;EACAC,OAAA;IACAC,mBAAA;MACA;IAAA,CACA;IACAC,UAAA;MACA,KAAAC,OAAA,CAAAC,IAAA;IACA;IACA,MAAAC,SAAA;MACA,KAAAC,KAAA,CAAAvB,YAAA,CAAAwB,QAAA,OAAAC,KAAA;QACA,IAAAA,KAAA;UACA,KAAAT,SAAA;UACA;YACA,MAAAU,OAAA;cACAC,SAAA,OAAA3B,YAAA,CAAAC,SAAA;cACA2B,KAAA,OAAA5B,YAAA,CAAAE,KAAA;cACA2B,QAAA,OAAA7B,YAAA,CAAAG;YACA;YACA,SAAAH,YAAA,CAAAK,KAAA;cACAqB,OAAA,CAAAI,KAAA,QAAA9B,YAAA,CAAAK,KAAA;YACA;YACA,MAAA0B,QAAA,cAAAC,MAAA,CAAAC,IAAA,CACA,4CACAP,OACA;YACA,IAAAK,QAAA,CAAAhC,IAAA,CAAAmC,OAAA;cACA,KAAAC,QAAA,CAAAD,OAAA,CAAAH,QAAA,CAAAhC,IAAA,CAAAS,OAAA;cACA,KAAAR,YAAA;gBACAC,SAAA;gBACAC,KAAA;gBACAC,QAAA;gBACAC,eAAA;gBACAC,KAAA;cACA;YACA;cACA,KAAA8B,QAAA,CAAAC,KAAA,CAAAL,QAAA,CAAAhC,IAAA,CAAAS,OAAA;YACA;UACA,SAAA4B,KAAA;YACAC,OAAA,CAAAD,KAAA,CAAAA,KAAA;YACAC,OAAA,CAAAD,KAAA,CAAAA,KAAA,CAAAL,QAAA,EAAAhC,IAAA;YACA,KAAAoC,QAAA,CAAAC,KAAA,CAAAA,KAAA,CAAA5B,OAAA;UACA;YACA,KAAAQ,SAAA;UACA;QACA;UACA,KAAAmB,QAAA,CAAAC,KAAA;QACA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}