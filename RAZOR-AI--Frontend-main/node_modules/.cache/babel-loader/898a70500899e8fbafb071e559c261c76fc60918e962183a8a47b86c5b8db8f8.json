{"ast":null,"code":"/*\nAI 机器人管理 (store/agent.js)\n    功能: 管理 AI 机器人的信息。\n    接口:\n        获取所有 AI 机器人信息 (/market)\n        获取某个机器人的详细信息 (/market/agentdetail/<int:agent_id>)\n        创建 AI 机器人 (/agent/user/creation)\n*/\nimport { fetchAllAgentsData as apifetchAllAgentsData } from '../utils/api'; // 引入 API 请求\nimport { fetchAgentDetail as apifetchAgentDetail } from '../utils/api'; // 引入 API 请求\nimport { fetchUserSubscriptions as apifetchUserSubscriptions } from '../utils/api';\nconst state = {\n  textAgents: [],\n  imageAgents: [],\n  videoAgents: [],\n  selectedAgent: null,\n  haveSubscribed: []\n};\nconst getters = {\n  allAgents: state => {\n    return state.textAgents.concat(state.imageAgents, state.videoAgents);\n  },\n  textAgents: state => {\n    return state.textAgents;\n  },\n  imageAgents: state => {\n    return state.imageAgents;\n  },\n  videoAgents: state => {\n    return state.videoAgents;\n  },\n  selectedAgent: state => {\n    return state.selectedAgent;\n  },\n  haveSubscribed: state => {\n    return state.haveSubscribed;\n  }\n};\nconst mutations = {\n  SET_TEXT_AGENTS(state, agents) {\n    state.textAgents = agents;\n  },\n  SET_IMAGE_AGENTS(state, agents) {\n    state.imageAgents = agents;\n  },\n  SET_VIDEO_AGENTS(state, agents) {\n    state.videoAgents = agents;\n  },\n  SET_SELECTED_AGENT(state, agent) {\n    state.selectedAgent = agent;\n  },\n  SET_HAVE_SUBSCRIBED(state, agents) {\n    state.haveSubscribed = agents;\n  }\n};\nconst actions = {\n  // 获取所有 AI 机器人信息\n  async fetchAllAgentsData({\n    commit\n  }) {\n    try {\n      const response = await apifetchAllAgentsData(); // 调用 API 请求\n      if (response.status === 200) {\n        const agents = response.data;\n        // 根据类型分类\n        const textAgents = agents.filter(agent => agent.type === 1);\n        const imageAgents = agents.filter(agent => agent.type === 2);\n        const videoAgents = agents.filter(agent => agent.type === 3);\n\n        // 更新状态\n        commit('SET_TEXT_AGENTS', textAgents);\n        commit('SET_IMAGE_AGENTS', imageAgents);\n        commit('SET_VIDEO_AGENTS', videoAgents);\n        return {\n          success: true,\n          message: '获取 AI 机器人信息成功'\n        };\n      } else {\n        throw new Error(`API 响应异常，状态码: ${response.status}`);\n      }\n    } catch (error) {\n      console.error('Error occurred in fetchAllAgentsData:', error);\n      return {\n        success: false,\n        message: error.message\n      };\n    }\n  },\n  // 获取某个机器人的详细信息\n  async fetchAgentDetail({\n    commit\n  }, agentId) {\n    try {\n      const response = await apifetchAgentDetail(agentId); // 调用 API 请求\n      if (response.status === 200) {\n        const agent = response.data;\n        console.log('agent:', agent);\n        commit('SET_SELECTED_AGENT', agent); // 更新状态\n        return {\n          success: true,\n          message: '获取 AI 机器人信息成功'\n        };\n      } else {\n        throw new Error(`API 响应异常，状态码: ${response.status}`);\n      }\n    } catch (error) {\n      console.error('Error occurred in fetchAgentDetail:', error);\n      return {\n        success: false,\n        message: error.message\n      };\n    }\n  },\n  // 获取用户订阅的机器人\n  async fetchUserSubscriptions({\n    commit\n  }, userId) {\n    try {\n      const response = await apifetchUserSubscriptions(userId); // 调用 API 请求\n      if (response.status === 200) {\n        const agents = response.data;\n        commit('SET_HAVE_SUBSCRIBED', agents); // 更新状态\n        return {\n          success: true,\n          message: '获取用户订阅 AI 机器人成功'\n        };\n      } else {\n        throw new Error(`API 响应异常，状态码: ${response.status}`);\n      }\n    } catch (error) {\n      console.error('Error occurred in fetchUserSubscriptions:', error);\n      return {\n        success: false,\n        message: error.message\n      };\n    }\n  }\n};\nexport default {\n  namespaced: true,\n  state,\n  mutations,\n  actions,\n  getters\n};","map":{"version":3,"names":["fetchAllAgentsData","apifetchAllAgentsData","fetchAgentDetail","apifetchAgentDetail","fetchUserSubscriptions","apifetchUserSubscriptions","state","textAgents","imageAgents","videoAgents","selectedAgent","haveSubscribed","getters","allAgents","concat","mutations","SET_TEXT_AGENTS","agents","SET_IMAGE_AGENTS","SET_VIDEO_AGENTS","SET_SELECTED_AGENT","agent","SET_HAVE_SUBSCRIBED","actions","commit","response","status","data","filter","type","success","message","Error","error","console","agentId","log","userId","namespaced"],"sources":["C:/Users/HP/Desktop/数据库课设/RAZOR-AI--Frontend-main/src/store/agent.js"],"sourcesContent":["/*\nAI 机器人管理 (store/agent.js)\n    功能: 管理 AI 机器人的信息。\n    接口:\n        获取所有 AI 机器人信息 (/market)\n        获取某个机器人的详细信息 (/market/agentdetail/<int:agent_id>)\n        创建 AI 机器人 (/agent/user/creation)\n*/\nimport { fetchAllAgentsData as apifetchAllAgentsData } from '../utils/api'; // 引入 API 请求\nimport { fetchAgentDetail as apifetchAgentDetail } from '../utils/api'; // 引入 API 请求\nimport { fetchUserSubscriptions as apifetchUserSubscriptions } from '../utils/api';\nconst state = {\n  textAgents: [],\n  imageAgents: [],\n  videoAgents: [],\n  selectedAgent: null,\n  haveSubscribed: [],\n};\n\nconst getters = {\n  allAgents: (state) => {\n    return state.textAgents.concat(state.imageAgents, state.videoAgents);\n  },\n  textAgents: (state) => {\n    return state.textAgents;\n  },\n  imageAgents: (state) => {\n    return state.imageAgents;\n  },\n  videoAgents: (state) => {\n    return state.videoAgents;\n  },\n  selectedAgent: (state) => {\n    return state.selectedAgent;\n  },\n  haveSubscribed: (state) => {\n    return state.haveSubscribed;\n  },\n};\n\nconst mutations = {\n  SET_TEXT_AGENTS(state, agents) {\n    state.textAgents = agents;\n  },\n  SET_IMAGE_AGENTS(state, agents) {\n    state.imageAgents = agents;\n  },\n  SET_VIDEO_AGENTS(state, agents) {\n    state.videoAgents = agents;\n  },\n  SET_SELECTED_AGENT(state, agent) {\n    state.selectedAgent = agent;\n  },\n  SET_HAVE_SUBSCRIBED(state, agents) {\n    state.haveSubscribed = agents;\n  },\n};\n\nconst actions = {\n  // 获取所有 AI 机器人信息\n  async fetchAllAgentsData({ commit }) {\n    try {\n      const response = await apifetchAllAgentsData(); // 调用 API 请求\n      if (response.status === 200) {\n        const agents = response.data;\n        // 根据类型分类\n        const textAgents = agents.filter((agent) => agent.type === 1);\n        const imageAgents = agents.filter((agent) => agent.type === 2);\n        const videoAgents = agents.filter((agent) => agent.type === 3);\n\n        // 更新状态\n        commit('SET_TEXT_AGENTS', textAgents);\n        commit('SET_IMAGE_AGENTS', imageAgents);\n        commit('SET_VIDEO_AGENTS', videoAgents);\n\n        return { success: true, message: '获取 AI 机器人信息成功' };\n      } else {\n        throw new Error(`API 响应异常，状态码: ${response.status}`);\n      }\n    } catch (error) {\n      console.error('Error occurred in fetchAllAgentsData:', error);\n      return { success: false, message: error.message };\n    }\n  },\n\n  // 获取某个机器人的详细信息\n  async fetchAgentDetail({ commit }, agentId) {\n    try {\n      const response = await apifetchAgentDetail(agentId); // 调用 API 请求\n      if (response.status === 200) {\n        const agent = response.data;\n        console.log('agent:', agent);\n        commit('SET_SELECTED_AGENT', agent); // 更新状态\n        return { success: true, message: '获取 AI 机器人信息成功' };\n      } else {\n        throw new Error(`API 响应异常，状态码: ${response.status}`);\n      }\n    } catch (error) {\n      console.error('Error occurred in fetchAgentDetail:', error);\n      return { success: false, message: error.message };\n    }\n  },\n\n  // 获取用户订阅的机器人\n  async fetchUserSubscriptions({ commit }, userId) {\n    try {\n      const response = await apifetchUserSubscriptions(userId); // 调用 API 请求\n      if (response.status === 200) {\n        const agents = response.data;\n        commit('SET_HAVE_SUBSCRIBED', agents); // 更新状态\n        return { success: true, message: '获取用户订阅 AI 机器人成功' };\n      } else {\n        throw new Error(`API 响应异常，状态码: ${response.status}`);\n      }\n    } catch (error) {\n      console.error('Error occurred in fetchUserSubscriptions:', error);\n      return { success: false, message: error.message };\n    }\n  },\n};\n\nexport default {\n  namespaced: true,\n  state,\n  mutations,\n  actions,\n  getters,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}