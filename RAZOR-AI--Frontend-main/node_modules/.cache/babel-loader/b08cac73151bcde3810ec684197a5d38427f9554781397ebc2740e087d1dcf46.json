{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport { mapState } from 'vuex';\nimport { fetchAgentDetail as apifetchAgentDetail } from '../utils/api';\nimport { subscribeAgent as apisubscribeAgent } from '../utils/api';\nimport SubscriptionSelector from '@/components/SubscriptionSelector.vue';\nexport default {\n  name: 'RobotDetailPage',\n  components: {\n    SubscriptionSelector\n  },\n  data() {\n    return {\n      robot: {},\n      robotType: {\n        1: '文本对话机器人',\n        2: '图片生成机器人',\n        3: '音视频机器人'\n      },\n      loading: true,\n      isSubscriptionDialogVisible: false,\n      recommendationDialogVisible: false,\n      showAddCommentForm: false,\n      currentRating: 5,\n      newComment: {\n        text: '',\n        rating: 5\n      },\n      // *&* 模拟数据 - 机器人统计信息\n      robotStats: {\n        rating: 4.7,\n        subscriptions: 1234,\n        comments: 89\n      },\n      // *&* 模拟数据 - 评论列表\n      comments: [{\n        id: 1,\n        userName: '用户A',\n        userId: 'user1',\n        rating: 5,\n        text: '这个机器人非常好用，回答问题很准确，强烈推荐！',\n        likes: 15,\n        dislikes: 2,\n        userLiked: false,\n        userDisliked: false,\n        timestamp: '2024-01-15 14:30'\n      }, {\n        id: 2,\n        userName: '用户B',\n        userId: 'user2',\n        rating: 4,\n        text: '功能很强大，但有时候响应速度有点慢，总体还是不错的。',\n        likes: 8,\n        dislikes: 1,\n        userLiked: false,\n        userDisliked: false,\n        timestamp: '2024-01-14 09:15'\n      }, {\n        id: 3,\n        userName: '用户C',\n        userId: 'user3',\n        rating: 5,\n        text: '界面友好，操作简单，是我用过最好的AI助手之一。',\n        likes: 12,\n        dislikes: 0,\n        userLiked: false,\n        userDisliked: false,\n        timestamp: '2024-01-13 16:45'\n      }],\n      // *&* 模拟数据 - 推荐机器人分类\n      recommendationCategories: [{\n        type: 'similar',\n        title: '相似功能机器人',\n        robots: [{\n          id: 101,\n          name: 'ChatBot Pro',\n          type: 1,\n          description: '专业的对话机器人，支持多种语言',\n          rating: 4.8,\n          developer: '开发者A'\n        }, {\n          id: 102,\n          name: 'Smart Assistant',\n          type: 1,\n          description: '智能助手，可以帮您处理日常事务',\n          rating: 4.6,\n          developer: '开发者B'\n        }]\n      }, {\n        type: 'popular',\n        title: '热门推荐',\n        robots: [{\n          id: 201,\n          name: 'Image Creator',\n          type: 2,\n          description: '强大的图像生成工具',\n          rating: 4.9,\n          developer: '开发者C'\n        }, {\n          id: 202,\n          name: 'Video AI',\n          type: 3,\n          description: '视频处理和生成专家',\n          rating: 4.7,\n          developer: '开发者D'\n        }]\n      }]\n    };\n  },\n  computed: {\n    ...mapState('user', ['isLoggedIn', 'userName', 'userId']),\n    subscriptionButtonText() {\n      const subscribedRobot = this.$store.state.agent.haveSubscribed.find(r => r.agent_id === this.robot.id);\n      return subscribedRobot && subscribedRobot.status ? '已订阅，查看对话历史' : '未订阅，点击订阅';\n    }\n  },\n  created() {\n    const agentId = this.$route.params.id;\n    if (!agentId) {\n      this.$message.error('无法获取机器人信息');\n      this.$router.push('/');\n    } else {\n      this.fetchRobotDetail(agentId);\n    }\n  },\n  methods: {\n    getRobotImage(type) {\n      switch (type) {\n        case 1:\n          return require('@/assets/images/Agents/textAgent.png');\n        case 2:\n          return require('@/assets/images/Agents/imageAgent.png');\n        case 3:\n          return require('@/assets/images/Agents/videoAgent.png');\n        default:\n          return require('@/assets/images/Agents/baseAgent.png');\n      }\n    },\n    truncate(text, length = 50) {\n      if (!text) return '';\n      return text.length > length ? text.slice(0, length) + '...' : text;\n    },\n    // *&* 评论相关方法 - 后端接口待实现\n    setRating(rating) {\n      this.currentRating = rating;\n      this.newComment.rating = rating;\n    },\n    async submitComment() {\n      if (!this.newComment.text.trim()) {\n        this.$message.warning('请输入评论内容');\n        return;\n      }\n\n      // *&* 模拟添加评论 - 实际需要调用后端API\n      const newComment = {\n        id: Date.now(),\n        userName: this.userName || '当前用户',\n        userId: this.userId,\n        rating: this.currentRating,\n        text: this.newComment.text,\n        likes: 0,\n        dislikes: 0,\n        userLiked: false,\n        userDisliked: false,\n        timestamp: new Date().toLocaleString()\n      };\n      this.comments.unshift(newComment);\n      this.robotStats.comments = this.comments.length;\n\n      // 重置表单\n      this.newComment.text = '';\n      this.currentRating = 5;\n      this.showAddCommentForm = false;\n      this.$message.success('评论添加成功！');\n    },\n    likeComment(index) {\n      // *&* 模拟点赞功能 - 实际需要调用后端API\n      const comment = this.comments[index];\n      if (comment.userLiked) {\n        comment.likes--;\n        comment.userLiked = false;\n      } else {\n        if (comment.userDisliked) {\n          comment.dislikes--;\n          comment.userDisliked = false;\n        }\n        comment.likes++;\n        comment.userLiked = true;\n      }\n    },\n    dislikeComment(index) {\n      // *&* 模拟踩功能 - 实际需要调用后端API\n      const comment = this.comments[index];\n      if (comment.userDisliked) {\n        comment.dislikes--;\n        comment.userDisliked = false;\n      } else {\n        if (comment.userLiked) {\n          comment.likes--;\n          comment.userLiked = false;\n        }\n        comment.dislikes++;\n        comment.userDisliked = true;\n      }\n    },\n    handleCommentAction(command) {\n      if (command.startsWith('delete-')) {\n        const index = parseInt(command.split('-')[1]);\n        this.deleteComment(index);\n      }\n    },\n    deleteComment(index) {\n      // *&* 模拟删除评论 - 实际需要调用后端API\n      this.$confirm('确定要删除这条评论吗？', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        this.comments.splice(index, 1);\n        this.robotStats.comments = this.comments.length;\n        this.$message.success('评论删除成功！');\n      }).catch(() => {\n        // 用户取消删除\n      });\n    },\n    showRecommendations() {\n      this.recommendationDialogVisible = true;\n    },\n    goToRobotDetail(robotId) {\n      this.$router.push({\n        name: 'RobotDetail',\n        params: {\n          id: robotId\n        }\n      });\n      this.recommendationDialogVisible = false;\n    },\n    subscribeRecommendedRobot(robotId) {\n      // *&* 模拟订阅推荐机器人 - 实际需要调用后端API\n      console.log('订阅机器人ID:', robotId);\n      this.$message.success(`订阅机器人 ${robotId} 成功！`);\n    },\n    formatDateTime(date) {\n      const year = date.getFullYear();\n      const month = String(date.getMonth() + 1).padStart(2, '0');\n      const day = String(date.getDate()).padStart(2, '0');\n      const hours = String(date.getHours()).padStart(2, '0');\n      const minutes = String(date.getMinutes()).padStart(2, '0');\n      const seconds = String(date.getSeconds()).padStart(2, '0');\n      return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n    },\n    openSubscriptionDialog() {\n      this.isSubscriptionDialogVisible = true; // 打开弹窗\n    },\n    async handleSubscriptionConfirm(duration, points) {\n      console.log('订阅时长:', duration);\n      console.log('所需积分:', points);\n      // 这里可以添加积分检查逻辑\n\n      // 调用订阅方法\n      await this.subscribeRobot(duration);\n    },\n    async fetchRobotDetail(agentId) {\n      try {\n        const response = await apifetchAgentDetail(agentId);\n        this.robot = response.data;\n        this.loading = false; // 加载完成\n      } catch (error) {\n        console.error('获取机器人详情失败:', error);\n        this.$message.error('无法加载机器人详情');\n      }\n    },\n    async subscribeRobot(Duration) {\n      try {\n        const currentTime = this.formatDateTime(new Date()); // 格式化当前时间\n        // 构造 payload\n        const payload = {\n          user_id: this.$store.state.user.userId,\n          agent_id: this.robot.id,\n          startime: currentTime,\n          // 使用格式化后的时间\n          duration: Duration\n        };\n        console.log('请求 payload:', payload);\n        const response = await apisubscribeAgent(payload);\n        if (response.status === 200) {\n          this.$message.success('订阅成功！');\n          // 订阅成功后，重新获取用户订阅列表\n          this.$store.dispatch('agent/fetchUserSubscriptions', this.$store.state.user.userId);\n          console.log('订阅成功!!!:', response);\n          console.log('订阅成功后的用户订阅列表:', this.$store.state.agent.haveSubscribed);\n        } else {\n          this.$message.error('订阅失败，请稍后重试。');\n        }\n      } catch (error) {\n        console.error('订阅失败:', error);\n        this.$message.error('无法订阅机器人，请稍后重试。');\n      }\n    },\n    handleSubscription() {\n      const subscribedRobot = this.$store.state.agent.haveSubscribed.find(r => r.agent_id === this.robot.id);\n      if (subscribedRobot && subscribedRobot.status) {\n        // 已订阅，跳转到查看对话历史页面\n        this.$router.push({\n          name: 'ConversationHistory',\n          params: {\n            id: this.robot.id\n          }\n        });\n      } else {\n        // 未订阅，打开订阅弹窗\n        this.openSubscriptionDialog();\n      }\n    }\n  }\n};","map":{"version":3,"names":["mapState","fetchAgentDetail","apifetchAgentDetail","subscribeAgent","apisubscribeAgent","SubscriptionSelector","name","components","data","robot","robotType","loading","isSubscriptionDialogVisible","recommendationDialogVisible","showAddCommentForm","currentRating","newComment","text","rating","robotStats","subscriptions","comments","id","userName","userId","likes","dislikes","userLiked","userDisliked","timestamp","recommendationCategories","type","title","robots","description","developer","computed","subscriptionButtonText","subscribedRobot","$store","state","agent","haveSubscribed","find","r","agent_id","status","created","agentId","$route","params","$message","error","$router","push","fetchRobotDetail","methods","getRobotImage","require","truncate","length","slice","setRating","submitComment","trim","warning","Date","now","toLocaleString","unshift","success","likeComment","index","comment","dislikeComment","handleCommentAction","command","startsWith","parseInt","split","deleteComment","$confirm","confirmButtonText","cancelButtonText","then","splice","catch","showRecommendations","goToRobotDetail","robotId","subscribeRecommendedRobot","console","log","formatDateTime","date","year","getFullYear","month","String","getMonth","padStart","day","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","openSubscriptionDialog","handleSubscriptionConfirm","duration","points","subscribeRobot","response","Duration","currentTime","payload","user_id","user","startime","dispatch","handleSubscription"],"sources":["src/views/RobotDetailPage.vue"],"sourcesContent":["<template>\n  <div class=\"robot-detail-page\" v-loading=\"loading\">\n    <!-- 机器人信息区域 -->\n    <div class=\"robot-info-section\">\n      <div class=\"robot-info-header\">\n        <img\n          :src=\"getRobotImage(robot.type)\"\n          alt=\"Robot Icon\"\n          class=\"robot-detail-logo\"\n        />\n        <div class=\"robot-info\">\n          <h1 class=\"robot-detail-name\">{{ robot.name || '机器人名称' }}</h1>\n          <p class=\"robot-detail-description\">\n            {{\n              robot.description ||\n              '这是一个功能强大的AI机器人，可以帮助您完成各种任务。'\n            }}\n          </p>\n          <div class=\"robot-stats\">\n            <div class=\"stat-item\">\n              <div class=\"stat-value\">{{ robotStats.rating }}</div>\n              <div class=\"stat-label\">评分</div>\n            </div>\n            <div class=\"stat-item\">\n              <div class=\"stat-value\">{{ robotStats.subscriptions }}</div>\n              <div class=\"stat-label\">订阅数</div>\n            </div>\n            <div class=\"stat-item\">\n              <div class=\"stat-value\">{{ robotStats.comments }}</div>\n              <div class=\"stat-label\">评论数</div>\n            </div>\n          </div>\n          <div class=\"robot-detail-actions\">\n            <el-button\n              type=\"primary\"\n              class=\"action-btn primary\"\n              @click=\"handleSubscription\"\n            >\n              {{ subscriptionButtonText }}\n            </el-button>\n            <el-button\n              class=\"action-btn secondary\"\n              @click=\"showRecommendations\"\n            >\n              推荐相似机器人\n            </el-button>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- 评论区 -->\n    <div class=\"comments-section\">\n      <div class=\"comments-header\">\n        <h3 class=\"comments-title\">用户评论 ({{ comments.length }})</h3>\n        <el-button\n          v-if=\"isLoggedIn\"\n          type=\"primary\"\n          class=\"add-comment-btn\"\n          @click=\"showAddCommentForm = !showAddCommentForm\"\n        >\n          添加评论\n        </el-button>\n      </div>\n\n      <!-- 添加评论表单 -->\n      <div v-if=\"showAddCommentForm && isLoggedIn\" class=\"add-comment-form\">\n        <div class=\"comment-form-group\">\n          <label class=\"comment-form-label\">评分</label>\n          <div class=\"rating-input\">\n            <i\n              v-for=\"star in 5\"\n              :key=\"star\"\n              class=\"el-icon-star-on rating-star\"\n              :class=\"{ active: star <= currentRating }\"\n              @click=\"setRating(star)\"\n              @mouseover=\"setRating(star)\"\n            ></i>\n          </div>\n        </div>\n        <div class=\"comment-form-group\">\n          <label class=\"comment-form-label\">评论内容</label>\n          <el-input\n            v-model=\"newComment.text\"\n            type=\"textarea\"\n            class=\"comment-input\"\n            placeholder=\"请输入您的评论...\"\n            :rows=\"4\"\n          ></el-input>\n        </div>\n        <div class=\"comment-form-actions\">\n          <el-button @click=\"showAddCommentForm = false\">取消</el-button>\n          <el-button type=\"primary\" @click=\"submitComment\">提交评论</el-button>\n        </div>\n      </div>\n\n      <!-- 评论列表 -->\n      <div class=\"comments-list\">\n        <div\n          v-for=\"(comment, index) in comments\"\n          :key=\"comment.id\"\n          class=\"comment-item\"\n        >\n          <div class=\"comment-header\">\n            <div class=\"comment-user\">{{ comment.userName }}</div>\n            <div class=\"comment-rating\">\n              <i\n                v-for=\"star in 5\"\n                :key=\"star\"\n                class=\"el-icon-star-on\"\n                :style=\"{ color: star <= comment.rating ? '#ffc107' : '#ddd' }\"\n              ></i>\n            </div>\n            <div class=\"comment-menu\">\n              <el-dropdown\n                @command=\"handleCommentAction\"\n                trigger=\"click\"\n                v-if=\"comment.userId === userId\"\n              >\n                <span class=\"comment-menu-btn\">\n                  <i class=\"el-icon-more\"></i>\n                </span>\n                <el-dropdown-menu slot=\"dropdown\">\n                  <el-dropdown-item :command=\"`delete-${index}`\">\n                    删除评论\n                  </el-dropdown-item>\n                </el-dropdown-menu>\n              </el-dropdown>\n            </div>\n          </div>\n          <div class=\"comment-text\">{{ comment.text }}</div>\n          <div class=\"comment-actions\">\n            <button\n              class=\"comment-action\"\n              :class=\"{ liked: comment.userLiked }\"\n              @click=\"likeComment(index)\"\n            >\n              <i class=\"el-icon-thumb\"></i> {{ comment.likes || 0 }}\n            </button>\n            <button\n              class=\"comment-action\"\n              :class=\"{ disliked: comment.userDisliked }\"\n              @click=\"dislikeComment(index)\"\n            >\n              <i class=\"el-icon-thumb\"></i> {{ comment.dislikes || 0 }}\n            </button>\n          </div>\n        </div>\n      </div>\n\n      <!-- 无评论提示 -->\n      <div v-if=\"comments.length === 0\" class=\"no-comments\">\n        暂无评论，快来添加第一条评论吧！\n      </div>\n    </div>\n\n    <!-- 推荐机器人弹窗 -->\n    <el-dialog\n      title=\"推荐相似机器人\"\n      :visible.sync=\"recommendationDialogVisible\"\n      width=\"80%\"\n      center\n    >\n      <div class=\"recommendation-content\">\n        <div\n          v-for=\"category in recommendationCategories\"\n          :key=\"category.type\"\n          class=\"recommendation-section\"\n        >\n          <h4 class=\"recommendation-category-title\">{{ category.title }}</h4>\n          <div class=\"recommendation-grid\">\n            <el-card\n              v-for=\"recRobot in category.robots\"\n              :key=\"recRobot.id\"\n              class=\"recommendation-card\"\n              @click.native=\"goToRobotDetail(recRobot.id)\"\n            >\n              <div class=\"recommendation-card-header\">\n                <img\n                  :src=\"getRobotImage(recRobot.type)\"\n                  alt=\"robot\"\n                  class=\"recommendation-card-logo\"\n                />\n                <div class=\"recommendation-card-info\">\n                  <div class=\"recommendation-card-name\">\n                    {{ recRobot.name }}\n                  </div>\n                  <div class=\"recommendation-card-developer\">\n                    开发者: {{ recRobot.developer || '未知' }}\n                  </div>\n                </div>\n              </div>\n              <div class=\"recommendation-card-description\">\n                {{ truncate(recRobot.description, 60) }}\n              </div>\n              <div class=\"recommendation-card-footer\">\n                <div class=\"recommendation-card-stats\">\n                  <div class=\"recommendation-card-rating\">\n                    <i class=\"el-icon-star-on\" style=\"color: #ffc107\"></i>\n                    {{ recRobot.rating || 4.5 }}\n                  </div>\n                </div>\n                <el-button\n                  size=\"mini\"\n                  type=\"primary\"\n                  class=\"recommendation-card-btn\"\n                  @click.stop=\"subscribeRecommendedRobot(recRobot.id)\"\n                >\n                  订阅\n                </el-button>\n              </div>\n            </el-card>\n          </div>\n        </div>\n      </div>\n    </el-dialog>\n    <!-- 订阅确认对话框 -->\n    <el-dialog\n      title=\"订阅确认\"\n      :visible.sync=\"isSubscriptionDialogVisible\"\n      width=\"400px\"\n      center\n    >\n      <subscription-selector\n        :robotId=\"robot.id\"\n        :onConfirm=\"handleSubscriptionConfirm\"\n        :onClose=\"() => (isSubscriptionDialogVisible = false)\"\n      />\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport { fetchAgentDetail as apifetchAgentDetail } from '../utils/api';\nimport { subscribeAgent as apisubscribeAgent } from '../utils/api';\nimport SubscriptionSelector from '@/components/SubscriptionSelector.vue';\n\nexport default {\n  name: 'RobotDetailPage',\n  components: {\n    SubscriptionSelector,\n  },\n  data() {\n    return {\n      robot: {},\n      robotType: {\n        1: '文本对话机器人',\n        2: '图片生成机器人',\n        3: '音视频机器人',\n      },\n      loading: true,\n      isSubscriptionDialogVisible: false,\n      recommendationDialogVisible: false,\n      showAddCommentForm: false,\n      currentRating: 5,\n      newComment: {\n        text: '',\n        rating: 5,\n      },\n      // *&* 模拟数据 - 机器人统计信息\n      robotStats: {\n        rating: 4.7,\n        subscriptions: 1234,\n        comments: 89,\n      },\n      // *&* 模拟数据 - 评论列表\n      comments: [\n        {\n          id: 1,\n          userName: '用户A',\n          userId: 'user1',\n          rating: 5,\n          text: '这个机器人非常好用，回答问题很准确，强烈推荐！',\n          likes: 15,\n          dislikes: 2,\n          userLiked: false,\n          userDisliked: false,\n          timestamp: '2024-01-15 14:30',\n        },\n        {\n          id: 2,\n          userName: '用户B',\n          userId: 'user2',\n          rating: 4,\n          text: '功能很强大，但有时候响应速度有点慢，总体还是不错的。',\n          likes: 8,\n          dislikes: 1,\n          userLiked: false,\n          userDisliked: false,\n          timestamp: '2024-01-14 09:15',\n        },\n        {\n          id: 3,\n          userName: '用户C',\n          userId: 'user3',\n          rating: 5,\n          text: '界面友好，操作简单，是我用过最好的AI助手之一。',\n          likes: 12,\n          dislikes: 0,\n          userLiked: false,\n          userDisliked: false,\n          timestamp: '2024-01-13 16:45',\n        },\n      ],\n      // *&* 模拟数据 - 推荐机器人分类\n      recommendationCategories: [\n        {\n          type: 'similar',\n          title: '相似功能机器人',\n          robots: [\n            {\n              id: 101,\n              name: 'ChatBot Pro',\n              type: 1,\n              description: '专业的对话机器人，支持多种语言',\n              rating: 4.8,\n              developer: '开发者A',\n            },\n            {\n              id: 102,\n              name: 'Smart Assistant',\n              type: 1,\n              description: '智能助手，可以帮您处理日常事务',\n              rating: 4.6,\n              developer: '开发者B',\n            },\n          ],\n        },\n        {\n          type: 'popular',\n          title: '热门推荐',\n          robots: [\n            {\n              id: 201,\n              name: 'Image Creator',\n              type: 2,\n              description: '强大的图像生成工具',\n              rating: 4.9,\n              developer: '开发者C',\n            },\n            {\n              id: 202,\n              name: 'Video AI',\n              type: 3,\n              description: '视频处理和生成专家',\n              rating: 4.7,\n              developer: '开发者D',\n            },\n          ],\n        },\n      ],\n    };\n  },\n  computed: {\n    ...mapState('user', ['isLoggedIn', 'userName', 'userId']),\n    subscriptionButtonText() {\n      const subscribedRobot = this.$store.state.agent.haveSubscribed.find(\n        (r) => r.agent_id === this.robot.id\n      );\n      return subscribedRobot && subscribedRobot.status\n        ? '已订阅，查看对话历史'\n        : '未订阅，点击订阅';\n    },\n  },\n  created() {\n    const agentId = this.$route.params.id;\n    if (!agentId) {\n      this.$message.error('无法获取机器人信息');\n      this.$router.push('/');\n    } else {\n      this.fetchRobotDetail(agentId);\n    }\n  },\n  methods: {\n    getRobotImage(type) {\n      switch (type) {\n        case 1:\n          return require('@/assets/images/Agents/textAgent.png');\n        case 2:\n          return require('@/assets/images/Agents/imageAgent.png');\n        case 3:\n          return require('@/assets/images/Agents/videoAgent.png');\n        default:\n          return require('@/assets/images/Agents/baseAgent.png');\n      }\n    },\n    truncate(text, length = 50) {\n      if (!text) return '';\n      return text.length > length ? text.slice(0, length) + '...' : text;\n    },\n    // *&* 评论相关方法 - 后端接口待实现\n    setRating(rating) {\n      this.currentRating = rating;\n      this.newComment.rating = rating;\n    },\n    async submitComment() {\n      if (!this.newComment.text.trim()) {\n        this.$message.warning('请输入评论内容');\n        return;\n      }\n\n      // *&* 模拟添加评论 - 实际需要调用后端API\n      const newComment = {\n        id: Date.now(),\n        userName: this.userName || '当前用户',\n        userId: this.userId,\n        rating: this.currentRating,\n        text: this.newComment.text,\n        likes: 0,\n        dislikes: 0,\n        userLiked: false,\n        userDisliked: false,\n        timestamp: new Date().toLocaleString(),\n      };\n\n      this.comments.unshift(newComment);\n      this.robotStats.comments = this.comments.length;\n\n      // 重置表单\n      this.newComment.text = '';\n      this.currentRating = 5;\n      this.showAddCommentForm = false;\n\n      this.$message.success('评论添加成功！');\n    },\n    likeComment(index) {\n      // *&* 模拟点赞功能 - 实际需要调用后端API\n      const comment = this.comments[index];\n      if (comment.userLiked) {\n        comment.likes--;\n        comment.userLiked = false;\n      } else {\n        if (comment.userDisliked) {\n          comment.dislikes--;\n          comment.userDisliked = false;\n        }\n        comment.likes++;\n        comment.userLiked = true;\n      }\n    },\n    dislikeComment(index) {\n      // *&* 模拟踩功能 - 实际需要调用后端API\n      const comment = this.comments[index];\n      if (comment.userDisliked) {\n        comment.dislikes--;\n        comment.userDisliked = false;\n      } else {\n        if (comment.userLiked) {\n          comment.likes--;\n          comment.userLiked = false;\n        }\n        comment.dislikes++;\n        comment.userDisliked = true;\n      }\n    },\n    handleCommentAction(command) {\n      if (command.startsWith('delete-')) {\n        const index = parseInt(command.split('-')[1]);\n        this.deleteComment(index);\n      }\n    },\n    deleteComment(index) {\n      // *&* 模拟删除评论 - 实际需要调用后端API\n      this.$confirm('确定要删除这条评论吗？', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning',\n      })\n        .then(() => {\n          this.comments.splice(index, 1);\n          this.robotStats.comments = this.comments.length;\n          this.$message.success('评论删除成功！');\n        })\n        .catch(() => {\n          // 用户取消删除\n        });\n    },\n    showRecommendations() {\n      this.recommendationDialogVisible = true;\n    },\n    goToRobotDetail(robotId) {\n      this.$router.push({ name: 'RobotDetail', params: { id: robotId } });\n      this.recommendationDialogVisible = false;\n    },\n    subscribeRecommendedRobot(robotId) {\n      // *&* 模拟订阅推荐机器人 - 实际需要调用后端API\n      console.log('订阅机器人ID:', robotId);\n      this.$message.success(`订阅机器人 ${robotId} 成功！`);\n    },\n    formatDateTime(date) {\n      const year = date.getFullYear();\n      const month = String(date.getMonth() + 1).padStart(2, '0');\n      const day = String(date.getDate()).padStart(2, '0');\n      const hours = String(date.getHours()).padStart(2, '0');\n      const minutes = String(date.getMinutes()).padStart(2, '0');\n      const seconds = String(date.getSeconds()).padStart(2, '0');\n      return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n    },\n    openSubscriptionDialog() {\n      this.isSubscriptionDialogVisible = true; // 打开弹窗\n    },\n    async handleSubscriptionConfirm(duration, points) {\n      console.log('订阅时长:', duration);\n      console.log('所需积分:', points);\n      // 这里可以添加积分检查逻辑\n\n      // 调用订阅方法\n      await this.subscribeRobot(duration);\n    },\n    async fetchRobotDetail(agentId) {\n      try {\n        const response = await apifetchAgentDetail(agentId);\n        this.robot = response.data;\n        this.loading = false; // 加载完成\n      } catch (error) {\n        console.error('获取机器人详情失败:', error);\n        this.$message.error('无法加载机器人详情');\n      }\n    },\n    async subscribeRobot(Duration) {\n      try {\n        const currentTime = this.formatDateTime(new Date()); // 格式化当前时间\n        // 构造 payload\n        const payload = {\n          user_id: this.$store.state.user.userId,\n          agent_id: this.robot.id,\n          startime: currentTime, // 使用格式化后的时间\n          duration: Duration,\n        };\n        console.log('请求 payload:', payload);\n        const response = await apisubscribeAgent(payload);\n        if (response.status === 200) {\n          this.$message.success('订阅成功！');\n          // 订阅成功后，重新获取用户订阅列表\n          this.$store.dispatch(\n            'agent/fetchUserSubscriptions',\n            this.$store.state.user.userId\n          );\n          console.log('订阅成功!!!:', response);\n          console.log(\n            '订阅成功后的用户订阅列表:',\n            this.$store.state.agent.haveSubscribed\n          );\n        } else {\n          this.$message.error('订阅失败，请稍后重试。');\n        }\n      } catch (error) {\n        console.error('订阅失败:', error);\n        this.$message.error('无法订阅机器人，请稍后重试。');\n      }\n    },\n    handleSubscription() {\n      const subscribedRobot = this.$store.state.agent.haveSubscribed.find(\n        (r) => r.agent_id === this.robot.id\n      );\n\n      if (subscribedRobot && subscribedRobot.status) {\n        // 已订阅，跳转到查看对话历史页面\n        this.$router.push({\n          name: 'ConversationHistory',\n          params: { id: this.robot.id },\n        });\n      } else {\n        // 未订阅，打开订阅弹窗\n        this.openSubscriptionDialog();\n      }\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@use '@/assets/styles/mixins.scss' as *;\n@use '@/assets/styles/variables.scss' as *;\n\n.robot-detail-page {\n  background-color: $background-color;\n  color: $text-color;\n  padding: 20px;\n  font-family: Arial, sans-serif;\n  min-height: 100vh;\n\n  .robot-info-section {\n    background: white;\n    padding: 30px;\n    margin-bottom: 20px;\n    border-radius: 8px;\n    box-shadow: $box-shadow-light;\n\n    .robot-info-header {\n      display: flex;\n      gap: 20px;\n      margin-bottom: 20px;\n\n      .robot-detail-logo {\n        width: 80px;\n        height: 80px;\n        border-radius: 50%;\n        object-fit: cover;\n        background: #f0f0f0;\n      }\n\n      .robot-info {\n        flex: 1;\n\n        .robot-detail-name {\n          font-size: 1.5rem;\n          font-weight: 600;\n          margin-bottom: 10px;\n          color: $text-color;\n        }\n\n        .robot-detail-description {\n          color: $secondary-color;\n          line-height: 1.6;\n          margin-bottom: 15px;\n        }\n\n        .robot-stats {\n          display: flex;\n          gap: 30px;\n          margin-bottom: 20px;\n\n          .stat-item {\n            text-align: center;\n\n            .stat-value {\n              font-size: 1.2rem;\n              font-weight: 600;\n              color: $accent-color;\n            }\n\n            .stat-label {\n              font-size: 0.9rem;\n              color: $secondary-color;\n            }\n          }\n        }\n\n        .robot-detail-actions {\n          display: flex;\n          gap: 15px;\n\n          .action-btn {\n            padding: 12px 24px;\n            border-radius: 6px;\n            font-weight: 500;\n            cursor: pointer;\n            transition: all 0.3s ease;\n\n            &.primary {\n              background: $accent-color;\n              color: white;\n              border: none;\n\n              &:hover {\n                background: $accent-hover-color;\n              }\n            }\n\n            &.secondary {\n              background: white;\n              color: $text-color;\n              border: 1px solid $border-color;\n\n              &:hover {\n                background: #f5f5f5;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  .comments-section {\n    background: white;\n    padding: 30px;\n    border-radius: 8px;\n    box-shadow: $box-shadow-light;\n\n    .comments-header {\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      margin-bottom: 20px;\n\n      .comments-title {\n        font-size: 1.1rem;\n        font-weight: 600;\n        color: $text-color;\n      }\n\n      .add-comment-btn {\n        background: $accent-color;\n        color: white;\n        border: none;\n        padding: 8px 16px;\n        border-radius: 4px;\n        cursor: pointer;\n      }\n    }\n\n    .add-comment-form {\n      border: 1px solid $border-color;\n      border-radius: 8px;\n      padding: 20px;\n      margin-bottom: 20px;\n      background: #f8f9fa;\n\n      .comment-form-group {\n        margin-bottom: 15px;\n\n        .comment-form-label {\n          display: block;\n          margin-bottom: 5px;\n          font-weight: 500;\n          color: $text-color;\n        }\n\n        .rating-input {\n          display: flex;\n          gap: 5px;\n          margin-top: 5px;\n\n          .rating-star {\n            color: #ddd;\n            font-size: 1.2rem;\n            cursor: pointer;\n            transition: color 0.2s;\n\n            &.active,\n            &:hover {\n              color: #ffc107;\n            }\n          }\n        }\n\n        .comment-input {\n          width: 100%;\n          padding: 10px;\n          border: 1px solid $border-color;\n          border-radius: 4px;\n          font-size: 0.9rem;\n          resize: vertical;\n          min-height: 80px;\n        }\n      }\n\n      .comment-form-actions {\n        display: flex;\n        gap: 10px;\n        justify-content: flex-end;\n\n        .el-button {\n          padding: 8px 16px;\n          border-radius: 4px;\n          font-size: 0.9rem;\n        }\n      }\n    }\n\n    .comments-list {\n      .comment-item {\n        border-bottom: 1px solid #f0f0f0;\n        padding: 20px 0;\n\n        &:last-child {\n          border-bottom: none;\n        }\n\n        .comment-header {\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n          margin-bottom: 10px;\n\n          .comment-user {\n            font-weight: 500;\n            color: $text-color;\n          }\n\n          .comment-rating {\n            color: #ffc107;\n          }\n\n          .comment-menu {\n            position: relative;\n            margin-left: auto;\n\n            .comment-menu-btn {\n              background: none;\n              border: none;\n              color: $secondary-color;\n              cursor: pointer;\n              padding: 5px;\n              border-radius: 50%;\n              width: 30px;\n              height: 30px;\n              display: flex;\n              align-items: center;\n              justify-content: center;\n\n              &:hover {\n                background: #f5f5f5;\n              }\n            }\n          }\n        }\n\n        .comment-text {\n          color: $secondary-color;\n          line-height: 1.6;\n          margin-bottom: 10px;\n        }\n\n        .comment-actions {\n          display: flex;\n          gap: 15px;\n\n          .comment-action {\n            background: none;\n            border: none;\n            color: $secondary-color;\n            cursor: pointer;\n            font-size: 0.9rem;\n            display: flex;\n            align-items: center;\n            gap: 4px;\n\n            &:hover {\n              color: $text-color;\n            }\n\n            &.liked {\n              color: #007bff;\n            }\n\n            &.disliked {\n              color: #dc3545;\n            }\n          }\n        }\n      }\n    }\n\n    .no-comments {\n      text-align: center;\n      color: $secondary-color;\n      padding: 40px;\n      font-style: italic;\n    }\n  }\n\n  .recommendation-content {\n    .recommendation-section {\n      margin-bottom: 30px;\n\n      &:last-child {\n        margin-bottom: 0;\n      }\n\n      .recommendation-category-title {\n        font-size: 1.1rem;\n        color: $text-color;\n        font-weight: 600;\n        margin-bottom: 15px;\n        padding-bottom: 8px;\n        border-bottom: 2px solid $accent-color;\n      }\n\n      .recommendation-grid {\n        display: grid;\n        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n        gap: 15px;\n\n        .recommendation-card {\n          cursor: pointer;\n          transition: all 0.3s ease;\n          border: 1px solid $border-color;\n\n          &:hover {\n            transform: translateY(-2px);\n            box-shadow: $box-shadow-medium;\n          }\n\n          .recommendation-card-header {\n            display: flex;\n            align-items: center;\n            gap: 10px;\n            margin-bottom: 10px;\n\n            .recommendation-card-logo {\n              width: 40px;\n              height: 40px;\n              border-radius: 50%;\n              object-fit: cover;\n            }\n\n            .recommendation-card-info {\n              flex: 1;\n\n              .recommendation-card-name {\n                font-size: 0.9rem;\n                font-weight: 600;\n                color: $text-color;\n                margin-bottom: 2px;\n              }\n\n              .recommendation-card-developer {\n                font-size: 0.8rem;\n                color: $secondary-color;\n              }\n            }\n          }\n\n          .recommendation-card-description {\n            color: $secondary-color;\n            font-size: 0.8rem;\n            line-height: 1.4;\n            margin-bottom: 15px;\n            overflow: hidden;\n            display: -webkit-box;\n            -webkit-line-clamp: 2;\n            -webkit-box-orient: vertical;\n          }\n\n          .recommendation-card-footer {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n\n            .recommendation-card-stats {\n              .recommendation-card-rating {\n                display: flex;\n                align-items: center;\n                gap: 4px;\n                color: #ffc107;\n                font-size: 0.8rem;\n              }\n            }\n\n            .recommendation-card-btn {\n              background: $accent-color;\n              color: white;\n              border: none;\n              padding: 4px 12px;\n              border-radius: 4px;\n              font-size: 0.8rem;\n              cursor: pointer;\n              transition: all 0.3s ease;\n\n              &:hover {\n                background: $accent-hover-color;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n@media (max-width: 768px) {\n  .robot-detail-page {\n    padding: 10px;\n\n    .robot-info-section {\n      padding: 20px;\n\n      .robot-info-header {\n        flex-direction: column;\n        text-align: center;\n\n        .robot-detail-logo {\n          align-self: center;\n        }\n\n        .robot-info {\n          .robot-stats {\n            justify-content: center;\n            gap: 20px;\n          }\n\n          .robot-detail-actions {\n            flex-direction: column;\n            align-items: center;\n\n            .action-btn {\n              width: 100%;\n              max-width: 200px;\n            }\n          }\n        }\n      }\n    }\n\n    .comments-section {\n      padding: 20px;\n\n      .comments-header {\n        flex-direction: column;\n        gap: 10px;\n        align-items: stretch;\n      }\n    }\n\n    .recommendation-content {\n      .recommendation-section {\n        .recommendation-grid {\n          grid-template-columns: 1fr;\n        }\n      }\n    }\n  }\n}\n</style>\n"],"mappings":";;;AAyOA,SAAAA,QAAA;AACA,SAAAC,gBAAA,IAAAC,mBAAA;AACA,SAAAC,cAAA,IAAAC,iBAAA;AACA,OAAAC,oBAAA;AAEA;EACAC,IAAA;EACAC,UAAA;IACAF;EACA;EACAG,KAAA;IACA;MACAC,KAAA;MACAC,SAAA;QACA;QACA;QACA;MACA;MACAC,OAAA;MACAC,2BAAA;MACAC,2BAAA;MACAC,kBAAA;MACAC,aAAA;MACAC,UAAA;QACAC,IAAA;QACAC,MAAA;MACA;MACA;MACAC,UAAA;QACAD,MAAA;QACAE,aAAA;QACAC,QAAA;MACA;MACA;MACAA,QAAA,GACA;QACAC,EAAA;QACAC,QAAA;QACAC,MAAA;QACAN,MAAA;QACAD,IAAA;QACAQ,KAAA;QACAC,QAAA;QACAC,SAAA;QACAC,YAAA;QACAC,SAAA;MACA,GACA;QACAP,EAAA;QACAC,QAAA;QACAC,MAAA;QACAN,MAAA;QACAD,IAAA;QACAQ,KAAA;QACAC,QAAA;QACAC,SAAA;QACAC,YAAA;QACAC,SAAA;MACA,GACA;QACAP,EAAA;QACAC,QAAA;QACAC,MAAA;QACAN,MAAA;QACAD,IAAA;QACAQ,KAAA;QACAC,QAAA;QACAC,SAAA;QACAC,YAAA;QACAC,SAAA;MACA,EACA;MACA;MACAC,wBAAA,GACA;QACAC,IAAA;QACAC,KAAA;QACAC,MAAA,GACA;UACAX,EAAA;UACAhB,IAAA;UACAyB,IAAA;UACAG,WAAA;UACAhB,MAAA;UACAiB,SAAA;QACA,GACA;UACAb,EAAA;UACAhB,IAAA;UACAyB,IAAA;UACAG,WAAA;UACAhB,MAAA;UACAiB,SAAA;QACA;MAEA,GACA;QACAJ,IAAA;QACAC,KAAA;QACAC,MAAA,GACA;UACAX,EAAA;UACAhB,IAAA;UACAyB,IAAA;UACAG,WAAA;UACAhB,MAAA;UACAiB,SAAA;QACA,GACA;UACAb,EAAA;UACAhB,IAAA;UACAyB,IAAA;UACAG,WAAA;UACAhB,MAAA;UACAiB,SAAA;QACA;MAEA;IAEA;EACA;EACAC,QAAA;IACA,GAAApC,QAAA;IACAqC,uBAAA;MACA,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}