{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport user from '@/store/user';\nimport { mapActions, mapState } from 'vuex';\nimport { saveChatHistory as apisaveChatHistory } from '../utils/api'; // 保存对话\nimport { sendMessage as apisendMessage } from '../utils/api'; // 发送消息\nimport { createChat as apicreateChat } from '../utils/api'; // 创建对话\nimport { closeChat as apicloseChat } from '../utils/api'; // 关闭对话\nimport { deleteChat as apideleteChat } from '../utils/api'; // 删除对话\nexport default {\n  data() {\n    return {\n      selectedRobot: null,\n      // 当前选中的机器人\n      userInput: '',\n      // 用户输入内容\n      dialogVisible: false,\n      // 对话框是否可见\n      dialogType: '',\n      // 对话框类型\n      dialogTitle: '',\n      // 对话框标题\n      searchKeyword: '',\n      // 搜索关键词\n      filteredRobots: [],\n      // 过滤后的机器人列表\n      loading: true // 加载状态\n    };\n  },\n  computed: {\n    ...mapState('user', ['isLoggedIn', 'userName', 'userId', 'token']),\n    // 绑定 Vuex 状态，当信息改变时，自动更新\n    ...mapState('agent', {\n      textRobots: state => state.textAgents,\n      imageRobots: state => state.imageAgents,\n      videoRobots: state => state.videoAgents,\n      haveSubscribed: state => state.haveSubscribed\n    }),\n    filteredSubscribedRobots() {\n      return this.haveSubscribed.filter(robot => robot.status);\n    }\n  },\n  created() {\n    this.getAllAgentsData(); // 获取所有机器人数据\n    this.getUserSubscriptions(); // 获取用户订阅列表\n  },\n  methods: {\n    ...mapActions('agent', ['fetchAllAgentsData', 'fetchAgentDetail', 'fetchUserSubscriptions']),\n    async getAllAgentsData() {\n      this.loading = true; // 开始加载\n      // 如果当前Vuex textAgents、imageAgents、videoAgents数据为空，则才进行获取\n      try {\n        const response = await this.fetchAllAgentsData();\n        console.log('response from getAllAgentsData:', response);\n      } catch (error) {\n        console.error('error in fetchAllAgentsData:', error);\n      } finally {\n        this.loading = false; // 结束加载\n      }\n    },\n    async getAgentDetail(agentId) {\n      try {\n        const response = await this.fetchAgentDetail(agentId);\n        console.log('response from getAgentDetail:', response);\n        return response;\n      } catch (error) {\n        console.error('error in fetchAgentDetail:', error);\n      }\n    },\n    async getUserSubscriptions() {\n      try {\n        const user_id = user.state.userId;\n        console.log('user_id:', user_id);\n        const response = await this.fetchUserSubscriptions(user_id);\n        console.log('subscribed agents:', this.$store.state.agent.haveSubscribed);\n        if (this.$store.state.agent.haveSubscribed.length === 0) {\n          this.$message.info('您还没有订阅任何机器人');\n        } else {\n          this.$message.success('获取订阅机器人列表成功');\n          this.selectedRobot = this.haveSubscribed[0].agent_name; // 默认选择第一个机器人\n        }\n        console.log('response from getUserSubscriptions:', response);\n      } catch (error) {\n        console.error('error in getUserSubscriptions:', error);\n      }\n    },\n    truncate(text, length = 20) {\n      if (text === null || text === undefined) {\n        return '';\n      }\n      return text.length > length ? text.slice(0, length) + '...' : text;\n    },\n    async sendMessageToRobot() {\n      if (this.userInput.trim() && this.selectedRobot) {\n        // 名字为时间戳YMD+时间格式(精确到时分)\n        const defaultName = new Date().toLocaleDateString().replace(/\\//g, '') + new Date().toLocaleTimeString().slice(0, 5);\n\n        // 第一步，创造对话\n        // 第二步，发送消息\n        // 第三步, 保存用户发送消息和机器人回复消息\n        // 第四步，获取对话详细信息\n        // 第五步，更新对话列表\n        // 第六步，转到对话详细页面\n\n        // 第一步，创造对话, 获得chat_id\n        const chat_id = await this.createChatinHome(defaultName);\n        if (!chat_id) {\n          this.$message.error('无法创建对话，请稍后重试');\n          return;\n        }\n        // 第二步，发送消息\n        const answer = await this.sendMessageinHome(chat_id, this.userInput);\n        if (!answer || !answer.content) {\n          this.$message.error('无法发送消息，请稍后重试');\n          await this.closeChatinHome(chat_id);\n          await this.deleteChatinHome(chat_id);\n          return;\n        }\n        this.$message.success(`已向机器人 ${this.selectedRobot} 发送消息: ${this.userInput} 名称: ${defaultName} chat_id: ${chat_id}`);\n        console.log('answer.content:', answer.content);\n        console.log('answer.role:', answer.role);\n        this.userInput = '';\n\n        // 第三步，保存用户发送消息和机器人恢复信息到数据库\n        const responseFromSave = await this.saveChatHistoryinHome(chat_id);\n        if (responseFromSave.status === 200) {\n          console.log('保存对话成功:', responseFromSave);\n        } else {\n          this.$message.error('保存对话失败:', responseFromSave.message);\n          await this.closeChatinHome(chat_id);\n          await this.deleteChatinHome(chat_id);\n          return;\n        }\n        console.log('responseFromSave:', responseFromSave);\n\n        // 第四步，关闭会话\n        const responseFromClose = await this.closeChatinHome(chat_id);\n        if (responseFromClose.status === 200) {\n          this.$message.success('关闭对话成功:', responseFromClose.message);\n        } else {\n          this.$message.error('关闭对话失败:', responseFromClose.message);\n          await this.deleteChatinHome(chat_id);\n          return;\n        }\n\n        // 第五步，刷新并跳转到对话详情页面\n        await this.handleReloadAndNavigate(chat_id);\n        // await location.reload(); // 刷新页面\n        // await this.$router.replace({\n        //   name: 'ChatRobot',\n        //   params: { id: chat_id },\n        // });\n      } else {\n        this.$message.warning('请选择机器人并输入内容');\n      }\n    },\n    async handleReloadAndNavigate(chat_id) {\n      try {\n        // 跳转到目标页面，使用 replace 以替换当前历史记录\n        await this.$router.replace({\n          name: 'ChatRobot',\n          params: {\n            id: chat_id\n          }\n        });\n      } catch (error) {\n        console.error('导航失败:', error);\n      } finally {\n        // 刷新页面\n        this.$message.success('刷新页面');\n        location.reload(); // 刷新页面\n      }\n    },\n    async deleteChatinHome(id) {\n      try {\n        const response = await apideleteChat({\n          chat_id: id\n        });\n        if (response.status === 200) {\n          console.log('删除对话成功:', response);\n        } else {\n          console.error('删除对话失败:', response);\n        }\n        return response;\n      } catch (error) {\n        console.error('error in deleteChatinHome:', error);\n      }\n    },\n    async createChatinHome(defaultName) {\n      try {\n        // 根据this.selectedRobot获取agent_id\n        const robot = this.haveSubscribed.find(robot => robot.agent_name === this.selectedRobot);\n        if (!robot || !robot.agent_id) {\n          this.$message.error('无法获取机器人信息，请稍后重试');\n          return;\n        } else {\n          console.log('robot:', robot);\n          const payload = {\n            agent_id: robot.agent_id,\n            user_id: user.state.userId,\n            name: defaultName\n          };\n          console.log('xxxxxpayload:', payload);\n          const responseFromCreate = await apicreateChat(payload);\n          if (responseFromCreate.status === 200) {\n            console.log('创建对话成功:', responseFromCreate);\n            console.log('response.data.chat_id:', responseFromCreate.data.chat_id);\n            return responseFromCreate.data.chat_id;\n          } else {\n            console.error('创建对话失败:', responseFromCreate);\n          }\n        }\n      } catch (error) {\n        console.error('error in sendMessageToRobot:', error);\n      }\n    },\n    async sendMessageinHome(chat_id, content) {\n      // try {\n      //   const payload = {\n      //     chat_id: chat_id,\n      //     content: content,\n      //   };\n      //   console.log('xxxxxpayload:', payload);\n      //   const response = await apisendMessage(payload);\n      //   if (response.status === 200) {\n      //     console.log('发送消息成功:', response);\n      //     return response.data;\n      //   } else {\n      //     console.error('发送消息失败:', response);\n      //   }\n      //   console.log('test-response:', response);\n      // } catch (error) {\n      //   console.error('出错在sendMessageinHome:', error);\n      // }\n      const payload = {\n        chat_id: chat_id,\n        content: content\n      };\n      console.log('xxxxxpayload:', payload);\n      const response = await apisendMessage(payload);\n      if (response.status === 200) {\n        console.log('发送消息成功:', response);\n        return response.data;\n      } else {\n        console.error('发送消息失败:', response);\n      }\n      console.log('test-response:', response);\n    },\n    async saveChatHistoryinHome(id) {\n      try {\n        const response = await apisaveChatHistory({\n          chat_id: id\n        });\n        if (response.status === 200) {\n          console.log('保存对话成功:', response);\n        } else {\n          console.error('保存对话失败:', response);\n        }\n        return response;\n      } catch (error) {\n        console.error('error in saveChatHistoryinHome:', error);\n      }\n    },\n    async closeChatinHome(id) {\n      try {\n        const response = await apicloseChat({\n          chat_id: id\n        });\n        if (response.status === 200) {\n          console.log('关闭对话成功:', response);\n        } else {\n          console.error('关闭对话失败:', response);\n        }\n        return response;\n      } catch (error) {\n        console.error('error in closeChatinHome:', error);\n      }\n    },\n    filterRobots() {\n      const keyword = this.searchKeyword.toLowerCase();\n      this.filteredRobots = this.getRobotsByType(this.dialogType).filter(robot => {\n        const nameMatch = robot.name && robot.name.toLowerCase().includes(keyword);\n        const descriptionMatch = robot.description && robot.description.toLowerCase().includes(keyword);\n        return nameMatch || descriptionMatch;\n      });\n    },\n    handleRobotSelect(tab) {\n      this.selectedRobot = tab.name; // 当前选择机器人\n      this.$message.info(`已切换至机器人: ${this.selectedRobot}`);\n    },\n    openDialog(type) {\n      this.dialogType = type;\n      this.dialogTitle = type === 'text' ? '文本对话机器人' : type === 'image' ? '图片生成机器人' : '音视频机器人';\n      this.filteredRobots = this.getRobotsByType(type);\n      console.log('filteredRobots:', this.filteredRobots);\n      this.dialogVisible = true;\n      this.$message.info(`打开${this.dialogTitle}对话框,共有${this.filteredRobots.length}个机器人,${this.dialogVisible}`);\n    },\n    async selectRobot(robot) {\n      if (!robot || !robot.name) {\n        this.$message.error('无法选择机器人，请稍后重试');\n        return;\n      }\n      try {\n        const response = await this.getAgentDetail(robot.id);\n        if (response.success) {\n          this.$message.success(`已选择机器人: ${robot.name}`);\n          this.dialogVisible = false;\n          this.goToRobotDetail(robot);\n        } else {\n          this.$message.error('选择机器人失败，请稍后重试');\n        }\n      } catch (error) {\n        console.error('error in selectRobot:', error);\n      }\n    },\n    goToRobotDetail(robot) {\n      if (!robot || !robot.id) {\n        this.$message.error('无效的机器人信息');\n        return;\n      }\n      this.$router.push({\n        name: 'RobotDetail',\n        params: {\n          id: robot.id\n        }\n      });\n    },\n    getRobotsByType(type) {\n      return type === 'text' ? this.$store.state.agent.textAgents : type === 'image' ? this.$store.state.agent.imageAgents : this.$store.state.agent.videoAgents;\n    },\n    getRobotImage(type) {\n      switch (type) {\n        case 1:\n          return require('@/assets/images/Agents/textAgent.png');\n        // 文本机器人的图像路径\n        case 2:\n          return require('@/assets/images/Agents/imageAgent.png');\n        // 图像机器人的图像路径\n        case 3:\n          return require('@/assets/images/Agents/videoAgent.png');\n        // 音视频机器人的图像路径\n        default:\n          return require('@/assets/images/Agents/baseAgent.png');\n        // 默认图像\n      }\n    }\n  }\n};","map":{"version":3,"names":["user","mapActions","mapState","saveChatHistory","apisaveChatHistory","sendMessage","apisendMessage","createChat","apicreateChat","closeChat","apicloseChat","deleteChat","apideleteChat","data","selectedRobot","userInput","dialogVisible","dialogType","dialogTitle","searchKeyword","filteredRobots","loading","computed","textRobots","state","textAgents","imageRobots","imageAgents","videoRobots","videoAgents","haveSubscribed","filteredSubscribedRobots","filter","robot","status","created","getAllAgentsData","getUserSubscriptions","methods","response","fetchAllAgentsData","console","log","error","getAgentDetail","agentId","fetchAgentDetail","user_id","userId","fetchUserSubscriptions","$store","agent","length","$message","info","success","agent_name","truncate","text","undefined","slice","sendMessageToRobot","trim","defaultName","Date","toLocaleDateString","replace","toLocaleTimeString","chat_id","createChatinHome","answer","sendMessageinHome","content","closeChatinHome","deleteChatinHome","role","responseFromSave","saveChatHistoryinHome","message","responseFromClose","handleReloadAndNavigate","warning","$router","name","params","id","location","reload","find","agent_id","payload","responseFromCreate","filterRobots","keyword","toLowerCase","getRobotsByType","nameMatch","includes","descriptionMatch","description","handleRobotSelect","tab","openDialog","type","selectRobot","goToRobotDetail","push","getRobotImage","require"],"sources":["src/views/HomePage.vue"],"sourcesContent":["<!-- filepath: /d:/MyGitHub/razor-ai-frontend/src/views/HomePage.vue -->\n<template>\n  <div class=\"homepage\">\n    <!-- Logo 和名称 -->\n    <div class=\"header\">\n      <img src=\"@/assets/images/logo.png\" alt=\"Razor AI\" class=\"logo\" />\n      <h1 class=\"title\">Razor AI</h1>\n    </div>\n\n    <!-- 已经订阅的机器人选项卡和输入框 -->\n    <div class=\"subscribed-robots\">\n      <el-tabs\n        v-model=\"selectedRobot\"\n        class=\"subscribed-tabs\"\n        @tab-click=\"handleRobotSelect\"\n      >\n        <el-tab-pane\n          v-for=\"robot in filteredSubscribedRobots\"\n          :key=\"robot.agent_id\"\n          :label=\"robot.agent_name\"\n          :name=\"robot.agent_name\"\n        >\n        </el-tab-pane>\n      </el-tabs>\n      <div class=\"chat-input-section\">\n        <el-input\n          v-model=\"userInput\"\n          type=\"textarea\"\n          :autosize=\"{ minRows: 2, maxRows: 4 }\"\n          placeholder=\"选择机器人并输入您的问题...\"\n          class=\"chat-input\"\n          clearable\n        ></el-input>\n        <el-button\n          class=\"send-button\"\n          type=\"info\"\n          icon=\"el-icon-upload2\"\n          @click=\"sendMessageToRobot\"\n          >发送并创建对话</el-button\n        >\n      </div>\n    </div>\n\n    <!-- 官方机器人列表 -->\n    <div class=\"robot-section\">\n      <h2 class=\"section-title\">官方机器人</h2>\n      <div\n        class=\"robot-groups\"\n        v-loading=\"loading\"\n        element-loading-text=\"拼命加载中\"\n        element-loading-spinner=\"el-icon-loading\"\n      >\n        <!-- 文本机器人 -->\n        <div class=\"robot-group\">\n          <h3 class=\"robot-group-intro\">\n            <el-icon name=\"document\"></el-icon>文本对话机器人\n          </h3>\n          <div class=\"robot-cards\">\n            <el-card\n              v-for=\"robot in textRobots.slice(0, 4)\"\n              :key=\"robot.id\"\n              class=\"robot-card\"\n              @click.native=\"selectRobot(robot)\"\n            >\n              <div class=\"robot-info\">\n                <img\n                  :src=\"require('@/assets/images/Agents/textAgent.png')\"\n                  alt=\"icon\"\n                  class=\"robot-icon\"\n                />\n                <p class=\"robot-name\">{{ robot.name }}</p>\n                <p class=\"robot-description\">\n                  {{ truncate(robot.description) }}\n                </p>\n              </div>\n            </el-card>\n            <el-link class=\"view-more\" @click=\"openDialog('text')\"\n              >查看更多</el-link\n            >\n          </div>\n        </div>\n        <!-- 图像机器人 -->\n        <div class=\"robot-group\">\n          <h3 class=\"robot-group-intro\">\n            <el-icon name=\"picture-outline\"></el-icon>图片生成机器人\n          </h3>\n          <div class=\"robot-cards\">\n            <el-card\n              v-for=\"robot in imageRobots.slice(0, 4)\"\n              :key=\"robot.id\"\n              class=\"robot-card\"\n              @click.native=\"selectRobot(robot)\"\n            >\n              <div class=\"robot-info\">\n                <img\n                  :src=\"require('@/assets/images/Agents/imageAgent.png')\"\n                  alt=\"icon\"\n                  class=\"robot-icon\"\n                />\n                <p class=\"robot-name\">{{ robot.name }}</p>\n                <p class=\"robot-description\">\n                  {{ truncate(robot.description) }}\n                </p>\n              </div>\n            </el-card>\n            <el-link class=\"view-more\" @click=\"openDialog('image')\"\n              >查看更多</el-link\n            >\n          </div>\n        </div>\n        <!-- 音视频机器人 -->\n        <div class=\"robot-group\">\n          <h3 class=\"robot-group-intro\">\n            <el-icon name=\"video-camera\" />音视频机器人\n          </h3>\n          <div class=\"robot-cards\">\n            <el-card\n              v-for=\"robot in videoRobots.slice(0, 4)\"\n              :key=\"robot.id\"\n              class=\"robot-card\"\n              @click.native=\"selectRobot(robot)\"\n            >\n              <div class=\"robot-info\">\n                <img\n                  :src=\"require('@/assets/images/Agents/videoAgent.png')\"\n                  alt=\"icon\"\n                  class=\"robot-icon\"\n                />\n                <p class=\"robot-name\">{{ robot.name }}</p>\n                <p class=\"robot-description\">\n                  {{ truncate(robot.description) }}\n                </p>\n              </div>\n            </el-card>\n            <el-link class=\"view-more\" @click=\"openDialog('av')\"\n              >查看更多</el-link\n            >\n          </div>\n        </div>\n      </div>\n    </div>\n    <!-- 对话框 -->\n    <el-dialog :title=\"dialogTitle\" :visible.sync=\"dialogVisible\" center>\n      <el-input\n        v-model=\"searchKeyword\"\n        placeholder=\"搜索机器人\"\n        class=\"search-input\"\n        clearable\n        @input=\"filterRobots\"\n      ></el-input>\n      <div class=\"dialog-robot-list\">\n        <el-card\n          v-for=\"robot in filteredRobots\"\n          :key=\"robot.id\"\n          class=\"dialog-robot-card\"\n          @click.native=\"selectRobot(robot)\"\n        >\n          <div class=\"robot-info\">\n            <img\n              :src=\"getRobotImage(robot.type)\"\n              alt=\"icon\"\n              class=\"robot-icon\"\n            />\n            <p class=\"robot-name\">{{ robot.name }}</p>\n            <p class=\"robot-description\">{{ truncate(robot.description) }}</p>\n          </div>\n        </el-card>\n      </div>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport user from '@/store/user';\nimport { mapActions, mapState } from 'vuex';\nimport { saveChatHistory as apisaveChatHistory } from '../utils/api'; // 保存对话\nimport { sendMessage as apisendMessage } from '../utils/api'; // 发送消息\nimport { createChat as apicreateChat } from '../utils/api'; // 创建对话\nimport { closeChat as apicloseChat } from '../utils/api'; // 关闭对话\nimport { deleteChat as apideleteChat } from '../utils/api'; // 删除对话\nexport default {\n  data() {\n    return {\n      selectedRobot: null, // 当前选中的机器人\n      userInput: '', // 用户输入内容\n      dialogVisible: false, // 对话框是否可见\n      dialogType: '', // 对话框类型\n      dialogTitle: '', // 对话框标题\n      searchKeyword: '', // 搜索关键词\n      filteredRobots: [], // 过滤后的机器人列表\n      loading: true, // 加载状态\n    };\n  },\n  computed: {\n    ...mapState('user', ['isLoggedIn', 'userName', 'userId', 'token']), // 绑定 Vuex 状态，当信息改变时，自动更新\n    ...mapState('agent', {\n      textRobots: (state) => state.textAgents,\n      imageRobots: (state) => state.imageAgents,\n      videoRobots: (state) => state.videoAgents,\n      haveSubscribed: (state) => state.haveSubscribed,\n    }),\n    filteredSubscribedRobots() {\n      return this.haveSubscribed.filter((robot) => robot.status);\n    },\n  },\n  created() {\n    this.getAllAgentsData(); // 获取所有机器人数据\n    this.getUserSubscriptions(); // 获取用户订阅列表\n  },\n  methods: {\n    ...mapActions('agent', [\n      'fetchAllAgentsData',\n      'fetchAgentDetail',\n      'fetchUserSubscriptions',\n    ]),\n    async getAllAgentsData() {\n      this.loading = true; // 开始加载\n      // 如果当前Vuex textAgents、imageAgents、videoAgents数据为空，则才进行获取\n      try {\n        const response = await this.fetchAllAgentsData();\n        console.log('response from getAllAgentsData:', response);\n      } catch (error) {\n        console.error('error in fetchAllAgentsData:', error);\n      } finally {\n        this.loading = false; // 结束加载\n      }\n    },\n    async getAgentDetail(agentId) {\n      try {\n        const response = await this.fetchAgentDetail(agentId);\n        console.log('response from getAgentDetail:', response);\n        return response;\n      } catch (error) {\n        console.error('error in fetchAgentDetail:', error);\n      }\n    },\n    async getUserSubscriptions() {\n      try {\n        const user_id = user.state.userId;\n        console.log('user_id:', user_id);\n        const response = await this.fetchUserSubscriptions(user_id);\n        console.log(\n          'subscribed agents:',\n          this.$store.state.agent.haveSubscribed\n        );\n        if (this.$store.state.agent.haveSubscribed.length === 0) {\n          this.$message.info('您还没有订阅任何机器人');\n        } else {\n          this.$message.success('获取订阅机器人列表成功');\n          this.selectedRobot = this.haveSubscribed[0].agent_name; // 默认选择第一个机器人\n        }\n        console.log('response from getUserSubscriptions:', response);\n      } catch (error) {\n        console.error('error in getUserSubscriptions:', error);\n      }\n    },\n    truncate(text, length = 20) {\n      if (text === null || text === undefined) {\n        return '';\n      }\n      return text.length > length ? text.slice(0, length) + '...' : text;\n    },\n    async sendMessageToRobot() {\n      if (this.userInput.trim() && this.selectedRobot) {\n        // 名字为时间戳YMD+时间格式(精确到时分)\n        const defaultName =\n          new Date().toLocaleDateString().replace(/\\//g, '') +\n          new Date().toLocaleTimeString().slice(0, 5);\n\n        // 第一步，创造对话\n        // 第二步，发送消息\n        // 第三步, 保存用户发送消息和机器人回复消息\n        // 第四步，获取对话详细信息\n        // 第五步，更新对话列表\n        // 第六步，转到对话详细页面\n\n        // 第一步，创造对话, 获得chat_id\n        const chat_id = await this.createChatinHome(defaultName);\n        if (!chat_id) {\n          this.$message.error('无法创建对话，请稍后重试');\n          return;\n        }\n        // 第二步，发送消息\n        const answer = await this.sendMessageinHome(chat_id, this.userInput);\n        if (!answer || !answer.content) {\n          this.$message.error('无法发送消息，请稍后重试');\n          await this.closeChatinHome(chat_id);\n          await this.deleteChatinHome(chat_id);\n          return;\n        }\n        this.$message.success(\n          `已向机器人 ${this.selectedRobot} 发送消息: ${this.userInput} 名称: ${defaultName} chat_id: ${chat_id}`\n        );\n        console.log('answer.content:', answer.content);\n        console.log('answer.role:', answer.role);\n        this.userInput = '';\n\n        // 第三步，保存用户发送消息和机器人恢复信息到数据库\n        const responseFromSave = await this.saveChatHistoryinHome(chat_id);\n        if (responseFromSave.status === 200) {\n          console.log('保存对话成功:', responseFromSave);\n        } else {\n          this.$message.error('保存对话失败:', responseFromSave.message);\n          await this.closeChatinHome(chat_id);\n          await this.deleteChatinHome(chat_id);\n          return;\n        }\n        console.log('responseFromSave:', responseFromSave);\n\n        // 第四步，关闭会话\n        const responseFromClose = await this.closeChatinHome(chat_id);\n        if (responseFromClose.status === 200) {\n          this.$message.success('关闭对话成功:', responseFromClose.message);\n        } else {\n          this.$message.error('关闭对话失败:', responseFromClose.message);\n          await this.deleteChatinHome(chat_id);\n          return;\n        }\n\n        // 第五步，刷新并跳转到对话详情页面\n        await this.handleReloadAndNavigate(chat_id);\n        // await location.reload(); // 刷新页面\n        // await this.$router.replace({\n        //   name: 'ChatRobot',\n        //   params: { id: chat_id },\n        // });\n      } else {\n        this.$message.warning('请选择机器人并输入内容');\n      }\n    },\n\n    async handleReloadAndNavigate(chat_id) {\n      try {\n        // 跳转到目标页面，使用 replace 以替换当前历史记录\n        await this.$router.replace({\n          name: 'ChatRobot',\n          params: { id: chat_id },\n        });\n      } catch (error) {\n        console.error('导航失败:', error);\n      } finally {\n        // 刷新页面\n        this.$message.success('刷新页面');\n        location.reload(); // 刷新页面\n      }\n    },\n\n    async deleteChatinHome(id) {\n      try {\n        const response = await apideleteChat({ chat_id: id });\n        if (response.status === 200) {\n          console.log('删除对话成功:', response);\n        } else {\n          console.error('删除对话失败:', response);\n        }\n        return response;\n      } catch (error) {\n        console.error('error in deleteChatinHome:', error);\n      }\n    },\n\n    async createChatinHome(defaultName) {\n      try {\n        // 根据this.selectedRobot获取agent_id\n        const robot = this.haveSubscribed.find(\n          (robot) => robot.agent_name === this.selectedRobot\n        );\n        if (!robot || !robot.agent_id) {\n          this.$message.error('无法获取机器人信息，请稍后重试');\n          return;\n        } else {\n          console.log('robot:', robot);\n          const payload = {\n            agent_id: robot.agent_id,\n            user_id: user.state.userId,\n            name: defaultName,\n          };\n          console.log('xxxxxpayload:', payload);\n          const responseFromCreate = await apicreateChat(payload);\n          if (responseFromCreate.status === 200) {\n            console.log('创建对话成功:', responseFromCreate);\n            console.log(\n              'response.data.chat_id:',\n              responseFromCreate.data.chat_id\n            );\n            return responseFromCreate.data.chat_id;\n          } else {\n            console.error('创建对话失败:', responseFromCreate);\n          }\n        }\n      } catch (error) {\n        console.error('error in sendMessageToRobot:', error);\n      }\n    },\n    async sendMessageinHome(chat_id, content) {\n      // try {\n      //   const payload = {\n      //     chat_id: chat_id,\n      //     content: content,\n      //   };\n      //   console.log('xxxxxpayload:', payload);\n      //   const response = await apisendMessage(payload);\n      //   if (response.status === 200) {\n      //     console.log('发送消息成功:', response);\n      //     return response.data;\n      //   } else {\n      //     console.error('发送消息失败:', response);\n      //   }\n      //   console.log('test-response:', response);\n      // } catch (error) {\n      //   console.error('出错在sendMessageinHome:', error);\n      // }\n      const payload = {\n        chat_id: chat_id,\n        content: content,\n      };\n      console.log('xxxxxpayload:', payload);\n      const response = await apisendMessage(payload);\n      if (response.status === 200) {\n        console.log('发送消息成功:', response);\n        return response.data;\n      } else {\n        console.error('发送消息失败:', response);\n      }\n      console.log('test-response:', response);\n    },\n    async saveChatHistoryinHome(id) {\n      try {\n        const response = await apisaveChatHistory({ chat_id: id });\n        if (response.status === 200) {\n          console.log('保存对话成功:', response);\n        } else {\n          console.error('保存对话失败:', response);\n        }\n        return response;\n      } catch (error) {\n        console.error('error in saveChatHistoryinHome:', error);\n      }\n    },\n    async closeChatinHome(id) {\n      try {\n        const response = await apicloseChat({ chat_id: id });\n        if (response.status === 200) {\n          console.log('关闭对话成功:', response);\n        } else {\n          console.error('关闭对话失败:', response);\n        }\n        return response;\n      } catch (error) {\n        console.error('error in closeChatinHome:', error);\n      }\n    },\n\n    filterRobots() {\n      const keyword = this.searchKeyword.toLowerCase();\n      this.filteredRobots = this.getRobotsByType(this.dialogType).filter(\n        (robot) => {\n          const nameMatch =\n            robot.name && robot.name.toLowerCase().includes(keyword);\n          const descriptionMatch =\n            robot.description &&\n            robot.description.toLowerCase().includes(keyword);\n          return nameMatch || descriptionMatch;\n        }\n      );\n    },\n    handleRobotSelect(tab) {\n      this.selectedRobot = tab.name; // 当前选择机器人\n      this.$message.info(`已切换至机器人: ${this.selectedRobot}`);\n    },\n\n    openDialog(type) {\n      this.dialogType = type;\n      this.dialogTitle =\n        type === 'text'\n          ? '文本对话机器人'\n          : type === 'image'\n            ? '图片生成机器人'\n            : '音视频机器人';\n      this.filteredRobots = this.getRobotsByType(type);\n      console.log('filteredRobots:', this.filteredRobots);\n      this.dialogVisible = true;\n      this.$message.info(\n        `打开${this.dialogTitle}对话框,共有${this.filteredRobots.length}个机器人,${this.dialogVisible}`\n      );\n    },\n    async selectRobot(robot) {\n      if (!robot || !robot.name) {\n        this.$message.error('无法选择机器人，请稍后重试');\n        return;\n      }\n      try {\n        const response = await this.getAgentDetail(robot.id);\n        if (response.success) {\n          this.$message.success(`已选择机器人: ${robot.name}`);\n          this.dialogVisible = false;\n          this.goToRobotDetail(robot);\n        } else {\n          this.$message.error('选择机器人失败，请稍后重试');\n        }\n      } catch (error) {\n        console.error('error in selectRobot:', error);\n      }\n    },\n    goToRobotDetail(robot) {\n      if (!robot || !robot.id) {\n        this.$message.error('无效的机器人信息');\n        return;\n      }\n      this.$router.push({ name: 'RobotDetail', params: { id: robot.id } });\n    },\n    getRobotsByType(type) {\n      return type === 'text'\n        ? this.$store.state.agent.textAgents\n        : type === 'image'\n          ? this.$store.state.agent.imageAgents\n          : this.$store.state.agent.videoAgents;\n    },\n    getRobotImage(type) {\n      switch (type) {\n        case 1:\n          return require('@/assets/images/Agents/textAgent.png'); // 文本机器人的图像路径\n        case 2:\n          return require('@/assets/images/Agents/imageAgent.png'); // 图像机器人的图像路径\n        case 3:\n          return require('@/assets/images/Agents/videoAgent.png'); // 音视频机器人的图像路径\n        default:\n          return require('@/assets/images/Agents/baseAgent.png'); // 默认图像\n      }\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@use '@/assets/styles/variables.scss' as *;\n.homepage {\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  .header {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    margin-bottom: 20px;\n\n    .logo {\n      width: 100px;\n      height: 100px;\n    }\n\n    .title {\n      font-size: 2rem;\n      color: $primary-color;\n    }\n  }\n\n  .subscribed-robots {\n    width: 60%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    margin-bottom: 30px;\n\n    .subscribed-tabs {\n      width: 100%;\n    }\n\n    .chat-input {\n      width: 100%;\n      margin-top: 10px;\n      margin-bottom: 0px;\n    }\n  }\n\n  .robot-section {\n    width: 100%;\n\n    .section-title {\n      font-size: 1.75rem;\n      margin-top: 0;\n      margin-bottom: 10px;\n      text-align: center; // 文本居中\n    }\n\n    .robot-groups {\n      display: flex;\n      flex-direction: column;\n      gap: 2rem;\n\n      .robot-group {\n        .robot-group-intro {\n          font-size: 1rem;\n          font-weight: bold;\n          margin-bottom: 10px;\n        }\n        .robot-cards {\n          display: flex;\n          align-items: center; // 水平居中\n          gap: 0.75rem;\n\n          .robot-card {\n            width: 15vw; // 卡片宽度\n            height: 150px;\n            display: flex;\n            justify-content: center; // 内容居中\n            padding: 10px;\n            cursor: pointer;\n            padding: 5px; // 内边距\n            &:hover {\n              /* 鼠标悬停时变换颜色 */\n              background-color: $primary-color;\n            }\n\n            .robot-icon {\n              width: 50px;\n              height: 50px;\n            }\n\n            .robot-info {\n              text-align: center;\n\n              .robot-name {\n                font-weight: bold;\n                margin: 3px 0;\n              }\n\n              .robot-description {\n                font-size: 0.875rem;\n                color: $text-color;\n              }\n            }\n          }\n\n          .view-more {\n            align-self: flex-end;\n          }\n        }\n      }\n    }\n  }\n  .chat-input-section {\n    display: flex;\n    align-items: center;\n    margin-bottom: 20px;\n    width: 100%;\n\n    .chat-input {\n      flex: 1;\n      margin-right: 10px;\n    }\n\n    .send-button {\n      width: 25%;\n      height: 100%;\n    }\n  }\n  .dialog-robot-list {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n\n    .dialog-robot-card {\n      display: flex;\n      align-items: center;\n      cursor: pointer;\n\n      &:hover {\n        /* 鼠标悬停时变换颜色 */\n        background-color: $primary-color;\n      }\n\n      .robot-icon {\n        width: 50px;\n        height: 50px;\n        margin-right: 10px;\n      }\n\n      .robot-info {\n        .robot-name {\n          font-size: 14px;\n          font-weight: bold;\n        }\n\n        .robot-description {\n          font-size: 12px;\n          color: #666;\n        }\n      }\n    }\n  }\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}