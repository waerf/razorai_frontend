{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mapActions } from 'vuex';\nexport default {\n  name: 'Register',\n  data() {\n    return {\n      labelPosition: 'top',\n      registerForm: {\n        user_name: '',\n        user_password: ''\n      },\n      registerRules: {\n        user_name: [{\n          required: true,\n          message: '请输入用户名',\n          trigger: 'blur'\n        }],\n        user_password: [{\n          required: true,\n          message: '请输入密码',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  methods: {\n    ...mapActions('user', ['register']),\n    // 映射 user 模块中的 register 方法\n    async onSubmit() {\n      this.$refs.registerForm.validate(async valid => {\n        if (valid) {\n          try {\n            // 调用Vuex中user模块的register方法\n            const result = await this.register({\n              user_name: this.registerForm.user_name,\n              user_password: this.registerForm.user_password\n            });\n            console.log('register result:', result);\n            if (result.success) {\n              this.$message.success(result.message); // 提示注册成功\n              await this.showInfoformRegister(result);\n              this.$router.push({\n                name: 'Home'\n              });\n            } else {\n              this.$message.error(result.message || '登录注册，请检查用户名和密码格式'); // 提示登录失败\n            }\n          } catch (error) {\n            console.error(error); // 打印错误信息\n            this.$message.error(error.message || '注册失败，请重试');\n          }\n        } else {\n          this.$message.error('请正确填写表单');\n        }\n      });\n    },\n    showInfoformRegister(result) {\n      const h = this.$createElement;\n\n      // 返回一个Promise\n      return new Promise(resolve => {\n        this.$msgbox({\n          title: '注册结果',\n          message: h('p', null, [h('span', null, `注册信息：`), h('p', null, [h('span', {\n            style: 'font-weight: bold;'\n          }, `用户名: ${this.registerForm.user_name}`)]), h('p', null, [h('span', {\n            style: 'font-weight: bold;'\n          }, `用户ID: ${result.user_id}`)]), h('p', null, [h('span', {\n            style: 'font-weight: bold;'\n          }, `成功状态: ${result.success ? '成功' : '失败'}`)])]),\n          confirmButtonText: '确定',\n          beforeClose: (action, instance, done) => {\n            if (action === 'confirm') {\n              instance.confirmButtonLoading = true; // 开启确定按钮的加载状态\n              instance.confirmButtonText = '注册成功，正在跳转主页'; // 修改确定按钮的文字\n              setTimeout(() => {\n                done(); // 关闭弹窗\n                resolve(); // 执行resolve，标记Promise完成\n                instance.confirmButtonLoading = false; // 恢复按钮状态\n              }, 500); // 延迟0.5秒，等待弹窗的用户交互\n            } else {\n              done();\n            }\n          }\n        });\n      });\n    },\n    resetForm() {\n      this.registerForm.user_name = '';\n      this.registerForm.user_password = '';\n    },\n    goBack() {\n      this.$router.go(-1); // 返回上一页\n    }\n  }\n};","map":{"version":3,"names":["mapActions","name","data","labelPosition","registerForm","user_name","user_password","registerRules","required","message","trigger","methods","onSubmit","$refs","validate","valid","result","register","console","log","success","$message","showInfoformRegister","$router","push","error","h","$createElement","Promise","resolve","$msgbox","title","style","user_id","confirmButtonText","beforeClose","action","instance","done","confirmButtonLoading","setTimeout","resetForm","goBack","go"],"sources":["src/views/RegisterPage.vue"],"sourcesContent":["<template>\n  <el-form\n    :model=\"registerForm\"\n    :rules=\"registerRules\"\n    :label-position=\"labelPosition\"\n    ref=\"registerForm\"\n    @keyup.enter.native=\"onSubmit\"\n    class=\"register-form\"\n  >\n    <el-form-item label=\"用户名\" prop=\"user_name\">\n      <el-input\n        v-model=\"registerForm.user_name\"\n        placeholder=\"请输入用户名\"\n        class=\"register-input\"\n      ></el-input>\n    </el-form-item>\n    <el-form-item label=\"密码\" prop=\"user_password\">\n      <el-input\n        v-model=\"registerForm.user_password\"\n        type=\"password\"\n        placeholder=\"请输入密码\"\n        class=\"register-input\"\n      ></el-input>\n    </el-form-item>\n    <el-form-item>\n      <el-button type=\"primary\" class=\"register-btn\" @click=\"onSubmit\">\n        注册\n      </el-button>\n    </el-form-item>\n    <el-form-item>\n      <el-button class=\"register-btn-secondary\" @click=\"goBack\">\n        返回\n      </el-button>\n    </el-form-item>\n  </el-form>\n</template>\n<script>\nimport { mapActions } from 'vuex';\nexport default {\n  name: 'Register',\n  data() {\n    return {\n      labelPosition: 'top',\n      registerForm: {\n        user_name: '',\n        user_password: '',\n      },\n      registerRules: {\n        user_name: [\n          { required: true, message: '请输入用户名', trigger: 'blur' },\n        ],\n        user_password: [\n          { required: true, message: '请输入密码', trigger: 'blur' },\n        ],\n      },\n    };\n  },\n  methods: {\n    ...mapActions('user', ['register']), // 映射 user 模块中的 register 方法\n    async onSubmit() {\n      this.$refs.registerForm.validate(async (valid) => {\n        if (valid) {\n          try {\n            // 调用Vuex中user模块的register方法\n            const result = await this.register({\n              user_name: this.registerForm.user_name,\n              user_password: this.registerForm.user_password,\n            });\n            console.log('register result:', result);\n            if (result.success) {\n              this.$message.success(result.message); // 提示注册成功\n              await this.showInfoformRegister(result);\n              this.$router.push({ name: 'Home' });\n            } else {\n              this.$message.error(\n                result.message || '登录注册，请检查用户名和密码格式'\n              ); // 提示登录失败\n            }\n          } catch (error) {\n            console.error(error); // 打印错误信息\n            this.$message.error(error.message || '注册失败，请重试');\n          }\n        } else {\n          this.$message.error('请正确填写表单');\n        }\n      });\n    },\n    showInfoformRegister(result) {\n      const h = this.$createElement;\n\n      // 返回一个Promise\n      return new Promise((resolve) => {\n        this.$msgbox({\n          title: '注册结果',\n          message: h('p', null, [\n            h('span', null, `注册信息：`),\n            h('p', null, [\n              h(\n                'span',\n                { style: 'font-weight: bold;' },\n                `用户名: ${this.registerForm.user_name}`\n              ),\n            ]),\n            h('p', null, [\n              h(\n                'span',\n                { style: 'font-weight: bold;' },\n                `用户ID: ${result.user_id}`\n              ),\n            ]),\n            h('p', null, [\n              h(\n                'span',\n                { style: 'font-weight: bold;' },\n                `成功状态: ${result.success ? '成功' : '失败'}`\n              ),\n            ]),\n          ]),\n          confirmButtonText: '确定',\n          beforeClose: (action, instance, done) => {\n            if (action === 'confirm') {\n              instance.confirmButtonLoading = true; // 开启确定按钮的加载状态\n              instance.confirmButtonText = '注册成功，正在跳转主页'; // 修改确定按钮的文字\n              setTimeout(() => {\n                done(); // 关闭弹窗\n                resolve(); // 执行resolve，标记Promise完成\n                instance.confirmButtonLoading = false; // 恢复按钮状态\n              }, 500); // 延迟0.5秒，等待弹窗的用户交互\n            } else {\n              done();\n            }\n          },\n        });\n      });\n    },\n\n    resetForm() {\n      this.registerForm.user_name = '';\n      this.registerForm.user_password = '';\n    },\n    goBack() {\n      this.$router.go(-1); // 返回上一页\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@use '@/assets/styles/mixins.scss' as *;\n@use '@/assets/styles/variables.scss' as *;\n.register-form {\n  width: 100%;\n  max-width: 500px;\n  margin: 100px auto;\n  padding: 30px;\n  background: $card-background-color;\n  border-radius: 10px;\n  box-shadow: $box-shadow-medium;\n  font-family: 'Roboto', sans-serif;\n}\n\n/* 输入框样式 */\n.register-input {\n  width: 95%;\n  border-radius: 25px;\n  padding: 12px 20px;\n  font-size: 16px;\n  background: rgba(255, 255, 255, 0.1);\n  color: $text-color;\n  border: 1px solid $border-color;\n  transition: all 0.3s ease;\n}\n\n.register-input:hover,\n.register-input:focus {\n  border-color: $accent-color;\n  background: rgba(255, 255, 255, 0.2);\n}\n\n/* 按钮样式 */\n.register-btn {\n  width: 100%;\n  margin-top: 20px;\n  padding: 15px;\n  font-size: 18px;\n  border-radius: 50px;\n  background: $accent-color;\n  color: white;\n  transition:\n    background 0.3s ease,\n    transform 0.3s ease;\n  box-shadow: $box-shadow-light;\n}\n\n.register-btn:hover {\n  background: $accent-hover-color;\n  transform: translateY(-3px); /* 鼠标悬浮时抬升效果 */\n}\n\n.register-btn:active {\n  transform: translateY(2px); /* 点击时下压效果 */\n}\n\n.register-btn-secondary {\n  width: 100%;\n  margin-top: 10px;\n  padding: 15px;\n  font-size: 18px;\n  border-radius: 50px;\n  background: $secondary-color;\n  color: $text-color;\n  transition:\n    background 0.3s ease,\n    transform 0.3s ease;\n  box-shadow: $box-shadow-light;\n}\n\n.register-btn-secondary:hover {\n  background: $hover-background-color;\n  transform: translateY(-3px); /* 鼠标悬浮时抬升效果 */\n}\n\n.register-btn-secondary:active {\n  transform: translateY(2px); /* 点击时下压效果 */\n}\n\n/* 表单标签 */\n.el-form-item label {\n  font-size: 16px;\n  font-weight: bold;\n  color: $text-color;\n  margin-bottom: 10px;\n}\n</style>\n"],"mappings":";AAqCA,SAAAA,UAAA;AACA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,aAAA;MACAC,YAAA;QACAC,SAAA;QACAC,aAAA;MACA;MACAC,aAAA;QACAF,SAAA,GACA;UAAAG,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,EACA;QACAJ,aAAA,GACA;UAAAE,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA;MAEA;IACA;EACA;EACAC,OAAA;IACA,GAAAX,UAAA;IAAA;IACA,MAAAY,SAAA;MACA,KAAAC,KAAA,CAAAT,YAAA,CAAAU,QAAA,OAAAC,KAAA;QACA,IAAAA,KAAA;UACA;YACA;YACA,MAAAC,MAAA,cAAAC,QAAA;cACAZ,SAAA,OAAAD,YAAA,CAAAC,SAAA;cACAC,aAAA,OAAAF,YAAA,CAAAE;YACA;YACAY,OAAA,CAAAC,GAAA,qBAAAH,MAAA;YACA,IAAAA,MAAA,CAAAI,OAAA;cACA,KAAAC,QAAA,CAAAD,OAAA,CAAAJ,MAAA,CAAAP,OAAA;cACA,WAAAa,oBAAA,CAAAN,MAAA;cACA,KAAAO,OAAA,CAAAC,IAAA;gBAAAvB,IAAA;cAAA;YACA;cACA,KAAAoB,QAAA,CAAAI,KAAA,CACAT,MAAA,CAAAP,OAAA,sBACA;YACA;UACA,SAAAgB,KAAA;YACAP,OAAA,CAAAO,KAAA,CAAAA,KAAA;YACA,KAAAJ,QAAA,CAAAI,KAAA,CAAAA,KAAA,CAAAhB,OAAA;UACA;QACA;UACA,KAAAY,QAAA,CAAAI,KAAA;QACA;MACA;IACA;IACAH,qBAAAN,MAAA;MACA,MAAAU,CAAA,QAAAC,cAAA;;MAEA;MACA,WAAAC,OAAA,CAAAC,OAAA;QACA,KAAAC,OAAA;UACAC,KAAA;UACAtB,OAAA,EAAAiB,CAAA,aACAA,CAAA,yBACAA,CAAA,aACAA,CAAA,CACA,QACA;YAAAM,KAAA;UAAA,GACA,aAAA5B,YAAA,CAAAC,SAAA,EACA,EACA,GACAqB,CAAA,aACAA,CAAA,CACA,QACA;YAAAM,KAAA;UAAA,GACA,SAAAhB,MAAA,CAAAiB,OAAA,EACA,EACA,GACAP,CAAA,aACAA,CAAA,CACA,QACA;YAAAM,KAAA;UAAA,GACA,SAAAhB,MAAA,CAAAI,OAAA,gBACA,EACA,EACA;UACAc,iBAAA;UACAC,WAAA,EAAAA,CAAAC,MAAA,EAAAC,QAAA,EAAAC,IAAA;YACA,IAAAF,MAAA;cACAC,QAAA,CAAAE,oBAAA;cACAF,QAAA,CAAAH,iBAAA;cACAM,UAAA;gBACAF,IAAA;gBACAT,OAAA;gBACAQ,QAAA,CAAAE,oBAAA;cACA;YACA;cACAD,IAAA;YACA;UACA;QACA;MACA;IACA;IAEAG,UAAA;MACA,KAAArC,YAAA,CAAAC,SAAA;MACA,KAAAD,YAAA,CAAAE,aAAA;IACA;IACAoC,OAAA;MACA,KAAAnB,OAAA,CAAAoB,EAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}