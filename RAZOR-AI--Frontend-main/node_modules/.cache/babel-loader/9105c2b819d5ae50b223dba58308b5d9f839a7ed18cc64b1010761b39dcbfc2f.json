{"ast":null,"code":"import { getUserPoints, getPointsHistory } from '@/utils/api';\nimport { mapState } from 'vuex';\nexport default {\n  name: 'ScoreMessage',\n  data() {\n    return {\n      points: 0,\n      // 当前积分\n      currentTab: 'all',\n      // 当前选中的标签页\n      currentPage: 1,\n      // 当前页码\n      pageSize: 5,\n      // 每页显示的记录数\n      scoreData: [],\n      // 从后端获取的积分记录\n      loading: false\n    };\n  },\n  computed: {\n    ...mapState('user', ['userId']),\n    filteredScoreData() {\n      if (this.currentTab === 'all') {\n        return this.scoreData;\n      }\n      return this.scoreData.filter(entry => entry.badge === this.currentTab);\n    },\n    totalPages() {\n      return Math.ceil(this.filteredScoreData.length / this.pageSize);\n    },\n    paginatedData() {\n      const start = (this.currentPage - 1) * this.pageSize;\n      const end = start + this.pageSize;\n      return this.filteredScoreData.slice(start, end);\n    }\n  },\n  async created() {\n    await this.loadPointsData();\n  },\n  methods: {\n    async loadPointsData() {\n      try {\n        this.loading = true;\n\n        // 获取当前积分\n        if (this.$route.params.points) {\n          this.points = this.$route.params.points;\n        } else {\n          const pointsResponse = await getUserPoints();\n          this.points = pointsResponse.data.points || 0;\n        }\n\n        // 获取积分历史记录\n        try {\n          const historyResponse = await getPointsHistory(1, 100); // 获取更多记录用于分页\n          this.scoreData = this.formatScoreData(historyResponse.data);\n        } catch (error) {\n          console.warn('获取积分历史失败，使用模拟数据:', error);\n          // 如果API失败，使用模拟数据\n          this.scoreData = this.getMockData();\n        }\n      } catch (error) {\n        console.error('加载积分数据失败:', error);\n        this.$message.error('加载积分数据失败');\n        // 使用模拟数据\n        this.scoreData = this.getMockData();\n      } finally {\n        this.loading = false;\n      }\n    },\n    formatScoreData(apiData) {\n      // 将后端API数据格式化为前端需要的格式\n      return apiData.map(item => ({\n        time: new Date(item.created_at).toLocaleString('zh-CN'),\n        type: item.points > 0 ? '获取' : '消耗',\n        desc: item.description || item.type || '积分变动',\n        change: item.points > 0 ? `+${item.points}` : `${item.points}`,\n        badge: item.points > 0 ? 'in' : 'out'\n      }));\n    },\n    getMockData() {\n      // 模拟数据，当API不可用时使用\n      return [{\n        time: '2025-07-18 09:30',\n        type: '获取',\n        desc: '每日签到',\n        change: '+10',\n        badge: 'in'\n      }, {\n        time: '2025-07-18 08:00',\n        type: '获取',\n        desc: '开发AI机器人激励',\n        change: '+200',\n        badge: 'in'\n      }, {\n        time: '2025-07-17 20:15',\n        type: '消耗',\n        desc: '购买机器人功能',\n        change: '-100',\n        badge: 'out'\n      }, {\n        time: '2025-07-17 18:00',\n        type: '获取',\n        desc: '充值积分',\n        change: '+100',\n        badge: 'in'\n      }, {\n        time: '2025-07-17 10:00',\n        type: '获取',\n        desc: '每日签到',\n        change: '+10',\n        badge: 'in'\n      }, {\n        time: '2025-07-16 09:00',\n        type: '消耗',\n        desc: '购买高级机器人',\n        change: '-50',\n        badge: 'out'\n      }, {\n        time: '2025-07-15 12:00',\n        type: '获取',\n        desc: '活动奖励',\n        change: '+30',\n        badge: 'in'\n      }, {\n        time: '2025-07-14 15:00',\n        type: '消耗',\n        desc: '解锁机器人功能',\n        change: '-20',\n        badge: 'out'\n      }, {\n        time: '2025-07-13 10:00',\n        type: '获取',\n        desc: '每日签到',\n        change: '+10',\n        badge: 'in'\n      }, {\n        time: '2025-07-12 18:00',\n        type: '消耗',\n        desc: '购买机器人服务',\n        change: '-80',\n        badge: 'out'\n      }];\n    },\n    switchTab(tab) {\n      this.currentTab = tab;\n      this.currentPage = 1; // 切换标签时重置到第一页\n    },\n    changePage(page) {\n      this.currentPage = page;\n    }\n  },\n  watch: {\n    $route(to) {\n      if (to.params.points) {\n        this.points = to.params.points;\n      }\n    }\n  }\n};","map":{"version":3,"names":["getUserPoints","getPointsHistory","mapState","name","data","points","currentTab","currentPage","pageSize","scoreData","loading","computed","filteredScoreData","filter","entry","badge","totalPages","Math","ceil","length","paginatedData","start","end","slice","created","loadPointsData","methods","$route","params","pointsResponse","historyResponse","formatScoreData","error","console","warn","getMockData","$message","apiData","map","item","time","Date","created_at","toLocaleString","type","desc","description","change","switchTab","tab","changePage","page","watch","to"],"sources":["src/views/ScoreMessage.vue"],"sourcesContent":["<template>\n  <div class=\"score-page\" v-loading=\"loading\">\n    <div class=\"header-actions\">\n      <el-button\n        type=\"text\"\n        icon=\"el-icon-arrow-left\"\n        @click=\"$router.go(-1)\"\n        class=\"back-button\"\n      >\n        返回\n      </el-button>\n    </div>\n\n    <h1 class=\"title\">积分明细</h1>\n    <p class=\"description\">查看您的积分获取和使用记录。</p>\n\n    <div class=\"score-container\">\n      <div class=\"current-score\">\n        <h2>\n          当前积分：<span class=\"highlight\">{{ points }}</span>\n        </h2>\n      </div>\n\n      <!-- 积分说明 -->\n      <div class=\"score-info\">\n        <h3>积分说明</h3>\n        <ul>\n          <li>• 积分主要用于购买机器人功能和服务</li>\n          <li>• 通过贡献内容（如开发AI机器人）可获得激励积分奖励</li>\n          <li>• 每日签到和参与活动也可获取积分</li>\n          <li>• 积分可用于解锁高级机器人、购买机器人服务等</li>\n        </ul>\n      </div>\n\n      <!-- 标签页切换 -->\n      <div class=\"tabs\">\n        <button\n          :class=\"['tab-button', currentTab === 'all' ? 'tab-active' : '']\"\n          @click=\"switchTab('all')\"\n        >\n          全部\n        </button>\n        <button\n          :class=\"[\n            'tab-button tab-in',\n            currentTab === 'in' ? 'tab-active' : '',\n          ]\"\n          @click=\"switchTab('in')\"\n        >\n          获取\n        </button>\n        <button\n          :class=\"[\n            'tab-button tab-out',\n            currentTab === 'out' ? 'tab-active' : '',\n          ]\"\n          @click=\"switchTab('out')\"\n        >\n          消耗\n        </button>\n      </div>\n\n      <div class=\"score-details\">\n        <table class=\"score-table\">\n          <thead>\n            <tr>\n              <th>时间</th>\n              <th>类型</th>\n              <th>描述</th>\n              <th>变动</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr v-for=\"entry in paginatedData\" :key=\"entry.time\">\n              <td>{{ entry.time }}</td>\n              <td>\n                <span\n                  :class=\"entry.badge === 'in' ? 'badge-in' : 'badge-out'\"\n                  >{{ entry.type }}</span\n                >\n              </td>\n              <td>{{ entry.desc }}</td>\n              <td :class=\"entry.badge === 'in' ? 'text-green' : 'text-red'\">\n                {{ entry.change }}\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n\n      <!-- 分页控件 -->\n      <div class=\"pagination\" v-if=\"totalPages > 1\">\n        <button\n          class=\"pagination-button\"\n          :disabled=\"currentPage === 1\"\n          @click=\"changePage(currentPage - 1)\"\n        >\n          上一页\n        </button>\n        <span>第 {{ currentPage }} 页 / 共 {{ totalPages }} 页</span>\n        <button\n          class=\"pagination-button\"\n          :disabled=\"currentPage === totalPages\"\n          @click=\"changePage(currentPage + 1)\"\n        >\n          下一页\n        </button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { getUserPoints, getPointsHistory } from '@/utils/api';\nimport { mapState } from 'vuex';\n\nexport default {\n  name: 'ScoreMessage',\n  data() {\n    return {\n      points: 0, // 当前积分\n      currentTab: 'all', // 当前选中的标签页\n      currentPage: 1, // 当前页码\n      pageSize: 5, // 每页显示的记录数\n      scoreData: [], // 从后端获取的积分记录\n      loading: false,\n    };\n  },\n  computed: {\n    ...mapState('user', ['userId']),\n    filteredScoreData() {\n      if (this.currentTab === 'all') {\n        return this.scoreData;\n      }\n      return this.scoreData.filter((entry) => entry.badge === this.currentTab);\n    },\n    totalPages() {\n      return Math.ceil(this.filteredScoreData.length / this.pageSize);\n    },\n    paginatedData() {\n      const start = (this.currentPage - 1) * this.pageSize;\n      const end = start + this.pageSize;\n      return this.filteredScoreData.slice(start, end);\n    },\n  },\n  async created() {\n    await this.loadPointsData();\n  },\n  methods: {\n    async loadPointsData() {\n      try {\n        this.loading = true;\n\n        // 获取当前积分\n        if (this.$route.params.points) {\n          this.points = this.$route.params.points;\n        } else {\n          const pointsResponse = await getUserPoints();\n          this.points = pointsResponse.data.points || 0;\n        }\n\n        // 获取积分历史记录\n        try {\n          const historyResponse = await getPointsHistory(1, 100); // 获取更多记录用于分页\n          this.scoreData = this.formatScoreData(historyResponse.data);\n        } catch (error) {\n          console.warn('获取积分历史失败，使用模拟数据:', error);\n          // 如果API失败，使用模拟数据\n          this.scoreData = this.getMockData();\n        }\n      } catch (error) {\n        console.error('加载积分数据失败:', error);\n        this.$message.error('加载积分数据失败');\n        // 使用模拟数据\n        this.scoreData = this.getMockData();\n      } finally {\n        this.loading = false;\n      }\n    },\n\n    formatScoreData(apiData) {\n      // 将后端API数据格式化为前端需要的格式\n      return apiData.map((item) => ({\n        time: new Date(item.created_at).toLocaleString('zh-CN'),\n        type: item.points > 0 ? '获取' : '消耗',\n        desc: item.description || item.type || '积分变动',\n        change: item.points > 0 ? `+${item.points}` : `${item.points}`,\n        badge: item.points > 0 ? 'in' : 'out',\n      }));\n    },\n\n    getMockData() {\n      // 模拟数据，当API不可用时使用\n      return [\n        {\n          time: '2025-07-18 09:30',\n          type: '获取',\n          desc: '每日签到',\n          change: '+10',\n          badge: 'in',\n        },\n        {\n          time: '2025-07-18 08:00',\n          type: '获取',\n          desc: '开发AI机器人激励',\n          change: '+200',\n          badge: 'in',\n        },\n        {\n          time: '2025-07-17 20:15',\n          type: '消耗',\n          desc: '购买机器人功能',\n          change: '-100',\n          badge: 'out',\n        },\n        {\n          time: '2025-07-17 18:00',\n          type: '获取',\n          desc: '充值积分',\n          change: '+100',\n          badge: 'in',\n        },\n        {\n          time: '2025-07-17 10:00',\n          type: '获取',\n          desc: '每日签到',\n          change: '+10',\n          badge: 'in',\n        },\n        {\n          time: '2025-07-16 09:00',\n          type: '消耗',\n          desc: '购买高级机器人',\n          change: '-50',\n          badge: 'out',\n        },\n        {\n          time: '2025-07-15 12:00',\n          type: '获取',\n          desc: '活动奖励',\n          change: '+30',\n          badge: 'in',\n        },\n        {\n          time: '2025-07-14 15:00',\n          type: '消耗',\n          desc: '解锁机器人功能',\n          change: '-20',\n          badge: 'out',\n        },\n        {\n          time: '2025-07-13 10:00',\n          type: '获取',\n          desc: '每日签到',\n          change: '+10',\n          badge: 'in',\n        },\n        {\n          time: '2025-07-12 18:00',\n          type: '消耗',\n          desc: '购买机器人服务',\n          change: '-80',\n          badge: 'out',\n        },\n      ];\n    },\n\n    switchTab(tab) {\n      this.currentTab = tab;\n      this.currentPage = 1; // 切换标签时重置到第一页\n    },\n    changePage(page) {\n      this.currentPage = page;\n    },\n  },\n  watch: {\n    $route(to) {\n      if (to.params.points) {\n        this.points = to.params.points;\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.score-page {\n  padding: 20px;\n  background-color: #f7f8fa;\n  color: #333;\n  font-family: Arial, sans-serif;\n}\n\n.header-actions {\n  margin-bottom: 20px;\n}\n\n.back-button {\n  color: #409eff;\n  font-size: 16px;\n}\n\n.back-button:hover {\n  color: #66b1ff;\n}\n\n.title {\n  font-size: 2em;\n  text-align: center;\n  margin-bottom: 20px;\n  color: #165dff;\n}\n\n.description {\n  text-align: center;\n  margin-bottom: 20px;\n  color: #666;\n}\n\n.score-container {\n  max-width: 800px;\n  margin: 0 auto;\n  background: #fff;\n  padding: 20px;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.current-score {\n  text-align: center;\n  margin-bottom: 20px;\n}\n\n.current-score .highlight {\n  color: #52c41a;\n  font-weight: bold;\n}\n\n.score-info {\n  margin: 20px 0;\n  padding: 15px;\n  background-color: #f9f9f9;\n  border: 1px solid #ddd;\n  border-radius: 5px;\n}\n\n.score-info h3 {\n  margin-bottom: 10px;\n  font-size: 1.2em;\n  color: #333;\n}\n\n.score-info ul {\n  list-style-type: none;\n  padding: 0;\n}\n\n.score-info li {\n  margin-bottom: 5px;\n  color: #666;\n}\n\n.tabs {\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 20px;\n}\n\n.tab-button {\n  flex: 1;\n  text-align: center;\n  padding: 10px 20px;\n  margin: 0 5px;\n  border: 1px solid #ddd;\n  border-radius: 5px;\n  background-color: #f4f4f4;\n  color: #666;\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n.tab-button:hover {\n  background-color: #e6e6e6;\n}\n\n.tab-in {\n  background-color: #e6f7ff;\n  color: #52c41a;\n}\n\n.tab-out {\n  background-color: #fff1f0;\n  color: #ff4d4f;\n}\n\n.tab-active {\n  background-color: #165dff;\n  color: #fff;\n  font-weight: bold;\n}\n\n.score-table {\n  width: 100%;\n  border-collapse: collapse;\n}\n\n.score-table th,\n.score-table td {\n  border: 1px solid #ddd;\n  padding: 8px;\n  text-align: left;\n}\n\n.score-table th {\n  background-color: #f4f4f4;\n  font-weight: bold;\n}\n\n.text-green {\n  color: #52c41a;\n}\n\n.text-red {\n  color: #ff4d4f;\n}\n\n.badge-in {\n  background-color: #52c41a;\n  color: white;\n  font-size: 0.75rem;\n  padding: 0.125rem 0.5rem;\n  border-radius: 9999px;\n}\n\n.badge-out {\n  background-color: #ff4d4f;\n  color: white;\n  font-size: 0.75rem;\n  padding: 0.125rem 0.5rem;\n  border-radius: 9999px;\n}\n\n.pagination {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-top: 20px;\n}\n\n.pagination-button {\n  padding: 5px 10px;\n  margin: 0 5px;\n  border: 1px solid #ddd;\n  border-radius: 5px;\n  background-color: #f4f4f4;\n  color: #666;\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n.pagination-button:disabled {\n  background-color: #e6e6e6;\n  color: #999;\n  cursor: not-allowed;\n}\n\n.pagination-button:hover:not(:disabled) {\n  background-color: #e6e6e6;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}