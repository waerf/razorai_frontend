{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mapActions, mapState } from 'vuex';\nimport { subscribeAgent as apiSubscribeAgent, getRobotsByType as apiGetRobotsByType, searchAgent as apiSearchAgent, getRecommendedRobots as apiGetRecommendedRobots } from '../utils/api';\nimport RobotDetailDialog from './RobotDetailPage.vue';\nimport SubscriptionSelector from '@/components/SubscriptionSelector.vue';\nexport default {\n  name: 'RobotMarketPage',\n  components: {\n    RobotDetailDialog,\n    SubscriptionSelector\n  },\n  data() {\n    return {\n      searchKeyword: '',\n      currentSearchMode: 'name',\n      showSearchResults: false,\n      searchResults: [],\n      categoryDialogVisible: false,\n      categoryDialogTitle: '',\n      categoryDetailRobots: [],\n      subscriptionDialogVisible: false,\n      currentRobotForSubscription: null,\n      loading: false,\n      robotDetailVisible: false,\n      currentRobotId: null,\n      // 新增的分页相关数据\n      recommendedRobots: [],\n      // 推荐机器人前4个\n      rolePlayRobots: [],\n      // 角色扮演机器人前4个\n      codingRobots: [],\n      // 代码编程机器人前4个\n      paperRobots: [],\n      // 论文修改机器人前4个\n      currentCategoryType: null,\n      // 当前查看的分类类型\n      currentFirstIndex: 0,\n      // 当前分页的起始索引\n      paginationLoading: false,\n      // 分页加载状态\n      hasNextPage: true,\n      // 是否有下一页\n      // 搜索相关数据\n      searchType: 1,\n      // 搜索类型：1=名称，2=描述\n      searchInfo: '',\n      // 当前搜索关键词\n      searchIndex: 0,\n      // 搜索结果起始索引\n      searchLoading: false,\n      // 搜索加载状态\n      hasNextSearchPage: true,\n      // 是否有下一页搜索结果\n      subscriptionCheckInterval: null // 订阅状态检查定时器\n    };\n  },\n  computed: {\n    ...mapState('user', ['isLoggedIn', 'userName', 'userId']),\n    ...mapState('agent', {\n      haveSubscribed: state => state.haveSubscribed\n    }),\n    currentSearchModeText() {\n      const modes = {\n        name: '按名称搜索',\n        description: '按描述搜索'\n      };\n      return modes[this.currentSearchMode];\n    },\n    allRobots() {\n      return [...this.recommendedRobots, ...this.rolePlayRobots, ...this.codingRobots, ...this.paperRobots];\n    },\n    currentPageNumber() {\n      return Math.floor(this.currentFirstIndex / 8) + 1;\n    },\n    isFirstPage() {\n      return this.currentFirstIndex === 0;\n    },\n    // 搜索相关计算属性\n    currentSearchPageNumber() {\n      return Math.floor(this.searchIndex / 16) + 1;\n    },\n    isFirstSearchPage() {\n      return this.searchIndex === 0;\n    }\n  },\n  watch: {\n    // 监听搜索框内容变化\n    searchKeyword(newVal) {\n      if (!newVal || newVal.trim() === '') {\n        this.handleSearchClear();\n      }\n    }\n  },\n  created() {\n    // 初始化搜索类型\n    this.searchType = this.currentSearchMode === 'name' ? 1 : 2;\n    this.loadInitialData();\n    this.getUserSubscriptions();\n  },\n  mounted() {\n    // 设置定时器，每5分钟检查一次订阅状态\n    this.subscriptionCheckInterval = setInterval(() => {\n      if (this.userId) {\n        this.getUserSubscriptions();\n      }\n    }, 5 * 60 * 1000); // 5分钟\n  },\n  beforeDestroy() {\n    // 组件销毁前清理定时器\n    if (this.subscriptionCheckInterval) {\n      clearInterval(this.subscriptionCheckInterval);\n    }\n  },\n  methods: {\n    ...mapActions('agent', ['fetchAgentDetail', 'fetchUserSubscriptions']),\n    // 加载初始数据（首页展示的前4个机器人）\n    async loadInitialData() {\n      this.loading = true;\n      try {\n        // 并行加载推荐机器人和其他类型的机器人\n        const promises = [this.loadRobotsByType(1, 0),\n        // 角色扮演机器人 type=1\n        this.loadRobotsByType(2, 0),\n        // 代码编程机器人 type=2\n        this.loadRobotsByType(3, 0) // 论文修改机器人 type=3\n        ];\n\n        // 如果用户已登录，加载推荐机器人\n        if (this.isLoggedIn && this.userId) {\n          promises.unshift(this.loadRecommendedRobots());\n          const [recommendedData, rolePlayData, codingData, paperData] = await Promise.all(promises);\n          this.recommendedRobots = recommendedData;\n          this.rolePlayRobots = rolePlayData.slice(0, 4);\n          this.codingRobots = codingData.slice(0, 4);\n          this.paperRobots = paperData.slice(0, 4);\n        } else {\n          const [rolePlayData, codingData, paperData] = await Promise.all(promises);\n          this.recommendedRobots = [];\n          this.rolePlayRobots = rolePlayData.slice(0, 4);\n          this.codingRobots = codingData.slice(0, 4);\n          this.paperRobots = paperData.slice(0, 4);\n        }\n        console.log('初始数据加载成功');\n      } catch (error) {\n        console.error('加载初始数据失败:', error);\n        this.$message.error('加载机器人数据失败');\n      } finally {\n        this.loading = false;\n      }\n    },\n    // 根据类型和起始索引加载机器人数据\n    async loadRobotsByType(type, firstIndex) {\n      try {\n        const agentload = {\n          type: type,\n          firstIndex: firstIndex\n        };\n        const response = await apiGetRobotsByType(agentload);\n        if (response.status === 200 && response.data) {\n          const robots = response.data.data;\n          return robots;\n        } else {\n          console.error('加载机器人数据失败:', response);\n          this.$message.error('加载机器人数据失败，请稍后重试');\n        }\n        return [];\n      } catch (error) {\n        console.error(`加载机器人数据失败 (type: ${type}, firstIndex: ${firstIndex}):`, error);\n        throw error;\n      }\n    },\n    // 加载推荐机器人\n    async loadRecommendedRobots() {\n      try {\n        const response = await apiGetRecommendedRobots({\n          userId: this.userId\n        });\n        if (response.status === 200 && response.data) {\n          const robots = Array.isArray(response.data) ? response.data : response.data.data || [];\n          // 确保只返回4个推荐机器人\n          return robots.slice(0, 4);\n        } else {\n          console.error('加载推荐机器人失败:', response);\n          return [];\n        }\n      } catch (error) {\n        console.error('加载推荐机器人失败:', error);\n        return [];\n      }\n    },\n    // 换一批推荐机器人\n    async refreshRecommendedRobots() {\n      if (!this.isLoggedIn || !this.userId) return;\n      try {\n        const newRecommendedRobots = await this.loadRecommendedRobots();\n        this.recommendedRobots = newRecommendedRobots;\n        console.log('推荐机器人已刷新');\n      } catch (error) {\n        console.error('刷新推荐机器人失败:', error);\n        this.$message.error('刷新推荐失败，请稍后重试');\n      }\n    },\n    async getUserSubscriptions() {\n      if (!this.userId) return;\n      try {\n        await this.fetchUserSubscriptions(this.userId);\n        console.log('获取用户订阅信息成功');\n      } catch (error) {\n        console.error('获取用户订阅信息失败:', error);\n      }\n    },\n    setSearchMode(mode) {\n      this.currentSearchMode = mode;\n      // 更新搜索类型\n      this.searchType = mode === 'name' ? 1 : 2;\n    },\n    // 处理搜索按钮点击\n    async handleSearchClick() {\n      if (!this.searchKeyword.trim()) {\n        this.$message.warning('请输入搜索关键词');\n        return;\n      }\n      this.searchInfo = this.searchKeyword.trim();\n      this.searchIndex = 0;\n      this.hasNextSearchPage = true;\n      await this.performSearch();\n    },\n    // 处理搜索框清空\n    handleSearchClear() {\n      this.showSearchResults = false;\n      this.searchResults = [];\n      this.searchInfo = '';\n      this.searchIndex = 0;\n      this.hasNextSearchPage = true;\n    },\n    // 执行搜索\n    async performSearch() {\n      this.searchLoading = true;\n      try {\n        const searchload = {\n          searchType: this.searchType,\n          searchInfo: this.searchInfo,\n          searchIndex: this.searchIndex\n        };\n        console.log('搜索请求:', searchload);\n        const response = await apiSearchAgent(searchload);\n        if (response.status === 200 && response.data) {\n          const robots = Array.isArray(response.data) ? response.data : response.data.data || [];\n          this.searchResults = robots;\n\n          // 判断是否有下一页（如果返回的数据少于16个，说明没有下一页）\n          this.hasNextSearchPage = robots.length === 16;\n          this.showSearchResults = true;\n          console.log('搜索成功，获得结果:', robots.length);\n        } else {\n          throw new Error('搜索响应格式错误');\n        }\n      } catch (error) {\n        console.error('搜索失败:', error);\n        this.$message.error('搜索失败，请稍后重试');\n      } finally {\n        this.searchLoading = false;\n      }\n    },\n    // 搜索结果上一页\n    async goToPreviousSearchPage() {\n      if (this.isFirstSearchPage || this.searchLoading) return;\n      this.searchIndex -= 16;\n      await this.performSearch();\n    },\n    // 搜索结果下一页\n    async goToNextSearchPage() {\n      if (!this.hasNextSearchPage || this.searchLoading) return;\n      this.searchIndex += 16;\n      await this.performSearch();\n    },\n    async showCategoryDetail(categoryType) {\n      // 映射分类到类型和标题\n      const categoryConfig = {\n        recommended: {\n          type: 1,\n          title: '推荐机器人'\n        },\n        roleplay: {\n          type: 1,\n          title: '角色扮演机器人'\n        },\n        coding: {\n          type: 2,\n          title: '代码编程机器人'\n        },\n        paper: {\n          type: 3,\n          title: '论文修改机器人'\n        }\n      };\n      const config = categoryConfig[categoryType];\n      if (!config) {\n        console.error('未知的分类类型:', categoryType);\n        return;\n      }\n      this.currentCategoryType = config.type;\n      this.categoryDialogTitle = config.title;\n      this.currentFirstIndex = 0;\n      this.hasNextPage = true;\n\n      // 加载第一页数据\n      await this.loadCategoryPageData();\n      this.categoryDialogVisible = true;\n    },\n    // 加载分类页面数据\n    async loadCategoryPageData() {\n      this.paginationLoading = true;\n      try {\n        const robots = await this.loadRobotsByType(this.currentCategoryType, this.currentFirstIndex);\n        this.categoryDetailRobots = robots;\n\n        // 判断是否有下一页（如果返回的数据少于8个，说明没有下一页）\n        this.hasNextPage = robots.length === 8;\n        console.log(`加载分类数据成功 (type: ${this.currentCategoryType}, firstIndex: ${this.currentFirstIndex})`);\n      } catch (error) {\n        console.error('加载分类数据失败:', error);\n        this.$message.error('加载数据失败，请稍后重试');\n      } finally {\n        this.paginationLoading = false;\n      }\n    },\n    // 上一页\n    async goToPreviousPage() {\n      if (this.isFirstPage || this.paginationLoading) return;\n      this.currentFirstIndex -= 8;\n      await this.loadCategoryPageData();\n    },\n    // 下一页\n    async goToNextPage() {\n      if (!this.hasNextPage || this.paginationLoading) return;\n      this.currentFirstIndex += 8;\n      await this.loadCategoryPageData();\n    },\n    showRobotDetail(robotId) {\n      this.currentRobotId = robotId;\n      this.robotDetailVisible = true;\n    },\n    async handleRobotDetailClose() {\n      // 关闭机器人详情弹窗时，更新页面数据\n      this.robotDetailVisible = false;\n      try {\n        // 1. 更新用户订阅数据（可能在详情页面中进行了订阅操作）\n        if (this.userId) {\n          await this.$store.dispatch('agent/fetchUserSubscriptions', this.userId);\n        }\n\n        // 2. 重新加载初始数据（包含最新的订阅数量）\n        await this.loadInitialData();\n\n        // 3. 如果分类详情弹窗是打开的，也更新分类数据\n        if (this.categoryDialogVisible && this.currentCategoryType) {\n          await this.loadCategoryPageData();\n        }\n\n        // 4. 如果当前显示搜索结果，也更新搜索结果\n        if (this.showSearchResults && this.searchInfo) {\n          await this.performSearch();\n        }\n\n        // 4. 强制更新页面，确保所有状态正确显示\n        this.$forceUpdate();\n        console.log('机器人详情弹窗关闭，页面数据已更新');\n      } catch (error) {\n        console.error('更新页面数据失败:', error);\n      }\n    },\n    subscribeRobot(robotId) {\n      //if (!this.isLoggedIn) {\n      //  this.$message.warning('请先登录');\n      //  return;\n      //}\n      // 如果已订阅，则进入对话页面\n      if (this.isSubscribed(robotId)) {\n        this.enterChatWithRobot(robotId);\n        return;\n      }\n\n      // 查找机器人（包括搜索结果）\n      let robot = this.allRobots.find(r => r.id === robotId);\n      if (!robot && this.categoryDialogVisible) {\n        robot = this.categoryDetailRobots.find(r => r.id === robotId);\n      }\n      if (!robot && this.showSearchResults) {\n        robot = this.searchResults.find(r => r.id === robotId);\n      }\n      if (robot) {\n        this.currentRobotForSubscription = robot;\n        this.subscriptionDialogVisible = true;\n      }\n    },\n    // 新增方法：进入与机器人的对话\n    enterChatWithRobot(robotId) {\n      this.$router.push({\n        name: 'ConversationHistory',\n        params: {\n          id: robotId\n        }\n      });\n    },\n    // 订阅机器人\n    async handleSubscriptionConfirm(duration, points) {\n      if (!this.currentRobotForSubscription) return;\n      try {\n        const currentTime = this.formatDateTime(new Date());\n        const payload = {\n          userId: this.$store.state.user.userId,\n          agentId: this.currentRobotForSubscription.id,\n          startTime: currentTime,\n          duration: duration,\n          subscriptionType: 1\n        };\n        console.log('请求 payload:', payload);\n        console.log('订阅时长:', duration);\n        console.log('所需积分:', points);\n        const response = await apiSubscribeAgent(payload);\n        console.log('订阅信息:', payload);\n        if (response.status === 200) {\n          this.$message.success('订阅成功！');\n\n          // 1. 更新用户订阅数据\n          await this.$store.dispatch('agent/fetchUserSubscriptions', this.$store.state.user.userId);\n\n          // 2. 重新加载初始数据（包含最新的订阅数量）\n          await this.loadInitialData();\n\n          // 3. 如果分类详情弹窗是打开的，也更新分类数据\n          if (this.categoryDialogVisible && this.currentCategoryType) {\n            await this.loadCategoryPageData();\n          }\n\n          // 4. 如果当前显示搜索结果，也更新搜索结果\n          if (this.showSearchResults && this.searchInfo) {\n            await this.performSearch();\n          }\n          console.log('订阅成功后的用户订阅列表:', this.$store.state.agent.haveSubscribed);\n          console.log('当前机器人ID:', this.currentRobotForSubscription.id);\n          console.log('检查是否已订阅:', this.isSubscribed(this.currentRobotForSubscription.id));\n\n          // 3. 强制更新页面，确保所有状态正确显示\n          this.$forceUpdate();\n\n          // 4. 最后关闭弹窗\n          this.closeSubscriptionDialog();\n          console.log('订阅成功!!!:', response);\n        }\n      } catch (error) {\n        console.error('订阅失败:', error);\n        if (error.code === 400) {\n          this.$message.error(error.message);\n        } else if (error.code === 401) {\n          this.$message.error('请先登录');\n        } else {\n          this.$message.error('订阅失败，请稍后重试');\n        }\n      }\n    },\n    closeSubscriptionDialog() {\n      this.subscriptionDialogVisible = false;\n      this.currentRobotForSubscription = null;\n    },\n    formatDateTime(date) {\n      // 使用ISO 8601格式，与后端API保持一致\n      return date.toISOString();\n    },\n    isSubscribed(robotId) {\n      // 直接检查后端返回的订阅状态，不在前端进行过期检查\n      return this.haveSubscribed.some(sub => sub.agent_id === robotId && sub.status);\n    },\n    getRobotsByType(type) {\n      // 这个方法现在主要用于搜索，返回相应类型的机器人\n      switch (type) {\n        case 'recommended':\n          return this.recommendedRobots;\n        case 'roleplay':\n          return this.rolePlayRobots;\n        case 'coding':\n          return this.codingRobots;\n        case 'paper':\n          return this.paperRobots;\n        default:\n          return [];\n      }\n    },\n    getRobotImage(type) {\n      switch (type) {\n        case 1:\n          return require('@/assets/images/Agents/textAgent.png');\n        case 2:\n          return require('@/assets/images/Agents/imageAgent.png');\n        case 3:\n          return require('@/assets/images/Agents/videoAgent.png');\n        default:\n          return require('@/assets/images/Agents/baseAgent.png');\n      }\n    },\n    truncate(text, length = 50) {\n      if (!text) return '';\n      return text.length > length ? text.slice(0, length) + '...' : text;\n    },\n    formatprice(points) {\n      // 当points为0时，返回\"免费\"\n      if (points === 0) {\n        return '免费';\n      }\n      return `${points} 积分`;\n    }\n  }\n};","map":{"version":3,"names":["mapActions","mapState","subscribeAgent","apiSubscribeAgent","getRobotsByType","apiGetRobotsByType","searchAgent","apiSearchAgent","getRecommendedRobots","apiGetRecommendedRobots","RobotDetailDialog","SubscriptionSelector","name","components","data","searchKeyword","currentSearchMode","showSearchResults","searchResults","categoryDialogVisible","categoryDialogTitle","categoryDetailRobots","subscriptionDialogVisible","currentRobotForSubscription","loading","robotDetailVisible","currentRobotId","recommendedRobots","rolePlayRobots","codingRobots","paperRobots","currentCategoryType","currentFirstIndex","paginationLoading","hasNextPage","searchType","searchInfo","searchIndex","searchLoading","hasNextSearchPage","subscriptionCheckInterval","computed","haveSubscribed","state","currentSearchModeText","modes","description","allRobots","currentPageNumber","Math","floor","isFirstPage","currentSearchPageNumber","isFirstSearchPage","watch","newVal","trim","handleSearchClear","created","loadInitialData","getUserSubscriptions","mounted","setInterval","userId","beforeDestroy","clearInterval","methods","promises","loadRobotsByType","isLoggedIn","unshift","loadRecommendedRobots","recommendedData","rolePlayData","codingData","paperData","Promise","all","slice","console","log","error","$message","type","firstIndex","agentload","response","status","robots","Array","isArray","refreshRecommendedRobots","newRecommendedRobots","fetchUserSubscriptions","setSearchMode","mode","handleSearchClick","warning","performSearch","searchload","length","Error","goToPreviousSearchPage","goToNextSearchPage","showCategoryDetail","categoryType","categoryConfig","recommended","title","roleplay","coding","paper","config","loadCategoryPageData","goToPreviousPage","goToNextPage","showRobotDetail","robotId","handleRobotDetailClose","$store","dispatch","$forceUpdate","subscribeRobot","isSubscribed","enterChatWithRobot","robot","find","r","id","$router","push","params","handleSubscriptionConfirm","duration","points","currentTime","formatDateTime","Date","payload","user","agentId","startTime","subscriptionType","success","agent","closeSubscriptionDialog","code","message","date","toISOString","some","sub","agent_id","getRobotImage","require","truncate","text","formatprice"],"sources":["src/views/RobotMarketPage.vue"],"sourcesContent":["<template>\n  <div class=\"robot-market\">\n    <!-- 搜索区域 -->\n    <div class=\"search-container\">\n      <div class=\"search-wrapper\">\n        <div class=\"search-mode-selector\">\n          <el-dropdown @command=\"setSearchMode\">\n            <el-button class=\"search-mode-btn\">\n              {{ currentSearchModeText }}\n              <i class=\"el-icon-arrow-down\"></i>\n            </el-button>\n            <el-dropdown-menu slot=\"dropdown\">\n              <el-dropdown-item command=\"name\">按名称搜索</el-dropdown-item>\n              <el-dropdown-item command=\"description\"\n                >按描述搜索</el-dropdown-item\n              >\n            </el-dropdown-menu>\n          </el-dropdown>\n        </div>\n        <el-input\n          v-model=\"searchKeyword\"\n          class=\"search-input\"\n          placeholder=\"搜索机器人...\"\n          @clear=\"handleSearchClear\"\n          clearable\n        >\n          <el-button\n            slot=\"append\"\n            icon=\"el-icon-search\"\n            @click=\"handleSearchClick\"\n          ></el-button>\n        </el-input>\n      </div>\n    </div>\n\n    <!-- 搜索结果 -->\n    <div v-if=\"showSearchResults\" class=\"search-results\">\n      <div v-loading=\"searchLoading\" class=\"search-results-container\">\n        <h2 class=\"section-title\">\n          搜索结果 (第{{ currentSearchPageNumber }}页，共{{\n            searchResults.length\n          }}个)\n        </h2>\n        <div class=\"robots-grid\">\n          <el-card\n            v-for=\"robot in searchResults\"\n            :key=\"robot.id\"\n            class=\"robot-card\"\n            @click.native=\"showRobotDetail(robot.id)\"\n          >\n            <div class=\"robot-header\">\n              <img\n                :src=\"getRobotImage(robot.type)\"\n                alt=\"robot\"\n                class=\"robot-logo\"\n              />\n              <div class=\"robot-name\">{{ robot.name }}</div>\n            </div>\n            <div class=\"robot-description\">\n              {{ truncate(robot.description, 80) }}\n            </div>\n            <div class=\"robot-rating-price\">\n              <div class=\"robot-subscription\">\n                <i class=\"el-icon-user\" style=\"color: #409eff\"></i>\n                {{ robot.subscriptionCnt || 0 }} 人订阅\n              </div>\n              <div class=\"robot-price\">\n                {{ formatprice(robot.price) }}\n              </div>\n            </div>\n            <div class=\"robot-actions\">\n              <el-button size=\"mini\" @click.stop=\"showRobotDetail(robot.id)\">\n                查看详情\n              </el-button>\n              <el-button\n                type=\"primary\"\n                size=\"mini\"\n                :class=\"{ subscribed: isSubscribed(robot.id) }\"\n                @click.stop=\"subscribeRobot(robot.id)\"\n              >\n                {{ isSubscribed(robot.id) ? '开始对话' : '订阅' }}\n              </el-button>\n            </div>\n          </el-card>\n        </div>\n\n        <!-- 搜索结果分页控件 -->\n        <div class=\"pagination-controls\">\n          <el-button\n            :disabled=\"isFirstSearchPage || searchLoading\"\n            :class=\"['pagination-btn', { disabled: isFirstSearchPage }]\"\n            @click=\"goToPreviousSearchPage\"\n          >\n            <i class=\"el-icon-arrow-left\"></i>\n            上一页\n          </el-button>\n\n          <span class=\"page-info\">第 {{ currentSearchPageNumber }} 页</span>\n\n          <el-button\n            :disabled=\"!hasNextSearchPage || searchLoading\"\n            :class=\"['pagination-btn', { disabled: !hasNextSearchPage }]\"\n            @click=\"goToNextSearchPage\"\n          >\n            下一页\n            <i class=\"el-icon-arrow-right\"></i>\n          </el-button>\n        </div>\n      </div>\n    </div>\n\n    <!-- 机器人分类展示 -->\n    <div v-else class=\"robots-container\">\n      <!-- 推荐机器人 -->\n      <div v-if=\"isLoggedIn\" class=\"category-section\">\n        <div class=\"category-header\">\n          <h3 class=\"category-title\">\n            <i class=\"el-icon-collection-tag\"></i>\n            推荐机器人\n          </h3>\n          <el-button class=\"view-more-btn\" @click=\"refreshRecommendedRobots\">\n            换一批\n          </el-button>\n        </div>\n        <div class=\"robots-grid\">\n          <el-card\n            v-for=\"robot in recommendedRobots\"\n            :key=\"robot.id\"\n            class=\"robot-card\"\n            @click.native=\"showRobotDetail(robot.id)\"\n          >\n            <div class=\"robot-header\">\n              <img\n                :src=\"getRobotImage(robot.type)\"\n                alt=\"robot\"\n                class=\"robot-logo\"\n              />\n              <div class=\"robot-name\">{{ robot.name }}</div>\n            </div>\n            <div class=\"robot-description\">\n              {{ truncate(robot.description, 80) }}\n            </div>\n            <div class=\"robot-rating-price\">\n              <div class=\"robot-subscription\">\n                <i class=\"el-icon-user\" style=\"color: #409eff\"></i>\n                {{ robot.subscriptionCnt || 0 }} 人订阅\n              </div>\n              <div class=\"robot-price\">\n                {{ formatprice(robot.price) }}\n              </div>\n            </div>\n            <div class=\"robot-actions\">\n              <el-button size=\"mini\" @click.stop=\"showRobotDetail(robot.id)\">\n                查看详情\n              </el-button>\n              <el-button\n                type=\"primary\"\n                size=\"mini\"\n                :class=\"{ subscribed: isSubscribed(robot.id) }\"\n                @click.stop=\"subscribeRobot(robot.id)\"\n              >\n                {{ isSubscribed(robot.id) ? '开始对话' : '订阅' }}\n              </el-button>\n            </div>\n          </el-card>\n        </div>\n      </div>\n\n      <!-- 角色扮演机器人 -->\n      <div class=\"category-section\">\n        <div class=\"category-header\">\n          <h3 class=\"category-title\">\n            <i class=\"el-icon-headset\"></i>\n            角色扮演机器人\n          </h3>\n          <el-button\n            class=\"view-more-btn\"\n            @click=\"showCategoryDetail('roleplay')\"\n          >\n            查看更多\n          </el-button>\n        </div>\n        <div class=\"robots-grid\">\n          <el-card\n            v-for=\"robot in rolePlayRobots\"\n            :key=\"robot.id\"\n            class=\"robot-card\"\n            @click.native=\"showRobotDetail(robot.id)\"\n          >\n            <div class=\"robot-header\">\n              <img\n                :src=\"getRobotImage(robot.type)\"\n                alt=\"robot\"\n                class=\"robot-logo\"\n              />\n              <div class=\"robot-name\">{{ robot.name }}</div>\n            </div>\n            <div class=\"robot-description\">\n              {{ truncate(robot.description, 80) }}\n            </div>\n            <div class=\"robot-rating-price\">\n              <div class=\"robot-subscription\">\n                <i class=\"el-icon-user\" style=\"color: #409eff\"></i>\n                {{ robot.subscriptionCnt || 0 }} 人订阅\n              </div>\n              <div class=\"robot-price\">\n                {{ formatprice(robot.price) }}\n              </div>\n            </div>\n            <div class=\"robot-actions\">\n              <el-button size=\"mini\" @click.stop=\"showRobotDetail(robot.id)\">\n                查看详情\n              </el-button>\n              <el-button\n                type=\"primary\"\n                size=\"mini\"\n                :class=\"{ subscribed: isSubscribed(robot.id) }\"\n                @click.stop=\"subscribeRobot(robot.id)\"\n              >\n                {{ isSubscribed(robot.id) ? '开始对话' : '订阅' }}\n              </el-button>\n            </div>\n          </el-card>\n        </div>\n      </div>\n\n      <!-- 代码编程机器人 -->\n      <div class=\"category-section\">\n        <div class=\"category-header\">\n          <h3 class=\"category-title\">\n            <i class=\"el-icon-postcard\"></i>\n            代码编程机器人\n          </h3>\n          <el-button\n            class=\"view-more-btn\"\n            @click=\"showCategoryDetail('coding')\"\n          >\n            查看更多\n          </el-button>\n        </div>\n        <div class=\"robots-grid\">\n          <el-card\n            v-for=\"robot in codingRobots\"\n            :key=\"robot.id\"\n            class=\"robot-card\"\n            @click.native=\"showRobotDetail(robot.id)\"\n          >\n            <div class=\"robot-header\">\n              <img\n                :src=\"getRobotImage(robot.type)\"\n                alt=\"robot\"\n                class=\"robot-logo\"\n              />\n              <div class=\"robot-name\">{{ robot.name }}</div>\n            </div>\n            <div class=\"robot-description\">\n              {{ truncate(robot.description, 80) }}\n            </div>\n            <div class=\"robot-rating-price\">\n              <div class=\"robot-subscription\">\n                <i class=\"el-icon-user\" style=\"color: #409eff\"></i>\n                {{ robot.subscriptionCnt || 0 }} 人订阅\n              </div>\n              <div class=\"robot-price\">\n                {{ formatprice(robot.price) }}\n              </div>\n            </div>\n            <div class=\"robot-actions\">\n              <el-button size=\"mini\" @click.stop=\"showRobotDetail(robot.id)\">\n                查看详情\n              </el-button>\n              <el-button\n                type=\"primary\"\n                size=\"mini\"\n                :class=\"{ subscribed: isSubscribed(robot.id) }\"\n                @click.stop=\"subscribeRobot(robot.id)\"\n              >\n                {{ isSubscribed(robot.id) ? '开始对话' : '订阅' }}\n              </el-button>\n            </div>\n          </el-card>\n        </div>\n      </div>\n\n      <!-- 论文修改机器人 -->\n      <div class=\"category-section\">\n        <div class=\"category-header\">\n          <h3 class=\"category-title\">\n            <i class=\"el-icon-document\"></i>\n            论文修改机器人\n          </h3>\n          <el-button class=\"view-more-btn\" @click=\"showCategoryDetail('paper')\">\n            查看更多\n          </el-button>\n        </div>\n        <div class=\"robots-grid\">\n          <el-card\n            v-for=\"robot in paperRobots\"\n            :key=\"robot.id\"\n            class=\"robot-card\"\n            @click.native=\"showRobotDetail(robot.id)\"\n          >\n            <div class=\"robot-header\">\n              <img\n                :src=\"getRobotImage(robot.type)\"\n                alt=\"robot\"\n                class=\"robot-logo\"\n              />\n              <div class=\"robot-name\">{{ robot.name }}</div>\n            </div>\n            <div class=\"robot-description\">\n              {{ truncate(robot.description, 80) }}\n            </div>\n            <div class=\"robot-rating-price\">\n              <div class=\"robot-subscription\">\n                <i class=\"el-icon-user\" style=\"color: #409eff\"></i>\n                {{ robot.subscriptionCnt || 0 }} 人订阅\n              </div>\n              <div class=\"robot-price\">\n                {{ formatprice(robot.price) }}\n              </div>\n            </div>\n            <div class=\"robot-actions\">\n              <el-button size=\"mini\" @click.stop=\"showRobotDetail(robot.id)\">\n                查看详情\n              </el-button>\n              <el-button\n                type=\"primary\"\n                size=\"mini\"\n                :class=\"{ subscribed: isSubscribed(robot.id) }\"\n                @click.stop=\"subscribeRobot(robot.id)\"\n              >\n                {{ isSubscribed(robot.id) ? '开始对话' : '订阅' }}\n              </el-button>\n            </div>\n          </el-card>\n        </div>\n      </div>\n    </div>\n\n    <!-- 分类详情对话框 -->\n    <el-dialog\n      :title=\"categoryDialogTitle\"\n      :visible.sync=\"categoryDialogVisible\"\n      width=\"80%\"\n      :close-on-click-modal=\"false\"\n      :close-on-press-escape=\"false\"\n    >\n      <div v-loading=\"paginationLoading\" class=\"category-detail-container\">\n        <div class=\"category-detail-grid\">\n          <el-card\n            v-for=\"robot in categoryDetailRobots\"\n            :key=\"robot.id\"\n            class=\"robot-card\"\n            @click.native=\"showRobotDetail(robot.id)\"\n          >\n            <div class=\"robot-header\">\n              <img\n                :src=\"getRobotImage(robot.type)\"\n                alt=\"robot\"\n                class=\"robot-logo\"\n              />\n              <div class=\"robot-name\">{{ robot.name }}</div>\n            </div>\n            <div class=\"robot-description\">\n              {{ truncate(robot.description, 80) }}\n            </div>\n            <div class=\"robot-rating-price\">\n              <div class=\"robot-subscription\">\n                <i class=\"el-icon-user\" style=\"color: #409eff\"></i>\n                {{ robot.subscriptionCnt || 0 }} 人订阅\n              </div>\n              <div class=\"robot-price\">\n                {{ formatprice(robot.price) }}\n              </div>\n            </div>\n            <div class=\"robot-actions\">\n              <el-button size=\"mini\" @click.stop=\"showRobotDetail(robot.id)\">\n                查看详情\n              </el-button>\n              <el-button\n                type=\"primary\"\n                size=\"mini\"\n                :class=\"{ subscribed: isSubscribed(robot.id) }\"\n                @click.stop=\"subscribeRobot(robot.id)\"\n              >\n                {{ isSubscribed(robot.id) ? '开始对话' : '订阅' }}\n              </el-button>\n            </div>\n          </el-card>\n        </div>\n\n        <!-- 分页控件 -->\n        <div class=\"pagination-controls\">\n          <el-button\n            :disabled=\"isFirstPage || paginationLoading\"\n            :class=\"['pagination-btn', { disabled: isFirstPage }]\"\n            @click=\"goToPreviousPage\"\n          >\n            <i class=\"el-icon-arrow-left\"></i>\n            上一页\n          </el-button>\n\n          <span class=\"page-info\">第 {{ currentPageNumber }} 页</span>\n\n          <el-button\n            :disabled=\"!hasNextPage || paginationLoading\"\n            :class=\"['pagination-btn', { disabled: !hasNextPage }]\"\n            @click=\"goToNextPage\"\n          >\n            下一页\n            <i class=\"el-icon-arrow-right\"></i>\n          </el-button>\n        </div>\n      </div>\n    </el-dialog>\n\n    <!-- 订阅确认对话框 -->\n    <el-dialog\n      title=\"订阅确认\"\n      :visible.sync=\"subscriptionDialogVisible\"\n      width=\"400px\"\n      center\n      :close-on-click-modal=\"false\"\n      :close-on-press-escape=\"false\"\n    >\n      <subscription-selector\n        :robotId=\"\n          currentRobotForSubscription ? currentRobotForSubscription.id : 0\n        \"\n        :price=\"\n          currentRobotForSubscription\n            ? currentRobotForSubscription.price !== undefined &&\n              currentRobotForSubscription.price !== null\n              ? currentRobotForSubscription.price\n              : 1\n            : 1\n        \"\n        :onConfirm=\"handleSubscriptionConfirm\"\n        :onClose=\"closeSubscriptionDialog\"\n      />\n    </el-dialog>\n\n    <!-- 机器人详情弹窗 -->\n    <robot-detail-dialog\n      :visible=\"robotDetailVisible\"\n      :robotId=\"currentRobotId\"\n      @close=\"handleRobotDetailClose\"\n      @show-robot=\"showRobotDetail\"\n    />\n  </div>\n</template>\n\n<script>\nimport { mapActions, mapState } from 'vuex';\nimport {\n  subscribeAgent as apiSubscribeAgent,\n  getRobotsByType as apiGetRobotsByType,\n  searchAgent as apiSearchAgent,\n  getRecommendedRobots as apiGetRecommendedRobots,\n} from '../utils/api';\nimport RobotDetailDialog from './RobotDetailPage.vue';\nimport SubscriptionSelector from '@/components/SubscriptionSelector.vue';\n\nexport default {\n  name: 'RobotMarketPage',\n  components: {\n    RobotDetailDialog,\n    SubscriptionSelector,\n  },\n  data() {\n    return {\n      searchKeyword: '',\n      currentSearchMode: 'name',\n      showSearchResults: false,\n      searchResults: [],\n      categoryDialogVisible: false,\n      categoryDialogTitle: '',\n      categoryDetailRobots: [],\n      subscriptionDialogVisible: false,\n      currentRobotForSubscription: null,\n      loading: false,\n      robotDetailVisible: false,\n      currentRobotId: null,\n      // 新增的分页相关数据\n      recommendedRobots: [], // 推荐机器人前4个\n      rolePlayRobots: [], // 角色扮演机器人前4个\n      codingRobots: [], // 代码编程机器人前4个\n      paperRobots: [], // 论文修改机器人前4个\n      currentCategoryType: null, // 当前查看的分类类型\n      currentFirstIndex: 0, // 当前分页的起始索引\n      paginationLoading: false, // 分页加载状态\n      hasNextPage: true, // 是否有下一页\n      // 搜索相关数据\n      searchType: 1, // 搜索类型：1=名称，2=描述\n      searchInfo: '', // 当前搜索关键词\n      searchIndex: 0, // 搜索结果起始索引\n      searchLoading: false, // 搜索加载状态\n      hasNextSearchPage: true, // 是否有下一页搜索结果\n      subscriptionCheckInterval: null, // 订阅状态检查定时器\n    };\n  },\n  computed: {\n    ...mapState('user', ['isLoggedIn', 'userName', 'userId']),\n    ...mapState('agent', {\n      haveSubscribed: (state) => state.haveSubscribed,\n    }),\n    currentSearchModeText() {\n      const modes = {\n        name: '按名称搜索',\n        description: '按描述搜索',\n      };\n      return modes[this.currentSearchMode];\n    },\n    allRobots() {\n      return [\n        ...this.recommendedRobots,\n        ...this.rolePlayRobots,\n        ...this.codingRobots,\n        ...this.paperRobots,\n      ];\n    },\n    currentPageNumber() {\n      return Math.floor(this.currentFirstIndex / 8) + 1;\n    },\n    isFirstPage() {\n      return this.currentFirstIndex === 0;\n    },\n    // 搜索相关计算属性\n    currentSearchPageNumber() {\n      return Math.floor(this.searchIndex / 16) + 1;\n    },\n    isFirstSearchPage() {\n      return this.searchIndex === 0;\n    },\n  },\n  watch: {\n    // 监听搜索框内容变化\n    searchKeyword(newVal) {\n      if (!newVal || newVal.trim() === '') {\n        this.handleSearchClear();\n      }\n    },\n  },\n  created() {\n    // 初始化搜索类型\n    this.searchType = this.currentSearchMode === 'name' ? 1 : 2;\n\n    this.loadInitialData();\n    this.getUserSubscriptions();\n  },\n  mounted() {\n    // 设置定时器，每5分钟检查一次订阅状态\n    this.subscriptionCheckInterval = setInterval(\n      () => {\n        if (this.userId) {\n          this.getUserSubscriptions();\n        }\n      },\n      5 * 60 * 1000\n    ); // 5分钟\n  },\n  beforeDestroy() {\n    // 组件销毁前清理定时器\n    if (this.subscriptionCheckInterval) {\n      clearInterval(this.subscriptionCheckInterval);\n    }\n  },\n  methods: {\n    ...mapActions('agent', ['fetchAgentDetail', 'fetchUserSubscriptions']),\n    // 加载初始数据（首页展示的前4个机器人）\n    async loadInitialData() {\n      this.loading = true;\n      try {\n        // 并行加载推荐机器人和其他类型的机器人\n        const promises = [\n          this.loadRobotsByType(1, 0), // 角色扮演机器人 type=1\n          this.loadRobotsByType(2, 0), // 代码编程机器人 type=2\n          this.loadRobotsByType(3, 0), // 论文修改机器人 type=3\n        ];\n\n        // 如果用户已登录，加载推荐机器人\n        if (this.isLoggedIn && this.userId) {\n          promises.unshift(this.loadRecommendedRobots());\n          const [recommendedData, rolePlayData, codingData, paperData] =\n            await Promise.all(promises);\n          this.recommendedRobots = recommendedData;\n          this.rolePlayRobots = rolePlayData.slice(0, 4);\n          this.codingRobots = codingData.slice(0, 4);\n          this.paperRobots = paperData.slice(0, 4);\n        } else {\n          const [rolePlayData, codingData, paperData] =\n            await Promise.all(promises);\n          this.recommendedRobots = [];\n          this.rolePlayRobots = rolePlayData.slice(0, 4);\n          this.codingRobots = codingData.slice(0, 4);\n          this.paperRobots = paperData.slice(0, 4);\n        }\n\n        console.log('初始数据加载成功');\n      } catch (error) {\n        console.error('加载初始数据失败:', error);\n        this.$message.error('加载机器人数据失败');\n      } finally {\n        this.loading = false;\n      }\n    },\n\n    // 根据类型和起始索引加载机器人数据\n    async loadRobotsByType(type, firstIndex) {\n      try {\n        const agentload = {\n          type: type,\n          firstIndex: firstIndex,\n        };\n        const response = await apiGetRobotsByType(agentload);\n\n        if (response.status === 200 && response.data) {\n          const robots = response.data.data;\n          return robots;\n        } else {\n          console.error('加载机器人数据失败:', response);\n          this.$message.error('加载机器人数据失败，请稍后重试');\n        }\n        return [];\n      } catch (error) {\n        console.error(\n          `加载机器人数据失败 (type: ${type}, firstIndex: ${firstIndex}):`,\n          error\n        );\n        throw error;\n      }\n    },\n\n    // 加载推荐机器人\n    async loadRecommendedRobots() {\n      try {\n        const response = await apiGetRecommendedRobots({ userId: this.userId });\n\n        if (response.status === 200 && response.data) {\n          const robots = Array.isArray(response.data)\n            ? response.data\n            : response.data.data || [];\n          // 确保只返回4个推荐机器人\n          return robots.slice(0, 4);\n        } else {\n          console.error('加载推荐机器人失败:', response);\n          return [];\n        }\n      } catch (error) {\n        console.error('加载推荐机器人失败:', error);\n        return [];\n      }\n    },\n\n    // 换一批推荐机器人\n    async refreshRecommendedRobots() {\n      if (!this.isLoggedIn || !this.userId) return;\n\n      try {\n        const newRecommendedRobots = await this.loadRecommendedRobots();\n        this.recommendedRobots = newRecommendedRobots;\n        console.log('推荐机器人已刷新');\n      } catch (error) {\n        console.error('刷新推荐机器人失败:', error);\n        this.$message.error('刷新推荐失败，请稍后重试');\n      }\n    },\n\n    async getUserSubscriptions() {\n      if (!this.userId) return;\n      try {\n        await this.fetchUserSubscriptions(this.userId);\n        console.log('获取用户订阅信息成功');\n      } catch (error) {\n        console.error('获取用户订阅信息失败:', error);\n      }\n    },\n    setSearchMode(mode) {\n      this.currentSearchMode = mode;\n      // 更新搜索类型\n      this.searchType = mode === 'name' ? 1 : 2;\n    },\n    // 处理搜索按钮点击\n    async handleSearchClick() {\n      if (!this.searchKeyword.trim()) {\n        this.$message.warning('请输入搜索关键词');\n        return;\n      }\n\n      this.searchInfo = this.searchKeyword.trim();\n      this.searchIndex = 0;\n      this.hasNextSearchPage = true;\n\n      await this.performSearch();\n    },\n\n    // 处理搜索框清空\n    handleSearchClear() {\n      this.showSearchResults = false;\n      this.searchResults = [];\n      this.searchInfo = '';\n      this.searchIndex = 0;\n      this.hasNextSearchPage = true;\n    },\n\n    // 执行搜索\n    async performSearch() {\n      this.searchLoading = true;\n      try {\n        const searchload = {\n          searchType: this.searchType,\n          searchInfo: this.searchInfo,\n          searchIndex: this.searchIndex,\n        };\n\n        console.log('搜索请求:', searchload);\n        const response = await apiSearchAgent(searchload);\n\n        if (response.status === 200 && response.data) {\n          const robots = Array.isArray(response.data)\n            ? response.data\n            : response.data.data || [];\n          this.searchResults = robots;\n\n          // 判断是否有下一页（如果返回的数据少于16个，说明没有下一页）\n          this.hasNextSearchPage = robots.length === 16;\n\n          this.showSearchResults = true;\n          console.log('搜索成功，获得结果:', robots.length);\n        } else {\n          throw new Error('搜索响应格式错误');\n        }\n      } catch (error) {\n        console.error('搜索失败:', error);\n        this.$message.error('搜索失败，请稍后重试');\n      } finally {\n        this.searchLoading = false;\n      }\n    },\n\n    // 搜索结果上一页\n    async goToPreviousSearchPage() {\n      if (this.isFirstSearchPage || this.searchLoading) return;\n\n      this.searchIndex -= 16;\n      await this.performSearch();\n    },\n\n    // 搜索结果下一页\n    async goToNextSearchPage() {\n      if (!this.hasNextSearchPage || this.searchLoading) return;\n\n      this.searchIndex += 16;\n      await this.performSearch();\n    },\n    async showCategoryDetail(categoryType) {\n      // 映射分类到类型和标题\n      const categoryConfig = {\n        recommended: { type: 1, title: '推荐机器人' },\n        roleplay: { type: 1, title: '角色扮演机器人' },\n        coding: { type: 2, title: '代码编程机器人' },\n        paper: { type: 3, title: '论文修改机器人' },\n      };\n\n      const config = categoryConfig[categoryType];\n      if (!config) {\n        console.error('未知的分类类型:', categoryType);\n        return;\n      }\n\n      this.currentCategoryType = config.type;\n      this.categoryDialogTitle = config.title;\n      this.currentFirstIndex = 0;\n      this.hasNextPage = true;\n\n      // 加载第一页数据\n      await this.loadCategoryPageData();\n      this.categoryDialogVisible = true;\n    },\n\n    // 加载分类页面数据\n    async loadCategoryPageData() {\n      this.paginationLoading = true;\n      try {\n        const robots = await this.loadRobotsByType(\n          this.currentCategoryType,\n          this.currentFirstIndex\n        );\n        this.categoryDetailRobots = robots;\n\n        // 判断是否有下一页（如果返回的数据少于8个，说明没有下一页）\n        this.hasNextPage = robots.length === 8;\n\n        console.log(\n          `加载分类数据成功 (type: ${this.currentCategoryType}, firstIndex: ${this.currentFirstIndex})`\n        );\n      } catch (error) {\n        console.error('加载分类数据失败:', error);\n        this.$message.error('加载数据失败，请稍后重试');\n      } finally {\n        this.paginationLoading = false;\n      }\n    },\n\n    // 上一页\n    async goToPreviousPage() {\n      if (this.isFirstPage || this.paginationLoading) return;\n\n      this.currentFirstIndex -= 8;\n      await this.loadCategoryPageData();\n    },\n\n    // 下一页\n    async goToNextPage() {\n      if (!this.hasNextPage || this.paginationLoading) return;\n\n      this.currentFirstIndex += 8;\n      await this.loadCategoryPageData();\n    },\n    showRobotDetail(robotId) {\n      this.currentRobotId = robotId;\n      this.robotDetailVisible = true;\n    },\n    async handleRobotDetailClose() {\n      // 关闭机器人详情弹窗时，更新页面数据\n      this.robotDetailVisible = false;\n\n      try {\n        // 1. 更新用户订阅数据（可能在详情页面中进行了订阅操作）\n        if (this.userId) {\n          await this.$store.dispatch(\n            'agent/fetchUserSubscriptions',\n            this.userId\n          );\n        }\n\n        // 2. 重新加载初始数据（包含最新的订阅数量）\n        await this.loadInitialData();\n\n        // 3. 如果分类详情弹窗是打开的，也更新分类数据\n        if (this.categoryDialogVisible && this.currentCategoryType) {\n          await this.loadCategoryPageData();\n        }\n\n        // 4. 如果当前显示搜索结果，也更新搜索结果\n        if (this.showSearchResults && this.searchInfo) {\n          await this.performSearch();\n        }\n\n        // 4. 强制更新页面，确保所有状态正确显示\n        this.$forceUpdate();\n\n        console.log('机器人详情弹窗关闭，页面数据已更新');\n      } catch (error) {\n        console.error('更新页面数据失败:', error);\n      }\n    },\n    subscribeRobot(robotId) {\n      //if (!this.isLoggedIn) {\n      //  this.$message.warning('请先登录');\n      //  return;\n      //}\n      // 如果已订阅，则进入对话页面\n      if (this.isSubscribed(robotId)) {\n        this.enterChatWithRobot(robotId);\n        return;\n      }\n\n      // 查找机器人（包括搜索结果）\n      let robot = this.allRobots.find((r) => r.id === robotId);\n      if (!robot && this.categoryDialogVisible) {\n        robot = this.categoryDetailRobots.find((r) => r.id === robotId);\n      }\n      if (!robot && this.showSearchResults) {\n        robot = this.searchResults.find((r) => r.id === robotId);\n      }\n\n      if (robot) {\n        this.currentRobotForSubscription = robot;\n        this.subscriptionDialogVisible = true;\n      }\n    },\n\n    // 新增方法：进入与机器人的对话\n    enterChatWithRobot(robotId) {\n      this.$router.push({\n        name: 'ConversationHistory',\n        params: { id: robotId },\n      });\n    },\n    // 订阅机器人\n    async handleSubscriptionConfirm(duration, points) {\n      if (!this.currentRobotForSubscription) return;\n\n      try {\n        const currentTime = this.formatDateTime(new Date());\n        const payload = {\n          userId: this.$store.state.user.userId,\n          agentId: this.currentRobotForSubscription.id,\n          startTime: currentTime,\n          duration: duration,\n          subscriptionType: 1,\n        };\n\n        console.log('请求 payload:', payload);\n        console.log('订阅时长:', duration);\n        console.log('所需积分:', points);\n        const response = await apiSubscribeAgent(payload);\n        console.log('订阅信息:', payload);\n        if (response.status === 200) {\n          this.$message.success('订阅成功！');\n\n          // 1. 更新用户订阅数据\n          await this.$store.dispatch(\n            'agent/fetchUserSubscriptions',\n            this.$store.state.user.userId\n          );\n\n          // 2. 重新加载初始数据（包含最新的订阅数量）\n          await this.loadInitialData();\n\n          // 3. 如果分类详情弹窗是打开的，也更新分类数据\n          if (this.categoryDialogVisible && this.currentCategoryType) {\n            await this.loadCategoryPageData();\n          }\n\n          // 4. 如果当前显示搜索结果，也更新搜索结果\n          if (this.showSearchResults && this.searchInfo) {\n            await this.performSearch();\n          }\n\n          console.log(\n            '订阅成功后的用户订阅列表:',\n            this.$store.state.agent.haveSubscribed\n          );\n          console.log('当前机器人ID:', this.currentRobotForSubscription.id);\n          console.log(\n            '检查是否已订阅:',\n            this.isSubscribed(this.currentRobotForSubscription.id)\n          );\n\n          // 3. 强制更新页面，确保所有状态正确显示\n          this.$forceUpdate();\n\n          // 4. 最后关闭弹窗\n          this.closeSubscriptionDialog();\n          console.log('订阅成功!!!:', response);\n        }\n      } catch (error) {\n        console.error('订阅失败:', error);\n        if (error.code === 400) {\n          this.$message.error(error.message);\n        } else if (error.code === 401) {\n          this.$message.error('请先登录');\n        } else {\n          this.$message.error('订阅失败，请稍后重试');\n        }\n      }\n    },\n    closeSubscriptionDialog() {\n      this.subscriptionDialogVisible = false;\n      this.currentRobotForSubscription = null;\n    },\n    formatDateTime(date) {\n      // 使用ISO 8601格式，与后端API保持一致\n      return date.toISOString();\n    },\n    isSubscribed(robotId) {\n      // 直接检查后端返回的订阅状态，不在前端进行过期检查\n      return this.haveSubscribed.some(\n        (sub) => sub.agent_id === robotId && sub.status\n      );\n    },\n    getRobotsByType(type) {\n      // 这个方法现在主要用于搜索，返回相应类型的机器人\n      switch (type) {\n        case 'recommended':\n          return this.recommendedRobots;\n        case 'roleplay':\n          return this.rolePlayRobots;\n        case 'coding':\n          return this.codingRobots;\n        case 'paper':\n          return this.paperRobots;\n        default:\n          return [];\n      }\n    },\n    getRobotImage(type) {\n      switch (type) {\n        case 1:\n          return require('@/assets/images/Agents/textAgent.png');\n        case 2:\n          return require('@/assets/images/Agents/imageAgent.png');\n        case 3:\n          return require('@/assets/images/Agents/videoAgent.png');\n        default:\n          return require('@/assets/images/Agents/baseAgent.png');\n      }\n    },\n    truncate(text, length = 50) {\n      if (!text) return '';\n      return text.length > length ? text.slice(0, length) + '...' : text;\n    },\n    formatprice(points) {\n      // 当points为0时，返回\"免费\"\n      if (points === 0) {\n        return '免费';\n      }\n      return `${points} 积分`;\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@use '@/assets/styles/variables.scss' as *;\n\n.robot-market {\n  padding: 20px;\n  min-height: 100vh;\n\n  .search-container {\n    background: white;\n    padding: 20px;\n    margin-bottom: 20px;\n    border-radius: 8px;\n    box-shadow: $box-shadow-light;\n\n    .search-wrapper {\n      display: flex;\n      align-items: center;\n      gap: 0;\n      max-width: 800px;\n\n      .search-mode-selector {\n        min-width: 120px;\n\n        .search-mode-btn {\n          border-radius: 6px 0 0 6px;\n          background: $accent-color;\n          color: white;\n          border-color: $accent-color;\n\n          &:hover {\n            background: $accent-hover-color;\n            border-color: $accent-hover-color;\n          }\n        }\n      }\n\n      .search-input {\n        flex: 1;\n\n        :deep(.el-input__inner) {\n          border-radius: 0;\n          border-left: none;\n        }\n\n        :deep(.el-input-group__append) {\n          border-radius: 0 6px 6px 0;\n          background: $accent-color;\n          color: white;\n          border-color: $accent-color;\n\n          &:hover {\n            background: $accent-hover-color;\n          }\n        }\n      }\n    }\n  }\n\n  .search-results,\n  .robots-container {\n    .search-results-container {\n      min-height: 400px;\n    }\n\n    .section-title {\n      font-size: 1.5rem;\n      color: $text-color;\n      margin-bottom: 20px;\n      text-align: center;\n    }\n\n    .category-section {\n      margin-bottom: 40px;\n\n      .category-header {\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        margin-bottom: 20px;\n\n        .category-title {\n          font-size: 1.2rem;\n          color: $text-color;\n          font-weight: 600;\n          display: flex;\n          align-items: center;\n          gap: 8px;\n\n          i {\n            color: $accent-color;\n          }\n        }\n\n        .view-more-btn {\n          background: white;\n          color: $text-color;\n          border: 1px solid $border-color;\n          border-radius: 20px;\n          padding: 8px 16px;\n\n          &:hover {\n            background: $accent-color;\n            color: white;\n            border-color: $accent-color;\n          }\n        }\n      }\n    }\n\n    .robots-grid {\n      display: grid;\n      grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n      gap: 20px;\n    }\n  }\n  .robot-card {\n    cursor: pointer;\n    transition: all 0.3s ease;\n    border: 1px solid $border-color;\n\n    &:hover {\n      transform: translateY(-5px);\n      box-shadow: $box-shadow-medium;\n    }\n\n    .robot-header {\n      display: flex;\n      align-items: center;\n      gap: 10px;\n      margin-bottom: 10px;\n\n      .robot-logo {\n        width: 40px;\n        height: 40px;\n        border-radius: 50%;\n        object-fit: cover;\n      }\n\n      .robot-name {\n        font-size: 1rem;\n        font-weight: 600;\n        color: $text-color;\n        flex: 1;\n      }\n    }\n\n    .robot-description {\n      color: $text-color;\n      font-size: 0.9rem;\n      line-height: 1.4;\n      margin-bottom: 15px;\n      min-height: 40px;\n    }\n\n    .robot-rating-price {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      margin-bottom: 15px;\n      font-size: 0.9rem;\n\n      .robot-subscription {\n        display: flex;\n        align-items: center;\n        gap: 4px;\n        color: #409eff;\n      }\n\n      .robot-price {\n        color: $text-color;\n        font-weight: 500;\n      }\n    }\n\n    .robot-actions {\n      display: flex;\n      gap: 8px;\n\n      .el-button {\n        flex: 1;\n\n        &.subscribed {\n          background: #17a2b8;\n          border-color: #17a2b8;\n          color: white;\n\n          &:hover {\n            background: #138496;\n            border-color: #117a8b;\n          }\n        }\n      }\n    }\n  }\n\n  .category-detail-container {\n    min-height: 400px;\n    height: 67.5vh;\n  }\n\n  .category-detail-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));\n    gap: 15px;\n    max-height: 62.5vh;\n    overflow-y: auto;\n    margin-bottom: 20px;\n  }\n\n  .pagination-controls {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 20px;\n    padding: 15px 0;\n    border-top: 1px solid $border-color;\n\n    .pagination-btn {\n      display: flex;\n      align-items: center;\n      gap: 5px;\n      padding: 8px 16px;\n      border: 1px solid $border-color;\n      border-radius: 6px;\n      background: white;\n      color: $text-color;\n      cursor: pointer;\n      transition: all 0.3s ease;\n\n      &:hover:not(.disabled) {\n        background: white;\n        color: $text-color;\n        border-color: $accent-color;\n      }\n\n      &.disabled {\n        background: #f5f5f5;\n        color: #c0c4cc;\n        cursor: not-allowed;\n        border-color: #e4e7ed;\n\n        &:hover {\n          background: #f5f5f5;\n          color: #c0c4cc;\n          border-color: #e4e7ed;\n        }\n      }\n    }\n\n    .page-info {\n      font-size: 14px;\n      color: $text-color;\n      font-weight: 500;\n    }\n  }\n}\n\n@media (max-width: 768px) {\n  .robot-market {\n    padding: 10px;\n\n    .search-container {\n      padding: 15px;\n\n      .search-wrapper {\n        flex-direction: column;\n        gap: 10px;\n\n        .search-mode-selector {\n          width: 100%;\n\n          .search-mode-btn {\n            border-radius: 6px;\n          }\n        }\n\n        .search-input {\n          width: 100%;\n\n          :deep(.el-input__inner) {\n            border-radius: 6px 0 0 6px;\n            border: 1px solid $border-color;\n          }\n\n          :deep(.el-input-group__append) {\n            border-radius: 0 6px 6px 0;\n          }\n        }\n      }\n    }\n\n    .robots-grid {\n      grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n      gap: 15px;\n    }\n  }\n}\n\n/* 订阅对话框机器人名称样式 */\n.subscription-robot-name {\n  font-size: 16px;\n  font-weight: 500;\n  margin-bottom: 20px;\n  text-align: center;\n  color: #333;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}