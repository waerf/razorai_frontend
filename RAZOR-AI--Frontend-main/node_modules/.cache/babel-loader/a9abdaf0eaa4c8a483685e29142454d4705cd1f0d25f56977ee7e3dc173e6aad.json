{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { createAI as apicreateAI } from '../utils/api';\nexport default {\n  data() {\n    return {\n      form: {\n        name: '',\n        type: null,\n        LLM_id: null,\n        chatprompt: '',\n        description: ''\n      },\n      rules: {\n        name: [{\n          required: true,\n          message: '请输入机器人名字',\n          trigger: 'blur'\n        }],\n        type: [{\n          required: true,\n          message: '请选择机器人类型',\n          trigger: 'change'\n        }],\n        LLM_id: [{\n          required: true,\n          message: '请选择 LLM ID',\n          trigger: 'change'\n        }],\n        chatprompt: [{\n          required: true,\n          message: '请输入提示词',\n          trigger: 'blur'\n        }]\n      },\n      robotTypes: [{\n        label: '文本机器人',\n        value: 1\n      }, {\n        label: '图像机器人',\n        value: 2\n      }, {\n        label: '音视频机器人',\n        value: 3\n      }],\n      llmOptions: [{\n        label: 'Kimi',\n        value: 1\n      }, {\n        label: 'GPT-3',\n        value: 2\n      }, {\n        label: 'BERT',\n        value: 3\n      }, {\n        label: 'T5',\n        value: 4\n      }, {\n        label: 'GPT-4',\n        value: 5\n      }, {\n        label: 'RoBERTa',\n        value: 6\n      }, {\n        label: 'XLNet',\n        value: 7\n      }, {\n        label: 'ALBERT',\n        value: 8\n      }, {\n        label: 'DistilBERT',\n        value: 9\n      }, {\n        label: 'ELECTRA',\n        value: 10\n      }, {\n        label: 'ERNIE',\n        value: 11\n      }]\n    };\n  },\n  methods: {\n    onSubmit() {\n      this.$refs.form.validate(valid => {\n        if (valid) {\n          const payload = {\n            name: this.form.name,\n            type: this.form.type,\n            LLM_id: this.form.LLM_id,\n            chatprompt: this.form.chatprompt,\n            description: this.form.description,\n            creator_id: this.$store.state.user.userId\n          };\n          console.log('准备发送请求', payload);\n          this.apicreateRobot(payload); // 调用创建机器人的 API\n        } else {\n          console.log('表单验证失败');\n        }\n      });\n    },\n    async apicreateRobot(payload) {\n      try {\n        const response = await apicreateAI(payload);\n        console.log('创建机器人成功', response);\n        if (response.status === 200) {\n          this.$message.success('创建机器人成功');\n          const robotId = response.data.agent_id;\n          this.$router.push({\n            name: 'RobotDetail',\n            params: {\n              id: robotId\n            }\n          }); // 跳转到机器人详情页\n          // this.$nextTick(() => {\n          //   // 在页面跳转后再执行刷新\n          //   location.reload();\n          // });\n        } else {\n          this.$message.error('创建机器人失败');\n        }\n      } catch (error) {\n        console.error('创建机器人失败', error);\n        throw error;\n      }\n    }\n  }\n};","map":{"version":3,"names":["createAI","apicreateAI","data","form","name","type","LLM_id","chatprompt","description","rules","required","message","trigger","robotTypes","label","value","llmOptions","methods","onSubmit","$refs","validate","valid","payload","creator_id","$store","state","user","userId","console","log","apicreateRobot","response","status","$message","success","robotId","agent_id","$router","push","params","id","error"],"sources":["src/views/CreateBotsPage.vue"],"sourcesContent":["<template>\n  <div class=\"create-robot\">\n    <el-form\n      :model=\"form\"\n      ref=\"form\"\n      :rules=\"rules\"\n      label-width=\"120px\"\n      class=\"creat-robot-form\"\n    >\n      <el-form-item label=\"机器人名字\" prop=\"name\">\n        <el-input\n          v-model=\"form.name\"\n          placeholder=\"请输入机器人名字\"\n          class=\"custom-input\"\n        ></el-input>\n      </el-form-item>\n\n      <el-form-item label=\"机器人类型\" prop=\"type\">\n        <el-select\n          v-model=\"form.type\"\n          placeholder=\"请选择机器人类型\"\n          class=\"custom-select\"\n        >\n          <el-option\n            v-for=\"option in robotTypes\"\n            :key=\"option.value\"\n            :label=\"option.label\"\n            :value=\"option.value\"\n          ></el-option>\n        </el-select>\n      </el-form-item>\n\n      <el-form-item label=\"LLM ID\" prop=\"LLM_id\">\n        <el-select\n          v-model=\"form.LLM_id\"\n          placeholder=\"请选择 LLM\"\n          class=\"custom-select\"\n        >\n          <el-option\n            v-for=\"option in llmOptions\"\n            :key=\"option.value\"\n            :label=\"option.label\"\n            :value=\"option.value\"\n          ></el-option>\n        </el-select>\n      </el-form-item>\n\n      <el-form-item label=\"提示词\" prop=\"chatprompt\">\n        <el-input\n          v-model=\"form.chatprompt\"\n          placeholder=\"请输入提示词\"\n          class=\"custom-input\"\n        ></el-input>\n      </el-form-item>\n\n      <el-form-item label=\"描述\">\n        <el-input\n          v-model=\"form.description\"\n          placeholder=\"请输入机器人的描述（可无）\"\n          class=\"custom-input\"\n        ></el-input>\n      </el-form-item>\n\n      <el-form-item>\n        <el-button type=\"primary\" class=\"custom-button\" @click=\"onSubmit\">\n          创建机器人\n        </el-button>\n      </el-form-item>\n    </el-form>\n  </div>\n</template>\n\n<script>\nimport { createAI as apicreateAI } from '../utils/api';\nexport default {\n  data() {\n    return {\n      form: {\n        name: '',\n        type: null,\n        LLM_id: null,\n        chatprompt: '',\n        description: '',\n      },\n      rules: {\n        name: [\n          { required: true, message: '请输入机器人名字', trigger: 'blur' },\n        ],\n        type: [\n          { required: true, message: '请选择机器人类型', trigger: 'change' },\n        ],\n        LLM_id: [\n          { required: true, message: '请选择 LLM ID', trigger: 'change' },\n        ],\n        chatprompt: [\n          { required: true, message: '请输入提示词', trigger: 'blur' },\n        ],\n      },\n      robotTypes: [\n        { label: '文本机器人', value: 1 },\n        { label: '图像机器人', value: 2 },\n        { label: '音视频机器人', value: 3 },\n      ],\n      llmOptions: [\n        { label: 'Kimi', value: 1 },\n        { label: 'GPT-3', value: 2 },\n        { label: 'BERT', value: 3 },\n        { label: 'T5', value: 4 },\n        { label: 'GPT-4', value: 5 },\n        { label: 'RoBERTa', value: 6 },\n        { label: 'XLNet', value: 7 },\n        { label: 'ALBERT', value: 8 },\n        { label: 'DistilBERT', value: 9 },\n        { label: 'ELECTRA', value: 10 },\n        { label: 'ERNIE', value: 11 },\n      ],\n    };\n  },\n  methods: {\n    onSubmit() {\n      this.$refs.form.validate((valid) => {\n        if (valid) {\n          const payload = {\n            name: this.form.name,\n            type: this.form.type,\n            LLM_id: this.form.LLM_id,\n            chatprompt: this.form.chatprompt,\n            description: this.form.description,\n            creator_id: this.$store.state.user.userId,\n          };\n          console.log('准备发送请求', payload);\n          this.apicreateRobot(payload); // 调用创建机器人的 API\n        } else {\n          console.log('表单验证失败');\n        }\n      });\n    },\n    async apicreateRobot(payload) {\n      try {\n        const response = await apicreateAI(payload);\n        console.log('创建机器人成功', response);\n        if (response.status === 200) {\n          this.$message.success('创建机器人成功');\n          const robotId = response.data.agent_id;\n          this.$router.push({ name: 'RobotDetail', params: { id: robotId } }); // 跳转到机器人详情页\n          // this.$nextTick(() => {\n          //   // 在页面跳转后再执行刷新\n          //   location.reload();\n          // });\n        } else {\n          this.$message.error('创建机器人失败');\n        }\n      } catch (error) {\n        console.error('创建机器人失败', error);\n        throw error;\n      }\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@use '@/assets/styles/mixins.scss' as *;\n@use '@/assets/styles/variables.scss' as *;\n/* 背景设置 */\n.create-robot {\n  width: 100%;\n  height: 100vh;\n  background: url('@/assets/images/Background/AI-2.png') no-repeat center center;\n  background-size: contain;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n}\n\n.create-robot::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: $background-color;\n  z-index: -1;\n}\n\n/* 表单样式 */\n.creat-robot-form {\n  max-width: 500px;\n  width: 100%;\n  padding: 30px;\n  background: rgba(25, 25, 25, 0.662);\n  border-radius: 15px;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.7); /* 更深的阴影 */\n}\n\n// v-deep 用于穿透组件样式\n::v-deep .el-form-item__label {\n  color: $background-color; /* 确保表单标题为白色 */\n  font-weight: bold;\n  font-size: 16px;\n}\n\n/* 下拉选择框样式 */\n.custom-select .el-input__inner {\n  background: rgba(40, 40, 40, 1); /* 深灰色背景 */\n  border: 1px solid rgba(255, 255, 255, 0.2);\n  color: #ffffff;\n  border-radius: 10px;\n  font-size: 14px;\n  padding: 10px;\n  transition: border-color 0.3s;\n}\n</style>\n"],"mappings":";AAyEA,SAAAA,QAAA,IAAAC,WAAA;AACA;EACAC,KAAA;IACA;MACAC,IAAA;QACAC,IAAA;QACAC,IAAA;QACAC,MAAA;QACAC,UAAA;QACAC,WAAA;MACA;MACAC,KAAA;QACAL,IAAA,GACA;UAAAM,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,EACA;QACAP,IAAA,GACA;UAAAK,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,EACA;QACAN,MAAA,GACA;UAAAI,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,EACA;QACAL,UAAA,GACA;UAAAG,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA;MAEA;MACAC,UAAA,GACA;QAAAC,KAAA;QAAAC,KAAA;MAAA,GACA;QAAAD,KAAA;QAAAC,KAAA;MAAA,GACA;QAAAD,KAAA;QAAAC,KAAA;MAAA,EACA;MACAC,UAAA,GACA;QAAAF,KAAA;QAAAC,KAAA;MAAA,GACA;QAAAD,KAAA;QAAAC,KAAA;MAAA,GACA;QAAAD,KAAA;QAAAC,KAAA;MAAA,GACA;QAAAD,KAAA;QAAAC,KAAA;MAAA,GACA;QAAAD,KAAA;QAAAC,KAAA;MAAA,GACA;QAAAD,KAAA;QAAAC,KAAA;MAAA,GACA;QAAAD,KAAA;QAAAC,KAAA;MAAA,GACA;QAAAD,KAAA;QAAAC,KAAA;MAAA,GACA;QAAAD,KAAA;QAAAC,KAAA;MAAA,GACA;QAAAD,KAAA;QAAAC,KAAA;MAAA,GACA;QAAAD,KAAA;QAAAC,KAAA;MAAA;IAEA;EACA;EACAE,OAAA;IACAC,SAAA;MACA,KAAAC,KAAA,CAAAhB,IAAA,CAAAiB,QAAA,CAAAC,KAAA;QACA,IAAAA,KAAA;UACA,MAAAC,OAAA;YACAlB,IAAA,OAAAD,IAAA,CAAAC,IAAA;YACAC,IAAA,OAAAF,IAAA,CAAAE,IAAA;YACAC,MAAA,OAAAH,IAAA,CAAAG,MAAA;YACAC,UAAA,OAAAJ,IAAA,CAAAI,UAAA;YACAC,WAAA,OAAAL,IAAA,CAAAK,WAAA;YACAe,UAAA,OAAAC,MAAA,CAAAC,KAAA,CAAAC,IAAA,CAAAC;UACA;UACAC,OAAA,CAAAC,GAAA,WAAAP,OAAA;UACA,KAAAQ,cAAA,CAAAR,OAAA;QACA;UACAM,OAAA,CAAAC,GAAA;QACA;MACA;IACA;IACA,MAAAC,eAAAR,OAAA;MACA;QACA,MAAAS,QAAA,SAAA9B,WAAA,CAAAqB,OAAA;QACAM,OAAA,CAAAC,GAAA,YAAAE,QAAA;QACA,IAAAA,QAAA,CAAAC,MAAA;UACA,KAAAC,QAAA,CAAAC,OAAA;UACA,MAAAC,OAAA,GAAAJ,QAAA,CAAA7B,IAAA,CAAAkC,QAAA;UACA,KAAAC,OAAA,CAAAC,IAAA;YAAAlC,IAAA;YAAAmC,MAAA;cAAAC,EAAA,EAAAL;YAAA;UAAA;UACA;UACA;UACA;UACA;QACA;UACA,KAAAF,QAAA,CAAAQ,KAAA;QACA;MACA,SAAAA,KAAA;QACAb,OAAA,CAAAa,KAAA,YAAAA,KAAA;QACA,MAAAA,KAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}