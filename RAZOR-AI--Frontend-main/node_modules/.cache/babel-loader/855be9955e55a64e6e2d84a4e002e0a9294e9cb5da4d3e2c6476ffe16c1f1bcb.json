{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { createAI as createAgentPending } from '@/utils/api';\nexport default {\n  data() {\n    return {\n      form: {\n        name: '',\n        type: null,\n        LLM_id: null,\n        chatprompt: '',\n        description: ''\n      },\n      rules: {\n        name: [{\n          required: true,\n          message: '请输入机器人名字',\n          trigger: 'blur'\n        }],\n        type: [{\n          required: true,\n          message: '请选择机器人类型',\n          trigger: 'change'\n        }],\n        LLM_id: [{\n          required: true,\n          message: '请选择 LLM ID',\n          trigger: 'change'\n        }],\n        chatprompt: [{\n          required: true,\n          message: '请输入提示词',\n          trigger: 'blur'\n        }]\n      },\n      robotTypes: [{\n        label: '文本机器人',\n        value: 1\n      }, {\n        label: '图像机器人',\n        value: 2\n      }, {\n        label: '音视频机器人',\n        value: 3\n      }],\n      llmOptions: [{\n        label: 'Kimi',\n        value: 1\n      }, {\n        label: 'Deepseek',\n        value: 2\n      }, {\n        label: 'Claude',\n        value: 3\n      }, {\n        label: 'GPT-4',\n        value: 4\n      }]\n    };\n  },\n  methods: {\n    onSubmit() {\n      this.$refs.form.validate(valid => {\n        if (valid) {\n          // 获取用户ID并检查\n          const userId = this.$store.state.user?.userId;\n          if (!userId) {\n            this.$message.error('未获取到用户信息，请重新登录');\n            return;\n          }\n          const payload = {\n            name: this.form.name,\n            type: this.form.type,\n            LLM_id: this.form.LLM_id,\n            chatprompt: this.form.chatprompt,\n            description: this.form.description,\n            creator_id: userId\n          };\n          console.log('提交参数:', payload);\n          this.apicreateRobot(payload);\n        } else {\n          console.log('表单验证失败');\n          this.$message.warning('请完善表单信息后重试');\n        }\n      });\n    },\n    onCancel() {\n      this.$router.go(-1); // 返回上一页\n    },\n    async apicreateRobot(payload) {\n      try {\n        const response = await createAgentPending(payload);\n        console.log('接口响应:', response);\n\n        // 同时检查HTTP状态码和业务状态码\n        const isSuccess = response.status === 200 && (response.data.code === 200 || response.data.success);\n        if (isSuccess) {\n          this.$message.success('创建机器人成功');\n          const robotId = response.data.agent_id;\n          if (robotId) {\n            this.$router.push({\n              name: 'RobotDetail',\n              params: {\n                id: robotId\n              }\n            });\n          } else {\n            this.$message.warning('未获取到机器人ID，无法跳转详情页');\n          }\n        } else {\n          const errorMsg = response.data?.message || '创建失败，服务器返回异常';\n          this.$message.error(`创建失败: ${errorMsg}`);\n        }\n      } catch (error) {\n        // 详细打印错误信息\n        console.error('创建机器人错误详情:', error);\n        console.error('错误响应数据:', error.response?.data);\n        console.error('错误状态码:', error.response?.status);\n\n        // 用户友好提示\n        const errorMsg = error.response?.data?.message || error.message || '网络错误，请稍后重试';\n        this.$message.error(`创建失败: ${errorMsg}`);\n      }\n    }\n  }\n};","map":{"version":3,"names":["createAI","createAgentPending","data","form","name","type","LLM_id","chatprompt","description","rules","required","message","trigger","robotTypes","label","value","llmOptions","methods","onSubmit","$refs","validate","valid","userId","$store","state","user","$message","error","payload","creator_id","console","log","apicreateRobot","warning","onCancel","$router","go","response","isSuccess","status","code","success","robotId","agent_id","push","params","id","errorMsg"],"sources":["src/views/CreateBotsPage.vue"],"sourcesContent":["<template>\n  <div class=\"create-robot\">\n    <el-form\n      :model=\"form\"\n      ref=\"form\"\n      :rules=\"rules\"\n      label-width=\"120px\"\n      class=\"creat-robot-form\"\n    >\n      <div class=\"form-header\">\n        <h1 class=\"form-title\">创建新机器人</h1>\n        <p class=\"form-subtitle\">设置机器人的基本信息和参数</p>\n      </div>\n\n      <el-form-item label=\"机器人名字\" prop=\"name\">\n        <el-input\n          v-model=\"form.name\"\n          placeholder=\"请输入机器人名字\"\n          class=\"custom-input\"\n        ></el-input>\n      </el-form-item>\n\n      <el-form-item label=\"机器人类型\" prop=\"type\">\n        <el-select\n          v-model=\"form.type\"\n          placeholder=\"请选择机器人类型\"\n          class=\"custom-select\"\n        >\n          <el-option\n            v-for=\"option in robotTypes\"\n            :key=\"option.value\"\n            :label=\"option.label\"\n            :value=\"option.value\"\n          ></el-option>\n        </el-select>\n      </el-form-item>\n\n      <el-form-item label=\"LLM ID\" prop=\"LLM_id\">\n        <el-select\n          v-model=\"form.LLM_id\"\n          placeholder=\"请选择 LLM\"\n          class=\"custom-select\"\n        >\n          <el-option\n            v-for=\"option in llmOptions\"\n            :key=\"option.value\"\n            :label=\"option.label\"\n            :value=\"option.value\"\n          ></el-option>\n        </el-select>\n      </el-form-item>\n\n      <el-form-item label=\"提示词\" prop=\"chatprompt\">\n        <el-input\n          v-model=\"form.chatprompt\"\n          placeholder=\"请输入提示词\"\n          class=\"custom-input\"\n          type=\"textarea\"\n          rows=\"4\"\n        ></el-input>\n      </el-form-item>\n\n      <el-form-item label=\"描述\">\n        <el-input\n          v-model=\"form.description\"\n          placeholder=\"请输入机器人的描述（可无）\"\n          class=\"custom-input\"\n          type=\"textarea\"\n          rows=\"3\"\n        ></el-input>\n      </el-form-item>\n\n      <el-form-item class=\"form-actions\">\n        <el-button class=\"cancel-button\" @click=\"onCancel\"> 取消 </el-button>\n        <el-button type=\"primary\" class=\"submit-button\" @click=\"onSubmit\">\n          创建机器人\n        </el-button>\n      </el-form-item>\n    </el-form>\n  </div>\n</template>\n\n<script>\nimport { createAI as createAgentPending } from '@/utils/api';\nexport default {\n  data() {\n    return {\n      form: {\n        name: '',\n        type: null,\n        LLM_id: null,\n        chatprompt: '',\n        description: '',\n      },\n      rules: {\n        name: [\n          { required: true, message: '请输入机器人名字', trigger: 'blur' },\n        ],\n        type: [\n          { required: true, message: '请选择机器人类型', trigger: 'change' },\n        ],\n        LLM_id: [\n          { required: true, message: '请选择 LLM ID', trigger: 'change' },\n        ],\n        chatprompt: [\n          { required: true, message: '请输入提示词', trigger: 'blur' },\n        ],\n      },\n      robotTypes: [\n        { label: '文本机器人', value: 1 },\n        { label: '图像机器人', value: 2 },\n        { label: '音视频机器人', value: 3 },\n      ],\n      llmOptions: [\n        { label: 'Kimi', value: 1 },\n        { label: 'Deepseek', value: 2 },\n        { label: 'Claude', value: 3 },\n        { label: 'GPT-4', value: 4 },\n      ],\n    };\n  },\n  methods: {\n    onSubmit() {\n      this.$refs.form.validate((valid) => {\n        if (valid) {\n          // 获取用户ID并检查\n          const userId = this.$store.state.user?.userId;\n          if (!userId) {\n            this.$message.error('未获取到用户信息，请重新登录');\n            return;\n          }\n\n          const payload = {\n            name: this.form.name,\n            type: this.form.type,\n            LLM_id: this.form.LLM_id,\n            chatprompt: this.form.chatprompt,\n            description: this.form.description,\n            creator_id: userId,\n          };\n          console.log('提交参数:', payload);\n          this.apicreateRobot(payload);\n        } else {\n          console.log('表单验证失败');\n          this.$message.warning('请完善表单信息后重试');\n        }\n      });\n    },\n    onCancel() {\n      this.$router.go(-1); // 返回上一页\n    },\n    async apicreateRobot(payload) {\n      try {\n        const response = await createAgentPending(payload);\n        console.log('接口响应:', response);\n\n        // 同时检查HTTP状态码和业务状态码\n        const isSuccess =\n          response.status === 200 &&\n          (response.data.code === 200 || response.data.success);\n\n        if (isSuccess) {\n          this.$message.success('创建机器人成功');\n          const robotId = response.data.agent_id;\n          if (robotId) {\n            this.$router.push({ name: 'RobotDetail', params: { id: robotId } });\n          } else {\n            this.$message.warning('未获取到机器人ID，无法跳转详情页');\n          }\n        } else {\n          const errorMsg = response.data?.message || '创建失败，服务器返回异常';\n          this.$message.error(`创建失败: ${errorMsg}`);\n        }\n      } catch (error) {\n        // 详细打印错误信息\n        console.error('创建机器人错误详情:', error);\n        console.error('错误响应数据:', error.response?.data);\n        console.error('错误状态码:', error.response?.status);\n\n        // 用户友好提示\n        const errorMsg =\n          error.response?.data?.message ||\n          error.message ||\n          '网络错误，请稍后重试';\n        this.$message.error(`创建失败: ${errorMsg}`);\n      }\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@use '@/assets/styles/mixins.scss' as *;\n@use '@/assets/styles/variables.scss' as *;\n\n// 知乎风格基础样式\n.create-robot {\n  width: 100%;\n  min-height: 100vh;\n  background-color: $background-color;\n  padding: 40px 20px;\n  display: flex;\n  justify-content: center;\n  box-sizing: border-box;\n}\n\n// 表单卡片样式，与对话历史页面保持一致\n.creat-robot-form {\n  width: 100%;\n  max-width: 1000px;\n  padding: 30px;\n  background: white;\n  border-radius: 8px;\n  box-shadow: $box-shadow-light;\n  border: 1px solid $border-color;\n}\n\n// 表单标题区域\n.form-header {\n  margin-bottom: 30px;\n  padding-bottom: 15px;\n  border-bottom: 1px solid $border-color;\n\n  .form-title {\n    font-size: 1.5rem;\n    color: $text-color;\n    font-weight: 600;\n    margin-bottom: 5px;\n  }\n\n  .form-subtitle {\n    color: $text-color;\n    font-size: 0.9rem;\n  }\n}\n\n// 表单项样式调整\n::v-deep .el-form-item {\n  margin-bottom: 20px;\n\n  &.form-actions {\n    display: flex;\n    justify-content: flex-end;\n    gap: 15px;\n    margin-top: 30px;\n    padding-top: 15px;\n    border-top: 1px solid $border-color;\n  }\n}\n\n::v-deep .el-form-item__label {\n  color: $text-color;\n  font-weight: 500;\n  font-size: 14px;\n}\n\n// 输入框样式\n.custom-input,\n.custom-select {\n  width: 100%;\n\n  ::v-deep .el-input__inner,\n  ::v-deep .el-select__input {\n    border-radius: 6px;\n    border: 1px solid $border-color;\n    padding: 10px 15px;\n    font-size: 14px;\n    transition: border-color 0.3s;\n\n    &:focus {\n      border-color: $accent-color;\n      box-shadow: 0 0 0 2px rgba(64, 158, 255, 0.2);\n    }\n  }\n\n  // 下拉框样式\n  ::v-deep .el-select-dropdown {\n    border-radius: 6px;\n    box-shadow: $box-shadow-medium;\n  }\n}\n\n// 按钮样式，与对话历史页面保持一致\n.cancel-button {\n  background: white;\n  color: $text-color;\n  border: 1px solid $border-color;\n  border-radius: 6px;\n  padding: 8px 20px;\n\n  &:hover {\n    background: #f5f5f5; /* 使用具体颜色值替代未定义的变量 */\n    color: $text-color;\n    border-color: $border-color;\n  }\n}\n\n.submit-button {\n  background: $accent-color;\n  color: white;\n  border: 1px solid $accent-color;\n  border-radius: 6px;\n  padding: 8px 20px;\n\n  &:hover {\n    background: $accent-hover-color;\n    border-color: $accent-hover-color;\n  }\n}\n\n// 响应式调整\n@media (max-width: 768px) {\n  .create-robot {\n    padding: 20px 10px;\n  }\n\n  .creat-robot-form {\n    padding: 20px 15px;\n  }\n\n  ::v-deep .el-form-item__label {\n    width: 100px;\n  }\n\n  .form-actions {\n    flex-direction: column;\n    gap: 10px;\n\n    .el-button {\n      width: 100%;\n    }\n  }\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}