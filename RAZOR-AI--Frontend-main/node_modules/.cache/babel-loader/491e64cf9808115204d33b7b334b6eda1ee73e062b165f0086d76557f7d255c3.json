{"ast":null,"code":"/*\n *store/chat.js:会话管理\n *功能: 管理用户创建的会话、历史会话记录和消息。\n *接口:\n *创建会话 (/agent/user/chat/creation)\n *发送消息 (/agent/user/chat/<int:chat_id>)\n *获取所有会话 (/agent/user/chat/all)\n *获取某个会话的历史消息 (/agent/user/chat/<int:chat_id>)\n */\n\nimport { fetchAllChats as apifetchAllChats } from '../utils/api';\nconst state = {\n  chats: [],\n  currentChat: null\n};\nconst mutations = {\n  SET_CHATS(state, chats) {\n    state.chats = chats;\n  },\n  SET_CURRENT_CHAT(state, chat) {\n    state.currentChat = chat;\n  }\n};\nconst getters = {\n  chats: state => state.chats,\n  currentChat: state => state.currentChat\n};\nconst actions = {\n  async fetchChats({\n    commit\n  }, payload) {\n    try {\n      const response = await apifetchAllChats(payload);\n      if (response.status === 200) {\n        commit('SET_CHATS', response.data);\n        return {\n          success: true,\n          message: '获取会话列表成功'\n        };\n      } else {\n        throw new Error(`API 响应异常，状态码: ${response.status}`);\n      }\n    } catch (error) {\n      console.log('Error occurred in chat.js:', error);\n      return {\n        success: false,\n        message: error.message\n      };\n    }\n  },\n  getChatByID({\n    commit\n  }, chatid) {\n    // const chat = state.chats.find((chat) => chat.id === chatid);\n    for (const chat of state.chats) {\n      if (Number(chat.id) === Number(chatid)) {\n        commit('SET_CURRENT_CHAT', chat);\n        return chat;\n      }\n    }\n    return null;\n  }\n  // async createChat({ commit }, chatData) {\n  //   const response = await axios.post('/agent/user/chat/creation', chatData);\n  //   commit('SET_CURRENT_CHAT', response.data);\n  // },\n  //   async sendMessage({ commit }, { chatId, message }) {\n  //     await axios.post(`/agent/user/chat/${chatId}`, { question: message });\n  //   },\n  // async fetchChatHistory({ commit }, chatId) {\n  //   const response = await axios.get(`/agent/user/chat/${chatId}`);\n  //   commit('SET_CURRENT_CHAT', response.data);\n  // },\n};\nexport default {\n  namespaced: true,\n  state,\n  mutations,\n  actions,\n  getters\n};","map":{"version":3,"names":["fetchAllChats","apifetchAllChats","state","chats","currentChat","mutations","SET_CHATS","SET_CURRENT_CHAT","chat","getters","actions","fetchChats","commit","payload","response","status","data","success","message","Error","error","console","log","getChatByID","chatid","Number","id","namespaced"],"sources":["D:/1/adminBlock/razorai_frontend-main/razorai_frontend-main/RAZOR-AI--Frontend-main/src/store/chat.js"],"sourcesContent":["/*\n *store/chat.js:会话管理\n *功能: 管理用户创建的会话、历史会话记录和消息。\n *接口:\n *创建会话 (/agent/user/chat/creation)\n *发送消息 (/agent/user/chat/<int:chat_id>)\n *获取所有会话 (/agent/user/chat/all)\n *获取某个会话的历史消息 (/agent/user/chat/<int:chat_id>)\n */\n\nimport { fetchAllChats as apifetchAllChats } from '../utils/api';\nconst state = {\n  chats: [],\n  currentChat: null,\n};\n\nconst mutations = {\n  SET_CHATS(state, chats) {\n    state.chats = chats;\n  },\n  SET_CURRENT_CHAT(state, chat) {\n    state.currentChat = chat;\n  },\n};\nconst getters = {\n  chats: (state) => state.chats,\n  currentChat: (state) => state.currentChat,\n};\n\nconst actions = {\n  async fetchChats({ commit }, payload) {\n    try {\n      const response = await apifetchAllChats(payload);\n      if (response.status === 200) {\n        commit('SET_CHATS', response.data);\n        return { success: true, message: '获取会话列表成功' };\n      } else {\n        throw new Error(`API 响应异常，状态码: ${response.status}`);\n      }\n    } catch (error) {\n      console.log('Error occurred in chat.js:', error);\n      return { success: false, message: error.message };\n    }\n  },\n  getChatByID({ commit }, chatid) {\n    // const chat = state.chats.find((chat) => chat.id === chatid);\n    for (const chat of state.chats) {\n      if (Number(chat.id) === Number(chatid)) {\n        commit('SET_CURRENT_CHAT', chat);\n        return chat;\n      }\n    }\n    return null;\n  },\n  // async createChat({ commit }, chatData) {\n  //   const response = await axios.post('/agent/user/chat/creation', chatData);\n  //   commit('SET_CURRENT_CHAT', response.data);\n  // },\n  //   async sendMessage({ commit }, { chatId, message }) {\n  //     await axios.post(`/agent/user/chat/${chatId}`, { question: message });\n  //   },\n  // async fetchChatHistory({ commit }, chatId) {\n  //   const response = await axios.get(`/agent/user/chat/${chatId}`);\n  //   commit('SET_CURRENT_CHAT', response.data);\n  // },\n};\n\nexport default {\n  namespaced: true,\n  state,\n  mutations,\n  actions,\n  getters,\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,aAAa,IAAIC,gBAAgB,QAAQ,cAAc;AAChE,MAAMC,KAAK,GAAG;EACZC,KAAK,EAAE,EAAE;EACTC,WAAW,EAAE;AACf,CAAC;AAED,MAAMC,SAAS,GAAG;EAChBC,SAASA,CAACJ,KAAK,EAAEC,KAAK,EAAE;IACtBD,KAAK,CAACC,KAAK,GAAGA,KAAK;EACrB,CAAC;EACDI,gBAAgBA,CAACL,KAAK,EAAEM,IAAI,EAAE;IAC5BN,KAAK,CAACE,WAAW,GAAGI,IAAI;EAC1B;AACF,CAAC;AACD,MAAMC,OAAO,GAAG;EACdN,KAAK,EAAGD,KAAK,IAAKA,KAAK,CAACC,KAAK;EAC7BC,WAAW,EAAGF,KAAK,IAAKA,KAAK,CAACE;AAChC,CAAC;AAED,MAAMM,OAAO,GAAG;EACd,MAAMC,UAAUA,CAAC;IAAEC;EAAO,CAAC,EAAEC,OAAO,EAAE;IACpC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMb,gBAAgB,CAACY,OAAO,CAAC;MAChD,IAAIC,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;QAC3BH,MAAM,CAAC,WAAW,EAAEE,QAAQ,CAACE,IAAI,CAAC;QAClC,OAAO;UAAEC,OAAO,EAAE,IAAI;UAAEC,OAAO,EAAE;QAAW,CAAC;MAC/C,CAAC,MAAM;QACL,MAAM,IAAIC,KAAK,CAAC,iBAAiBL,QAAQ,CAACC,MAAM,EAAE,CAAC;MACrD;IACF,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdC,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEF,KAAK,CAAC;MAChD,OAAO;QAAEH,OAAO,EAAE,KAAK;QAAEC,OAAO,EAAEE,KAAK,CAACF;MAAQ,CAAC;IACnD;EACF,CAAC;EACDK,WAAWA,CAAC;IAAEX;EAAO,CAAC,EAAEY,MAAM,EAAE;IAC9B;IACA,KAAK,MAAMhB,IAAI,IAAIN,KAAK,CAACC,KAAK,EAAE;MAC9B,IAAIsB,MAAM,CAACjB,IAAI,CAACkB,EAAE,CAAC,KAAKD,MAAM,CAACD,MAAM,CAAC,EAAE;QACtCZ,MAAM,CAAC,kBAAkB,EAAEJ,IAAI,CAAC;QAChC,OAAOA,IAAI;MACb;IACF;IACA,OAAO,IAAI;EACb;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF,CAAC;AAED,eAAe;EACbmB,UAAU,EAAE,IAAI;EAChBzB,KAAK;EACLG,SAAS;EACTK,OAAO;EACPD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}