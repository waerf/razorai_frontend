{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mapState } from 'vuex';\nimport { deleteChat as apiDeleteChat } from '../utils/api';\nexport default {\n  name: 'ConversationHistory',\n  data() {\n    return {\n      title: '对话历史',\n      conversations: [],\n      selectedConversations: [],\n      deleteDialogVisible: false,\n      searchQuery: '',\n      filters: [{\n        id: 'all',\n        name: '全部对话'\n      }, {\n        id: 'today',\n        name: '今日'\n      }, {\n        id: 'thisWeek',\n        name: '本周'\n      }, {\n        id: 'thisMonth',\n        name: '本月'\n      }, {\n        id: 'earlier',\n        name: '更早'\n      }],\n      activeFilter: 'all',\n      currentPage: 1,\n      pageSize: 5\n    };\n  },\n  mounted() {\n    const robotId = this.$route.params.id;\n    // 从Vuex获取对话数据\n    this.conversations = this.chats.filter(chat => Number(chat.agent_id) === Number(robotId));\n\n    // 监听滚动事件显示/隐藏回到顶部按钮\n    window.addEventListener('scroll', this.handleScroll);\n  },\n  beforeDestroy() {\n    window.removeEventListener('scroll', this.handleScroll);\n  },\n  computed: {\n    ...mapState('chat', ['chats']),\n    // 过滤后的对话列表\n    filteredConversations() {\n      let result = [...this.conversations];\n\n      // 搜索过滤\n      if (this.searchQuery) {\n        const query = this.searchQuery.toLowerCase();\n        result = result.filter(conv => conv.name.toLowerCase().includes(query) || conv.content.toLowerCase().includes(query) || conv.tags.some(tag => tag.toLowerCase().includes(query)));\n      }\n\n      // 时间过滤\n      if (this.activeFilter !== 'all') {\n        const now = new Date();\n        const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n        const weekStart = new Date(today);\n        weekStart.setDate(today.getDate() - today.getDay());\n        const monthStart = new Date(now.getFullYear(), now.getMonth(), 1);\n        result = result.filter(conv => {\n          const convDate = new Date(conv.timestamp);\n          switch (this.activeFilter) {\n            case 'today':\n              return convDate >= today;\n            case 'thisWeek':\n              return convDate >= weekStart && convDate < today;\n            case 'thisMonth':\n              return convDate >= monthStart && convDate < weekStart;\n            case 'earlier':\n              return convDate < monthStart;\n            default:\n              return true;\n          }\n        });\n      }\n      return result;\n    },\n    // 分页相关计算\n    paginatedConversations() {\n      const startIndex = (this.currentPage - 1) * this.pageSize;\n      return this.filteredConversations.slice(startIndex, startIndex + this.pageSize);\n    },\n    startItem() {\n      return this.filteredConversations.length ? (this.currentPage - 1) * this.pageSize + 1 : 0;\n    },\n    endItem() {\n      return Math.min(this.currentPage * this.pageSize, this.filteredConversations.length);\n    }\n  },\n  methods: {\n    // 查看对话详情\n    viewConversation(conversationId) {\n      this.$router.push({\n        name: 'ChatRobot',\n        params: {\n          id: conversationId\n        }\n      });\n    },\n    // 处理搜索\n    handleSearch() {\n      this.currentPage = 1; // 重置到第一页\n    },\n    performSearch() {\n      this.currentPage = 1;\n    },\n    // 处理分页变化\n    handlePageChange(page) {\n      this.currentPage = page;\n    },\n    // 确认删除\n    confirmDelete() {\n      this.deleteDialogVisible = true;\n    },\n    // 选择单个对话用于删除\n    selectConversation(id) {\n      this.selectedConversations = [id];\n    },\n    // 清除选择\n    clearSelection() {\n      this.selectedConversations = [];\n    },\n    // 删除选中的对话\n    async deleteConversations() {\n      try {\n        for (const conversationId of this.selectedConversations) {\n          const response = await apiDeleteChat({\n            chat_id: conversationId\n          });\n          if (response.status !== 200) {\n            throw new Error(`删除对话 ${conversationId} 失败`);\n          }\n        }\n\n        // 刷新对话列表\n        this.conversations = this.conversations.filter(conv => !this.selectedConversations.includes(conv.id));\n\n        // 显示成功提示\n        this.$message.success('对话已成功删除');\n      } catch (error) {\n        console.error('删除对话失败:', error);\n        this.$message.error('删除对话失败，请重试');\n      } finally {\n        this.deleteDialogVisible = false;\n        this.selectedConversations = [];\n      }\n    },\n    // 格式化日期显示\n    formatDate(timestamp) {\n      const date = new Date(timestamp);\n      const now = new Date();\n      const diffInDays = Math.floor((now - date) / (1000 * 60 * 60 * 24));\n      if (diffInDays === 0) {\n        // 今天\n        return `今天 ${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}`;\n      } else if (diffInDays === 1) {\n        // 昨天\n        return `昨天 ${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}`;\n      } else if (diffInDays < 7) {\n        // 本周\n        const weekdays = ['周日', '周一', '周二', '周三', '周四', '周五', '周六'];\n        return `${weekdays[date.getDay()]} ${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}`;\n      } else {\n        // 更早\n        return `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')}`;\n      }\n    },\n    // 处理滚动事件\n    handleScroll() {\n      const backToTopButton = document.getElementById('backToTop');\n      if (window.pageYOffset > 300) {\n        backToTopButton.classList.add('visible');\n      } else {\n        backToTopButton.classList.remove('visible');\n      }\n    },\n    // 回到顶部\n    scrollToTop() {\n      window.scrollTo({\n        top: 0,\n        behavior: 'smooth'\n      });\n    },\n    // 截断文本\n    truncate(text, length = 50) {\n      if (!text) return '';\n      return text.length > length ? text.slice(0, length) + '...' : text;\n    }\n  }\n};","map":{"version":3,"names":["mapState","deleteChat","apiDeleteChat","name","data","title","conversations","selectedConversations","deleteDialogVisible","searchQuery","filters","id","activeFilter","currentPage","pageSize","mounted","robotId","$route","params","chats","filter","chat","Number","agent_id","window","addEventListener","handleScroll","beforeDestroy","removeEventListener","computed","filteredConversations","result","query","toLowerCase","conv","includes","content","tags","some","tag","now","Date","today","getFullYear","getMonth","getDate","weekStart","setDate","getDay","monthStart","convDate","timestamp","paginatedConversations","startIndex","slice","startItem","length","endItem","Math","min","methods","viewConversation","conversationId","$router","push","handleSearch","performSearch","handlePageChange","page","confirmDelete","selectConversation","clearSelection","deleteConversations","response","chat_id","status","Error","$message","success","error","console","formatDate","date","diffInDays","floor","getHours","toString","padStart","getMinutes","weekdays","backToTopButton","document","getElementById","pageYOffset","classList","add","remove","scrollToTop","scrollTo","top","behavior","truncate","text"],"sources":["src/views/ConversationHistory.vue"],"sourcesContent":["<template>\n  <div class=\"conversation-history\">\n    <!-- 主内容区域 -->\n    <div class=\"content-container\">\n      <!-- 对话历史标题栏 -->\n      <el-card class=\"header-card\">\n        <div class=\"header-content\">\n          <div class=\"title-section\">\n            <h1 class=\"main-title\">{{ title }}</h1>\n            <p class=\"sub-title\">与小助手Bot的所有对话记录</p>\n          </div>\n          <div class=\"action-section\">\n            <div class=\"search-box\">\n              <el-input\n                v-model=\"searchQuery\"\n                placeholder=\"搜索对话...\"\n                class=\"search-input\"\n                @input=\"handleSearch\"\n                clearable\n              >\n                <el-button\n                  slot=\"append\"\n                  icon=\"el-icon-search\"\n                  @click=\"performSearch\"\n                ></el-button>\n              </el-input>\n            </div>\n            <el-button\n              id=\"deleteSelected\"\n              class=\"delete-btn\"\n              icon=\"el-icon-delete\"\n              @click=\"confirmDelete\"\n              :disabled=\"selectedConversations.length === 0\"\n            >\n              删除选中\n            </el-button>\n          </div>\n        </div>\n\n        <!-- 对话过滤器 -->\n        <div class=\"filter-container\">\n          <el-button\n            v-for=\"filter in filters\"\n            :key=\"filter.id\"\n            class=\"filter-btn\"\n            :class=\"{ active: activeFilter === filter.id }\"\n            @click=\"activeFilter = filter.id\"\n          >\n            {{ filter.name }}\n          </el-button>\n        </div>\n      </el-card>\n\n      <!-- 对话历史列表 -->\n      <el-card class=\"list-card\">\n        <div v-if=\"filteredConversations.length > 0\">\n          <div class=\"robots-grid\">\n            <!-- 对话项 -->\n            <el-card\n              v-for=\"conversation in paginatedConversations\"\n              :key=\"conversation.id\"\n              class=\"conversation-card\"\n            >\n              <div class=\"conversation-header\">\n                <el-checkbox\n                  v-model=\"selectedConversations\"\n                  :label=\"conversation.id\"\n                  class=\"selection-checkbox\"\n                  aria-label=\"选择此对话\"\n                ></el-checkbox>\n                <div class=\"conversation-title\">\n                  <h3 class=\"title-text\">{{ conversation.name }}</h3>\n                  <span class=\"timestamp\">{{\n                    formatDate(conversation.timestamp)\n                  }}</span>\n                </div>\n              </div>\n              <div class=\"conversation-content\">\n                {{ truncate(conversation.content, 80) }}\n              </div>\n              <div class=\"conversation-tags\">\n                <span class=\"tag\" v-for=\"tag in conversation.tags\" :key=\"tag\">\n                  {{ tag }}\n                </span>\n              </div>\n              <div class=\"conversation-actions\">\n                <el-button\n                  size=\"mini\"\n                  @click.stop=\"viewConversation(conversation.id)\"\n                >\n                  查看详情\n                </el-button>\n                <el-button\n                  size=\"mini\"\n                  type=\"danger\"\n                  @click.stop=\"\n                    selectConversation(conversation.id);\n                    confirmDelete();\n                  \"\n                >\n                  删除\n                </el-button>\n              </div>\n            </el-card>\n          </div>\n\n          <!-- 分页 -->\n          <div class=\"pagination-container\">\n            <p class=\"pagination-info\">\n              显示 {{ startItem }}-{{ endItem }} 条，共\n              {{ filteredConversations.length }} 条\n            </p>\n            <el-pagination\n              background\n              :current-page=\"currentPage\"\n              :page-size=\"pageSize\"\n              :total=\"filteredConversations.length\"\n              @current-change=\"handlePageChange\"\n            ></el-pagination>\n          </div>\n        </div>\n\n        <!-- 无对话时显示 -->\n        <div class=\"no-conversations\" v-else>\n          <div class=\"empty-state\">\n            <i class=\"el-icon-inbox text-4xl mb-3\"></i>\n            <p class=\"empty-title\">暂无相关对话记录</p>\n            <p class=\"empty-subtitle\">开始新的对话，记录将显示在这里</p>\n          </div>\n        </div>\n      </el-card>\n    </div>\n\n    <!-- 删除确认对话框 -->\n    <el-dialog\n      title=\"确认删除\"\n      :visible.sync=\"deleteDialogVisible\"\n      width=\"400px\"\n      center\n    >\n      <div class=\"dialog-content\">\n        <div class=\"warning-icon\">\n          <i class=\"el-icon-warning text-red-500 text-2xl\"></i>\n        </div>\n        <h3 class=\"dialog-title\">确认删除</h3>\n        <p class=\"dialog-message\">你确定要删除选中的对话吗？此操作不可撤销。</p>\n      </div>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"deleteDialogVisible = false\">取消</el-button>\n        <el-button type=\"danger\" @click=\"deleteConversations\"\n          >确认删除</el-button\n        >\n      </div>\n    </el-dialog>\n\n    <!-- 回到顶部按钮 -->\n    <button\n      id=\"backToTop\"\n      class=\"back-to-top\"\n      aria-label=\"回到顶部\"\n      @click=\"scrollToTop\"\n    >\n      <i class=\"el-icon-arrow-up\"></i>\n    </button>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport { deleteChat as apiDeleteChat } from '../utils/api';\n\nexport default {\n  name: 'ConversationHistory',\n  data() {\n    return {\n      title: '对话历史',\n      conversations: [],\n      selectedConversations: [],\n      deleteDialogVisible: false,\n      searchQuery: '',\n      filters: [\n        { id: 'all', name: '全部对话' },\n        { id: 'today', name: '今日' },\n        { id: 'thisWeek', name: '本周' },\n        { id: 'thisMonth', name: '本月' },\n        { id: 'earlier', name: '更早' },\n      ],\n      activeFilter: 'all',\n      currentPage: 1,\n      pageSize: 5,\n    };\n  },\n  mounted() {\n    const robotId = this.$route.params.id;\n    // 从Vuex获取对话数据\n    this.conversations = this.chats.filter(\n      (chat) => Number(chat.agent_id) === Number(robotId)\n    );\n\n    // 监听滚动事件显示/隐藏回到顶部按钮\n    window.addEventListener('scroll', this.handleScroll);\n  },\n  beforeDestroy() {\n    window.removeEventListener('scroll', this.handleScroll);\n  },\n  computed: {\n    ...mapState('chat', ['chats']),\n    // 过滤后的对话列表\n    filteredConversations() {\n      let result = [...this.conversations];\n\n      // 搜索过滤\n      if (this.searchQuery) {\n        const query = this.searchQuery.toLowerCase();\n        result = result.filter(\n          (conv) =>\n            conv.name.toLowerCase().includes(query) ||\n            conv.content.toLowerCase().includes(query) ||\n            conv.tags.some((tag) => tag.toLowerCase().includes(query))\n        );\n      }\n\n      // 时间过滤\n      if (this.activeFilter !== 'all') {\n        const now = new Date();\n        const today = new Date(\n          now.getFullYear(),\n          now.getMonth(),\n          now.getDate()\n        );\n        const weekStart = new Date(today);\n        weekStart.setDate(today.getDate() - today.getDay());\n        const monthStart = new Date(now.getFullYear(), now.getMonth(), 1);\n\n        result = result.filter((conv) => {\n          const convDate = new Date(conv.timestamp);\n\n          switch (this.activeFilter) {\n            case 'today':\n              return convDate >= today;\n            case 'thisWeek':\n              return convDate >= weekStart && convDate < today;\n            case 'thisMonth':\n              return convDate >= monthStart && convDate < weekStart;\n            case 'earlier':\n              return convDate < monthStart;\n            default:\n              return true;\n          }\n        });\n      }\n\n      return result;\n    },\n    // 分页相关计算\n    paginatedConversations() {\n      const startIndex = (this.currentPage - 1) * this.pageSize;\n      return this.filteredConversations.slice(\n        startIndex,\n        startIndex + this.pageSize\n      );\n    },\n    startItem() {\n      return this.filteredConversations.length\n        ? (this.currentPage - 1) * this.pageSize + 1\n        : 0;\n    },\n    endItem() {\n      return Math.min(\n        this.currentPage * this.pageSize,\n        this.filteredConversations.length\n      );\n    },\n  },\n  methods: {\n    // 查看对话详情\n    viewConversation(conversationId) {\n      this.$router.push({\n        name: 'ChatRobot',\n        params: { id: conversationId },\n      });\n    },\n    // 处理搜索\n    handleSearch() {\n      this.currentPage = 1; // 重置到第一页\n    },\n    performSearch() {\n      this.currentPage = 1;\n    },\n    // 处理分页变化\n    handlePageChange(page) {\n      this.currentPage = page;\n    },\n    // 确认删除\n    confirmDelete() {\n      this.deleteDialogVisible = true;\n    },\n    // 选择单个对话用于删除\n    selectConversation(id) {\n      this.selectedConversations = [id];\n    },\n    // 清除选择\n    clearSelection() {\n      this.selectedConversations = [];\n    },\n    // 删除选中的对话\n    async deleteConversations() {\n      try {\n        for (const conversationId of this.selectedConversations) {\n          const response = await apiDeleteChat({\n            chat_id: conversationId,\n          });\n\n          if (response.status !== 200) {\n            throw new Error(`删除对话 ${conversationId} 失败`);\n          }\n        }\n\n        // 刷新对话列表\n        this.conversations = this.conversations.filter(\n          (conv) => !this.selectedConversations.includes(conv.id)\n        );\n\n        // 显示成功提示\n        this.$message.success('对话已成功删除');\n      } catch (error) {\n        console.error('删除对话失败:', error);\n        this.$message.error('删除对话失败，请重试');\n      } finally {\n        this.deleteDialogVisible = false;\n        this.selectedConversations = [];\n      }\n    },\n    // 格式化日期显示\n    formatDate(timestamp) {\n      const date = new Date(timestamp);\n      const now = new Date();\n      const diffInDays = Math.floor((now - date) / (1000 * 60 * 60 * 24));\n\n      if (diffInDays === 0) {\n        // 今天\n        return `今天 ${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}`;\n      } else if (diffInDays === 1) {\n        // 昨天\n        return `昨天 ${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}`;\n      } else if (diffInDays < 7) {\n        // 本周\n        const weekdays = [\n          '周日',\n          '周一',\n          '周二',\n          '周三',\n          '周四',\n          '周五',\n          '周六',\n        ];\n        return `${weekdays[date.getDay()]} ${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}`;\n      } else {\n        // 更早\n        return `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')}`;\n      }\n    },\n    // 处理滚动事件\n    handleScroll() {\n      const backToTopButton = document.getElementById('backToTop');\n      if (window.pageYOffset > 300) {\n        backToTopButton.classList.add('visible');\n      } else {\n        backToTopButton.classList.remove('visible');\n      }\n    },\n    // 回到顶部\n    scrollToTop() {\n      window.scrollTo({\n        top: 0,\n        behavior: 'smooth',\n      });\n    },\n    // 截断文本\n    truncate(text, length = 50) {\n      if (!text) return '';\n      return text.length > length ? text.slice(0, length) + '...' : text;\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@use '@/assets/styles/variables.scss' as *;\n\n$light-accent: #e8f3ff;\n\n.conversation-history {\n  padding: 20px;\n  min-height: 100vh;\n  background-color: $background-color;\n\n  .content-container {\n    max-width: 1000px;\n    margin: 0 auto;\n  }\n\n  .header-card {\n    margin-bottom: 20px;\n    border-radius: 8px;\n    box-shadow: $box-shadow-light;\n    border: 1px solid $border-color;\n    overflow: hidden;\n\n    .header-content {\n      display: flex;\n      flex-wrap: wrap;\n      justify-content: space-between;\n      align-items: center;\n      padding: 20px;\n      gap: 20px;\n\n      .title-section {\n        .main-title {\n          font-size: 1.5rem;\n          color: $text-color;\n          font-weight: 600;\n          margin-bottom: 5px;\n        }\n\n        .sub-title {\n          color: $secondary-color;\n          font-size: 0.9rem;\n        }\n      }\n\n      .action-section {\n        display: flex;\n        align-items: center;\n        gap: 15px;\n        width: 100%;\n        max-width: 500px;\n\n        .search-box {\n          flex: 1;\n\n          .search-input {\n            :deep(.el-input__inner) {\n              border-radius: 6px;\n              border: 1px solid $border-color;\n            }\n\n            :deep(.el-input-group__append) {\n              background: $accent-color;\n              color: white;\n              border-color: $accent-color;\n\n              &:hover {\n                background: $accent-hover-color;\n              }\n            }\n          }\n        }\n\n        .delete-btn {\n          background: white;\n          color: #f56c6c;\n          border: 1px solid #f56c6c;\n          border-radius: 6px;\n\n          &:hover {\n            background: #f56c6c;\n            color: white;\n          }\n\n          &:disabled {\n            background: #fef0f0;\n            color: #fab0b0;\n            border-color: #fab0b0;\n            cursor: not-allowed;\n          }\n        }\n      }\n    }\n\n    .filter-container {\n      padding: 0 20px 20px;\n      display: flex;\n      flex-wrap: wrap;\n      gap: 10px;\n\n      .filter-btn {\n        background: white;\n        color: $text-color;\n        border: 1px solid $border-color;\n        border-radius: 20px;\n        padding: 6px 16px;\n\n        &:hover {\n          background: $accent-color;\n          color: white;\n          border-color: $accent-color;\n        }\n\n        &.active {\n          background: $accent-color;\n          color: white;\n          border-color: $accent-color;\n        }\n      }\n    }\n  }\n\n  .list-card {\n    border-radius: 8px;\n    box-shadow: $box-shadow-light;\n    border: 1px solid $border-color;\n    padding: 20px;\n\n    .robots-grid {\n      display: grid;\n      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n      gap: 20px;\n      margin-bottom: 20px;\n    }\n\n    .conversation-card {\n      cursor: default;\n      transition: all 0.3s ease;\n      border: 1px solid $border-color;\n\n      &:hover {\n        transform: translateY(-5px);\n        box-shadow: $box-shadow-medium;\n      }\n\n      .conversation-header {\n        display: flex;\n        align-items: flex-start;\n        gap: 10px;\n        margin-bottom: 15px;\n\n        .selection-checkbox {\n          margin-top: 3px;\n        }\n\n        .conversation-title {\n          flex: 1;\n\n          .title-text {\n            font-size: 1rem;\n            font-weight: 600;\n            color: $text-color;\n            margin-bottom: 5px;\n          }\n\n          .timestamp {\n            font-size: 0.8rem;\n            color: $secondary-color;\n          }\n        }\n      }\n\n      .conversation-content {\n        color: $secondary-color;\n        font-size: 0.9rem;\n        line-height: 1.4;\n        margin-bottom: 15px;\n        min-height: 40px;\n      }\n\n      .conversation-tags {\n        margin-bottom: 15px;\n        display: flex;\n        flex-wrap: wrap;\n        gap: 8px;\n\n        .tag {\n          display: inline-block;\n          padding: 0.25em 0.5em;\n          background-color: $light-accent;\n          color: $accent-color;\n          border-radius: 4px;\n          font-size: 0.8em;\n        }\n      }\n\n      .conversation-actions {\n        display: flex;\n        gap: 8px;\n\n        .el-button {\n          flex: 1;\n\n          &:nth-child(1) {\n            background: white;\n            color: $text-color;\n            border: 1px solid $border-color;\n\n            &:hover {\n              background: $accent-color;\n              color: white;\n              border-color: $accent-color;\n            }\n          }\n        }\n      }\n    }\n\n    .pagination-container {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      padding-top: 15px;\n      border-top: 1px solid $border-color;\n\n      .pagination-info {\n        font-size: 0.9rem;\n        color: $secondary-color;\n      }\n    }\n\n    .no-conversations {\n      text-align: center;\n      padding: 40px 0;\n\n      .empty-state {\n        color: $secondary-color;\n\n        .empty-title {\n          font-size: 1.2rem;\n          margin: 15px 0 5px;\n        }\n\n        .empty-subtitle {\n          font-size: 0.9rem;\n        }\n      }\n    }\n  }\n\n  .dialog-content {\n    text-align: center;\n    padding: 15px 0;\n\n    .warning-icon {\n      width: 40px;\n      height: 40px;\n      background: #fff1f0;\n      border-radius: 50%;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      margin: 0 auto 15px;\n    }\n\n    .dialog-title {\n      font-size: 1.2rem;\n      font-weight: 600;\n      color: $text-color;\n      margin-bottom: 10px;\n    }\n\n    .dialog-message {\n      color: $secondary-color;\n      font-size: 0.9rem;\n    }\n  }\n\n  .back-to-top {\n    position: fixed;\n    bottom: 20px;\n    right: 20px;\n    width: 40px;\n    height: 40px;\n    border-radius: 50%;\n    background: $accent-color;\n    color: white;\n    box-shadow: $box-shadow-medium;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border: none;\n    cursor: pointer;\n    opacity: 0;\n    visibility: hidden;\n    transition: all 0.3s ease;\n    z-index: 100;\n\n    &.visible {\n      opacity: 1;\n      visibility: visible;\n    }\n\n    &:hover {\n      background: $accent-hover-color;\n    }\n  }\n}\n\n@media (max-width: 768px) {\n  .conversation-history {\n    padding: 10px;\n\n    .header-content {\n      flex-direction: column;\n      align-items: flex-start;\n    }\n\n    .action-section {\n      width: 100% !important;\n      max-width: none !important;\n    }\n\n    .robots-grid {\n      grid-template-columns: 1fr !important;\n    }\n\n    .pagination-container {\n      flex-direction: column;\n      gap: 15px;\n      align-items: flex-start;\n    }\n  }\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}