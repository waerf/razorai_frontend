{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { fetchChatDetailedHistory as apifetchChatDetailedHistory } from '../utils/api';\nimport { closeChat as apicloseChat } from '../utils/api'; // 关闭对话\nimport { saveChatHistory as apisaveChatHistory } from '../utils/api'; // 保存对话\nimport { sendMessage as apisendMessage } from '../utils/api'; // 发送消息\nimport { createChat as apicreateChat } from '../utils/api'; // 创建对话\nimport { mapActions } from 'vuex';\nexport default {\n  name: 'ChatRobot',\n  data() {\n    return {\n      newMessage: '',\n      messages: [],\n      userAvatar: require('@/assets/images/Avatar/User.png'),\n      botAvatar: require('@/assets/images/Avatar/Assistant.png'),\n      currentChat: null\n    };\n  },\n  mounted() {\n    this.chatId = this.$route.params.id;\n    this.getChatHistory();\n    // console.log('mounted每次都会执行哦');\n  },\n  async beforeDestroy() {\n    // 离开页面时关闭对话\n    const id = this.currentChat.id;\n    console.log('关闭对话的id:', id);\n    // 保存旧对话记录\n    const saveresponse = await apisaveChatHistory({\n      chat_id: id\n    });\n    if (saveresponse.status === 200) {\n      console.log('保存旧对话记录成功！:', saveresponse);\n    } else {\n      console.error('保存旧对话记录失败！:', saveresponse);\n    }\n    const response = await apicloseChat({\n      chat_id: id\n    });\n    if (response.status === 200) {\n      console.log('关闭对话:', response);\n    } else {\n      console.error('关闭对话失败:', response);\n    }\n    // this.saveChatHistory();\n  },\n  async created() {\n    this.chatId = this.$route.params.id;\n    console.log('Chat ID:', this.chatId);\n    await this.getChatHistory(); // 先获取聊天记录和当前对话信息\n    console.log('created每次都会执行哦');\n    await this.createOrFetchChat(); // 创建或获取对话\n  },\n  watch: {\n    // '$route.params.id'(newId, oldId) {\n    //   this.chatId = newId;\n    //   console.log('Updated Chat ID:', oldId, 'to', this.chatId);\n    //   console.log('watch每次都会执行哦');\n    //   this.getChatHistory();\n    //   this.createOrFetchChat();\n    // },\n    '$route.params.id': {\n      async handler(newId, oldId) {\n        this.chatId = newId;\n        console.log('Updated Chat ID:', oldId, 'to', this.chatId);\n        console.log('watch每次都会执行哦');\n        if (oldId) {\n          // 保存旧对话记录\n          const saveresponse = await apisaveChatHistory({\n            chat_id: oldId\n          });\n          if (saveresponse.status === 200) {\n            console.log('保存旧对话记录成功！:', saveresponse);\n          } else {\n            console.error('保存旧对话记录失败！:', saveresponse);\n          }\n\n          // 关闭旧对话\n          console.log('关闭旧对话:', oldId);\n          const response = await apicloseChat({\n            chat_id: oldId\n          });\n          if (response.status === 200) {\n            console.log('关闭旧对话成功！:', response);\n          } else {\n            console.error('关闭旧对话失败！:', response);\n          }\n        }\n        // 更新当前聊天ID\n        this.chatId = newId;\n        // 获取聊天记录和当前对话信息\n        await this.getChatHistory();\n        await this.createOrFetchChat();\n      },\n      immediate: true // 立即执行\n    }\n  },\n  methods: {\n    ...mapActions('chat', ['getChatByID']),\n    async getChatHistory() {\n      try {\n        this.currentChat = await this.getChatByID(this.chatId);\n        console.log('currentChat Info:', this.currentChat);\n      } catch (error) {\n        console.error('获取聊天记录失败:', error);\n      }\n      try {\n        const response = await apifetchChatDetailedHistory({\n          chat_id: this.chatId\n        });\n        console.log('获取聊天记录成功：', response);\n        this.messages = response.data;\n        this.$nextTick(() => {\n          this.scrollToBottom();\n        });\n      } catch (error) {\n        console.error('获取聊天记录失败：', error);\n      }\n    },\n    async createOrFetchChat() {\n      try {\n        const requestBody = {\n          agent_id: this.currentChat.agent_id,\n          user_id: this.currentChat.user_id,\n          name: this.currentChat.name\n        };\n        if (this.currentChat.id) {\n          requestBody.chat_id = this.currentChat.id; // 如果是历史会话需要 chat_id\n        }\n        console.log('创建会话的请求体:', requestBody);\n        const response = await apicreateChat(requestBody); // 创建会话\n        if (response.status === 200) {\n          console.log('会话创建成功:', response);\n        } else {\n          console.error('会话创建失败:', response);\n        }\n      } catch (error) {\n        console.error('会话创建失败:', error);\n      }\n    },\n    scrollToBottom() {\n      const lastMessage = this.$refs.chatlog.lastElementChild;\n      if (lastMessage) {\n        lastMessage.scrollIntoView({\n          behavior: 'smooth'\n        });\n      }\n    },\n    async sendMessage() {\n      if (this.newMessage.trim() !== '') {\n        this.messages.push({\n          content: this.newMessage,\n          role: 'user'\n        });\n        const payload = {\n          chat_id: this.currentChat.id,\n          content: this.newMessage\n        };\n        console.log('发送消息的请求体:', payload);\n        try {\n          const response = await apisendMessage(payload);\n          if (response.status === 200) {\n            console.log('发送消息成功!!!:', response);\n            this.messages.push({\n              content: response.data.content,\n              role: 'assistant'\n            });\n          } else {\n            console.error('发送消息失败!!!:', response);\n            this.messages.push({\n              content: '对不起，我宕机啦。',\n              role: 'assistant'\n            });\n          }\n        } catch (error) {\n          console.error('发送消息失败:', error);\n          this.messages.push({\n            content: '对不起，当前机器人宕机啦。',\n            role: 'assistant'\n          });\n        }\n        this.newMessage = '';\n        this.$nextTick(() => {\n          this.scrollToBottom();\n        });\n      }\n    },\n    adjustInputWidth() {\n      const inputField = this.$refs.inputField;\n      const tempSpan = document.createElement('span');\n      document.body.appendChild(tempSpan);\n      tempSpan.style.visibility = 'hidden';\n      tempSpan.style.whiteSpace = 'pre';\n      tempSpan.style.font = getComputedStyle(inputField).font;\n      tempSpan.textContent = inputField.value || inputField.placeholder;\n      inputField.style.width = `${Math.max(100, tempSpan.scrollWidth + 20)}px`;\n      document.body.removeChild(tempSpan);\n    }\n  }\n};","map":{"version":3,"names":["fetchChatDetailedHistory","apifetchChatDetailedHistory","closeChat","apicloseChat","saveChatHistory","apisaveChatHistory","sendMessage","apisendMessage","createChat","apicreateChat","mapActions","name","data","newMessage","messages","userAvatar","require","botAvatar","currentChat","mounted","chatId","$route","params","id","getChatHistory","beforeDestroy","console","log","saveresponse","chat_id","status","error","response","created","createOrFetchChat","watch","handler","newId","oldId","immediate","methods","getChatByID","$nextTick","scrollToBottom","requestBody","agent_id","user_id","lastMessage","$refs","chatlog","lastElementChild","scrollIntoView","behavior","trim","push","content","role","payload","adjustInputWidth","inputField","tempSpan","document","createElement","body","appendChild","style","visibility","whiteSpace","font","getComputedStyle","textContent","value","placeholder","width","Math","max","scrollWidth","removeChild"],"sources":["src/views/ChatRobotPage.vue"],"sourcesContent":["<template>\n  <div class=\"chat-page\">\n    <title>Robot Center</title>\n    <h1 class=\"title\">Robot Chat</h1>\n    <div class=\"chat-info\">\n      <div class=\"chat-info-header\">\n        <strong>当前对话信息</strong>\n      </div>\n      <div class=\"chat-info-content\">\n        <div><strong>机器人名称:</strong> {{ currentChat.agent_name }}</div>\n        <div><strong>会话名称:</strong> {{ currentChat.name }}</div>\n      </div>\n    </div>\n    <div class=\"chat-window\">\n      <div class=\"chat-log\" id=\"chat-log\" ref=\"chatlog\">\n        <div\n          v-for=\"(msg, index) in messages\"\n          :key=\"index\"\n          :class=\"{\n            'message-wrapper': true,\n            'user-message-wrapper': msg.role === 'user',\n            'bot-message-wrapper': msg.role === 'assistant',\n          }\"\n        >\n          <!-- 机器人消息头像 -->\n          <img\n            v-if=\"msg.role === 'assistant'\"\n            :src=\"botAvatar\"\n            alt=\"avatar\"\n            class=\"avatar\"\n          />\n          <!-- 消息气泡框 -->\n          <div\n            :class=\"{\n              'message-bubble': true,\n              'user-message': msg.role === 'user',\n              'bot-message': msg.role === 'assistant',\n            }\"\n          >\n            {{ msg.content }}\n          </div>\n          <!-- 用户消息头像 -->\n          <img\n            v-if=\"msg.role === 'user'\"\n            :src=\"userAvatar\"\n            alt=\"avatar\"\n            class=\"avatar\"\n          />\n        </div>\n      </div>\n      <div class=\"input-container\">\n        <input\n          type=\"text\"\n          v-model=\"newMessage\"\n          placeholder=\"输入您感兴趣的东西...\"\n          @keyup.enter=\"sendMessage\"\n          @input=\"adjustInputWidth\"\n          ref=\"inputField\"\n        />\n        <button class=\"button\" @click=\"sendMessage\">发送</button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { fetchChatDetailedHistory as apifetchChatDetailedHistory } from '../utils/api';\nimport { closeChat as apicloseChat } from '../utils/api'; // 关闭对话\nimport { saveChatHistory as apisaveChatHistory } from '../utils/api'; // 保存对话\nimport { sendMessage as apisendMessage } from '../utils/api'; // 发送消息\nimport { createChat as apicreateChat } from '../utils/api'; // 创建对话\nimport { mapActions } from 'vuex';\n\nexport default {\n  name: 'ChatRobot',\n  data() {\n    return {\n      newMessage: '',\n      messages: [],\n      userAvatar: require('@/assets/images/Avatar/User.png'),\n      botAvatar: require('@/assets/images/Avatar/Assistant.png'),\n      currentChat: null,\n    };\n  },\n\n  mounted() {\n    this.chatId = this.$route.params.id;\n    this.getChatHistory();\n    // console.log('mounted每次都会执行哦');\n  },\n\n  async beforeDestroy() {\n    // 离开页面时关闭对话\n    const id = this.currentChat.id;\n    console.log('关闭对话的id:', id);\n    // 保存旧对话记录\n    const saveresponse = await apisaveChatHistory({ chat_id: id });\n    if (saveresponse.status === 200) {\n      console.log('保存旧对话记录成功！:', saveresponse);\n    } else {\n      console.error('保存旧对话记录失败！:', saveresponse);\n    }\n    const response = await apicloseChat({ chat_id: id });\n    if (response.status === 200) {\n      console.log('关闭对话:', response);\n    } else {\n      console.error('关闭对话失败:', response);\n    }\n    // this.saveChatHistory();\n  },\n\n  async created() {\n    this.chatId = this.$route.params.id;\n    console.log('Chat ID:', this.chatId);\n    await this.getChatHistory(); // 先获取聊天记录和当前对话信息\n    console.log('created每次都会执行哦');\n    await this.createOrFetchChat(); // 创建或获取对话\n  },\n  watch: {\n    // '$route.params.id'(newId, oldId) {\n    //   this.chatId = newId;\n    //   console.log('Updated Chat ID:', oldId, 'to', this.chatId);\n    //   console.log('watch每次都会执行哦');\n    //   this.getChatHistory();\n    //   this.createOrFetchChat();\n    // },\n    '$route.params.id': {\n      async handler(newId, oldId) {\n        this.chatId = newId;\n        console.log('Updated Chat ID:', oldId, 'to', this.chatId);\n        console.log('watch每次都会执行哦');\n\n        if (oldId) {\n          // 保存旧对话记录\n          const saveresponse = await apisaveChatHistory({ chat_id: oldId });\n          if (saveresponse.status === 200) {\n            console.log('保存旧对话记录成功！:', saveresponse);\n          } else {\n            console.error('保存旧对话记录失败！:', saveresponse);\n          }\n\n          // 关闭旧对话\n          console.log('关闭旧对话:', oldId);\n          const response = await apicloseChat({ chat_id: oldId });\n          if (response.status === 200) {\n            console.log('关闭旧对话成功！:', response);\n          } else {\n            console.error('关闭旧对话失败！:', response);\n          }\n        }\n        // 更新当前聊天ID\n        this.chatId = newId;\n        // 获取聊天记录和当前对话信息\n        await this.getChatHistory();\n        await this.createOrFetchChat();\n      },\n      immediate: true, // 立即执行\n    },\n  },\n  methods: {\n    ...mapActions('chat', ['getChatByID']),\n    async getChatHistory() {\n      try {\n        this.currentChat = await this.getChatByID(this.chatId);\n        console.log('currentChat Info:', this.currentChat);\n      } catch (error) {\n        console.error('获取聊天记录失败:', error);\n      }\n      try {\n        const response = await apifetchChatDetailedHistory({\n          chat_id: this.chatId,\n        });\n        console.log('获取聊天记录成功：', response);\n        this.messages = response.data;\n        this.$nextTick(() => {\n          this.scrollToBottom();\n        });\n      } catch (error) {\n        console.error('获取聊天记录失败：', error);\n      }\n    },\n    async createOrFetchChat() {\n      try {\n        const requestBody = {\n          agent_id: this.currentChat.agent_id,\n          user_id: this.currentChat.user_id,\n          name: this.currentChat.name,\n        };\n        if (this.currentChat.id) {\n          requestBody.chat_id = this.currentChat.id; // 如果是历史会话需要 chat_id\n        }\n        console.log('创建会话的请求体:', requestBody);\n        const response = await apicreateChat(requestBody); // 创建会话\n        if (response.status === 200) {\n          console.log('会话创建成功:', response);\n        } else {\n          console.error('会话创建失败:', response);\n        }\n      } catch (error) {\n        console.error('会话创建失败:', error);\n      }\n    },\n    scrollToBottom() {\n      const lastMessage = this.$refs.chatlog.lastElementChild;\n      if (lastMessage) {\n        lastMessage.scrollIntoView({ behavior: 'smooth' });\n      }\n    },\n    async sendMessage() {\n      if (this.newMessage.trim() !== '') {\n        this.messages.push({ content: this.newMessage, role: 'user' });\n        const payload = {\n          chat_id: this.currentChat.id,\n          content: this.newMessage,\n        };\n        console.log('发送消息的请求体:', payload);\n        try {\n          const response = await apisendMessage(payload);\n          if (response.status === 200) {\n            console.log('发送消息成功!!!:', response);\n            this.messages.push({\n              content: response.data.content,\n              role: 'assistant',\n            });\n          } else {\n            console.error('发送消息失败!!!:', response);\n            this.messages.push({\n              content: '对不起，我宕机啦。',\n              role: 'assistant',\n            });\n          }\n        } catch (error) {\n          console.error('发送消息失败:', error);\n          this.messages.push({\n            content: '对不起，当前机器人宕机啦。',\n            role: 'assistant',\n          });\n        }\n        this.newMessage = '';\n        this.$nextTick(() => {\n          this.scrollToBottom();\n        });\n      }\n    },\n    adjustInputWidth() {\n      const inputField = this.$refs.inputField;\n      const tempSpan = document.createElement('span');\n      document.body.appendChild(tempSpan);\n      tempSpan.style.visibility = 'hidden';\n      tempSpan.style.whiteSpace = 'pre';\n      tempSpan.style.font = getComputedStyle(inputField).font;\n      tempSpan.textContent = inputField.value || inputField.placeholder;\n      inputField.style.width = `${Math.max(100, tempSpan.scrollWidth + 20)}px`;\n      document.body.removeChild(tempSpan);\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@use '@/assets/styles/mixins.scss' as *;\n@use '@/assets/styles/variables.scss' as *;\n\n.chat-page {\n  max-width: 100%;\n  height: auto;\n  margin: 0;\n  padding: 20px;\n  background: linear-gradient(135deg, #2c2c2c, #1a1a1a);\n  color: $text-color;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: 'Roboto', sans-serif;\n}\n\n.title {\n  font-size: 3rem;\n  text-align: center;\n  margin-bottom: 20px;\n  color: #ffffff;\n  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);\n}\n\n.chat-info {\n  background-color: rgba(255, 255, 255, 0.9);\n  border-radius: 15px;\n  padding: 20px;\n  margin-bottom: 20px;\n  width: 50%;\n  max-width: 900px;\n  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);\n}\n\n.chat-info-header {\n  font-size: 1.8rem;\n  margin-bottom: 10px;\n  color: $accent-color;\n  text-align: center;\n}\n\n.chat-info-content {\n  font-size: 1.2rem;\n  color: #333;\n  text-align: center;\n}\n\n.chat-window {\n  position: relative;\n  flex: 1;\n  margin-top: 20px;\n  padding: 15px;\n  width: 100%;\n  max-width: 1000px;\n  border-radius: 15px;\n  display: flex;\n  flex-direction: column;\n  background-color: #333;\n  box-shadow: 0 8px 15px rgba(0, 0, 0, 0.3);\n}\n\n.chat-log {\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n  flex: 1;\n  overflow-y: auto;\n  scrollbar-width: thin;\n  scrollbar-color: #444 transparent;\n}\n\n.chat-log::-webkit-scrollbar {\n  width: 8px;\n}\n\n.chat-log::-webkit-scrollbar-thumb {\n  background-color: #444;\n  border-radius: 4px;\n}\n\n/* 消息容器样式 */\n.message-wrapper {\n  display: flex;\n  align-items: flex-start;\n  margin: 10px 0;\n}\n\n.user-message-wrapper {\n  justify-content: flex-end;\n}\n\n.bot-message-wrapper {\n  justify-content: flex-start;\n}\n\n/* 头像样式 */\n.avatar {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  margin: 0 10px;\n  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);\n}\n\n/* 消息气泡框样式 */\n.message-bubble {\n  max-width: 60%;\n  padding: 12px 16px;\n  border-radius: 20px;\n  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);\n  word-wrap: break-word;\n  font-size: 1rem;\n}\n\n.user-message .message-bubble {\n  background: linear-gradient(135deg, #007bff, #0056b3);\n  color: white;\n}\n\n.bot-message .message-bubble {\n  background: linear-gradient(135deg, #f0f0f0, #e0e0e0);\n  color: #333;\n}\n\n.user-message,\n.bot-message {\n  margin: 10px 0;\n  padding: 12px 16px;\n  border-radius: 20px;\n  max-width: 60%;\n  word-wrap: break-word;\n  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);\n}\n\n.user-message {\n  background: linear-gradient(135deg, #007bff, #0056b3);\n  color: white;\n  align-self: flex-end;\n}\n\n.bot-message {\n  background: linear-gradient(135deg, #f0f0f0, #e0e0e0);\n  color: #333;\n  align-self: flex-start;\n}\n\n.avatar {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  margin-right: 10px;\n  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);\n}\n\n.input-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #444;\n  padding: 15px;\n  border-radius: 10px;\n  margin-top: 10px;\n}\n\ninput[type='text'] {\n  padding: 12px;\n  border: none;\n  border-radius: 8px;\n  flex: 1;\n  min-width: 200px;\n  background-color: #555;\n  color: white;\n  font-size: 1rem;\n  transition: all 0.3s;\n}\n\ninput[type='text']:focus {\n  outline: none;\n  background-color: #666;\n}\n\nbutton {\n  padding: 12px 20px;\n  border: none;\n  background: linear-gradient(135deg, #007bff, #0056b3);\n  color: white;\n  border-radius: 8px;\n  cursor: pointer;\n  font-size: 1rem;\n  margin-left: 10px;\n  transition: all 0.3s;\n}\n\nbutton:hover {\n  background: linear-gradient(135deg, #0056b3, #003d7a);\n}\n\nbutton:active {\n  transform: scale(0.95);\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}