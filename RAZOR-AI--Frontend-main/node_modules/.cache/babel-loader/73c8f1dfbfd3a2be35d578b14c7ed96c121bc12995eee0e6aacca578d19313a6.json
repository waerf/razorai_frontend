{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport user from '@/store/user';\nimport { mapActions, mapState } from 'vuex';\nimport { saveChatHistory as apisaveChatHistory } from '../utils/api'; // 保存对话\nimport { sendMessage as apisendMessage } from '../utils/api'; // 发送消息\nimport { createChat as apicreateChat } from '../utils/api'; // 创建对话\nimport { closeChat as apicloseChat } from '../utils/api'; // 关闭对话\nimport { deleteChat as apideleteChat } from '../utils/api'; // 删除对话\nexport default {\n  data() {\n    return {\n      selectedRobot: null,\n      // 当前选中的机器人\n      userInput: '',\n      // 用户输入内容\n      loading: false // 加载状态\n    };\n  },\n  computed: {\n    ...mapState('user', ['isLoggedIn', 'userName', 'userId', 'token']),\n    // 绑定 Vuex 状态，当信息改变时，自动更新\n    ...mapState('agent', {\n      haveSubscribed: state => state.haveSubscribed\n    }),\n    filteredSubscribedRobots() {\n      return this.haveSubscribed.filter(robot => robot.status);\n    }\n  },\n  created() {\n    this.getUserSubscriptions(); // 获取用户订阅列表\n  },\n  methods: {\n    ...mapActions('agent', ['fetchUserSubscriptions']),\n    async getUserSubscriptions() {\n      try {\n        const user_id = user.state.userId;\n        console.log('user_id:', user_id);\n        const response = await this.fetchUserSubscriptions(user_id);\n        console.log('subscribed agents:', this.$store.state.agent.haveSubscribed);\n        if (this.$store.state.agent.haveSubscribed.length === 0) {\n          this.$message.info('您还没有订阅任何机器人');\n        } else {\n          this.$message.success('获取订阅机器人列表成功');\n          this.selectedRobot = this.haveSubscribed[0].agent_name; // 默认选择第一个机器人\n        }\n        console.log('response from getUserSubscriptions:', response);\n      } catch (error) {\n        console.error('error in getUserSubscriptions:', error);\n      }\n    },\n    truncate(text, length = 20) {\n      if (text === null || text === undefined) {\n        return '';\n      }\n      return text.length > length ? text.slice(0, length) + '...' : text;\n    },\n    async sendMessageToRobot() {\n      if (this.userInput.trim() && this.selectedRobot) {\n        // 名字为时间戳YMD+时间格式(精确到时分)\n        const defaultName = new Date().toLocaleDateString().replace(/\\//g, '') + new Date().toLocaleTimeString().slice(0, 5);\n\n        // 第一步，创造对话\n        // 第二步，发送消息\n        // 第三步, 保存用户发送消息和机器人回复消息\n        // 第四步，获取对话详细信息\n        // 第五步，更新对话列表\n        // 第六步，转到对话详细页面\n\n        // 第一步，创造对话, 获得chat_id\n        const chat_id = await this.createChatinHome(defaultName);\n        if (!chat_id) {\n          this.$message.error('无法创建对话，请稍后重试');\n          return;\n        }\n        // 第二步，发送消息\n        const answer = await this.sendMessageinHome(chat_id, this.userInput);\n        if (!answer || !answer.content) {\n          this.$message.error('无法发送消息，请稍后重试');\n          await this.closeChatinHome(chat_id);\n          await this.deleteChatinHome(chat_id);\n          return;\n        }\n        this.$message.success(`已向机器人 ${this.selectedRobot} 发送消息: ${this.userInput} 名称: ${defaultName} chat_id: ${chat_id}`);\n        console.log('answer.content:', answer.content);\n        console.log('answer.role:', answer.role);\n        this.userInput = '';\n\n        // 第三步，保存用户发送消息和机器人恢复信息到数据库\n        const responseFromSave = await this.saveChatHistoryinHome(chat_id);\n        if (responseFromSave.status === 200) {\n          console.log('保存对话成功:', responseFromSave);\n        } else {\n          this.$message.error('保存对话失败:', responseFromSave.message);\n          await this.closeChatinHome(chat_id);\n          await this.deleteChatinHome(chat_id);\n          return;\n        }\n        console.log('responseFromSave:', responseFromSave);\n\n        // 第四步，关闭会话\n        const responseFromClose = await this.closeChatinHome(chat_id);\n        if (responseFromClose.status === 200) {\n          this.$message.success('关闭对话成功:', responseFromClose.message);\n        } else {\n          this.$message.error('关闭对话失败:', responseFromClose.message);\n          await this.deleteChatinHome(chat_id);\n          return;\n        }\n\n        // 第五步，刷新并跳转到对话详情页面\n        await this.handleReloadAndNavigate(chat_id);\n        // await location.reload(); // 刷新页面\n        // await this.$router.replace({\n        //   name: 'ChatRobot',\n        //   params: { id: chat_id },\n        // });\n      } else {\n        this.$message.warning('请选择机器人并输入内容');\n      }\n    },\n    async handleReloadAndNavigate(chat_id) {\n      try {\n        // 跳转到目标页面，使用 replace 以替换当前历史记录\n        await this.$router.replace({\n          name: 'ChatRobot',\n          params: {\n            id: chat_id\n          }\n        });\n      } catch (error) {\n        console.error('导航失败:', error);\n      } finally {\n        // 刷新页面\n        this.$message.success('刷新页面');\n        location.reload(); // 刷新页面\n      }\n    },\n    async deleteChatinHome(id) {\n      try {\n        const response = await apideleteChat({\n          chat_id: id\n        });\n        if (response.status === 200) {\n          console.log('删除对话成功:', response);\n        } else {\n          console.error('删除对话失败:', response);\n        }\n        return response;\n      } catch (error) {\n        console.error('error in deleteChatinHome:', error);\n      }\n    },\n    async createChatinHome(defaultName) {\n      try {\n        // 根据this.selectedRobot获取agent_id\n        const robot = this.haveSubscribed.find(robot => robot.agent_name === this.selectedRobot);\n        if (!robot || !robot.agent_id) {\n          this.$message.error('无法获取机器人信息，请稍后重试');\n          return;\n        } else {\n          console.log('robot:', robot);\n          const payload = {\n            agent_id: robot.agent_id,\n            user_id: user.state.userId,\n            name: defaultName\n          };\n          console.log('xxxxxpayload:', payload);\n          const responseFromCreate = await apicreateChat(payload);\n          if (responseFromCreate.status === 200) {\n            console.log('创建对话成功:', responseFromCreate);\n            console.log('response.data.chat_id:', responseFromCreate.data.chat_id);\n            return responseFromCreate.data.chat_id;\n          } else {\n            console.error('创建对话失败:', responseFromCreate);\n          }\n        }\n      } catch (error) {\n        console.error('error in sendMessageToRobot:', error);\n      }\n    },\n    async sendMessageinHome(chat_id, content) {\n      // try {\n      //   const payload = {\n      //     chat_id: chat_id,\n      //     content: content,\n      //   };\n      //   console.log('xxxxxpayload:', payload);\n      //   const response = await apisendMessage(payload);\n      //   if (response.status === 200) {\n      //     console.log('发送消息成功:', response);\n      //     return response.data;\n      //   } else {\n      //     console.error('发送消息失败:', response);\n      //   }\n      //   console.log('test-response:', response);\n      // } catch (error) {\n      //   console.error('出错在sendMessageinHome:', error);\n      // }\n      const payload = {\n        chat_id: chat_id,\n        content: content\n      };\n      console.log('xxxxxpayload:', payload);\n      const response = await apisendMessage(payload);\n      if (response.status === 200) {\n        console.log('发送消息成功:', response);\n        return response.data;\n      } else {\n        console.error('发送消息失败:', response);\n      }\n      console.log('test-response:', response);\n    },\n    async saveChatHistoryinHome(id) {\n      try {\n        const response = await apisaveChatHistory({\n          chat_id: id\n        });\n        if (response.status === 200) {\n          console.log('保存对话成功:', response);\n        } else {\n          console.error('保存对话失败:', response);\n        }\n        return response;\n      } catch (error) {\n        console.error('error in saveChatHistoryinHome:', error);\n      }\n    },\n    async closeChatinHome(id) {\n      try {\n        const response = await apicloseChat({\n          chat_id: id\n        });\n        if (response.status === 200) {\n          console.log('关闭对话成功:', response);\n        } else {\n          console.error('关闭对话失败:', response);\n        }\n        return response;\n      } catch (error) {\n        console.error('error in closeChatinHome:', error);\n      }\n    },\n    handleRobotSelect(tab) {\n      this.selectedRobot = tab.name; // 当前选择机器人\n      this.$message.info(`已切换至机器人: ${this.selectedRobot}`);\n    },\n    // 导航方法\n    goToRobotMarket() {\n      this.$router.push({\n        name: 'RobotMarket'\n      });\n    },\n    goToSubscribedBots() {\n      this.$router.push({\n        name: 'SubscribedBots'\n      });\n    },\n    goToCreateBots() {\n      this.$router.push({\n        name: 'CreateBots'\n      });\n    },\n    goToConversationHistory() {\n      // 如果没有订阅的机器人，提示用户\n      if (this.haveSubscribed.length === 0) {\n        this.$message.warning('您还没有任何对话记录');\n        return;\n      }\n      // 跳转到第一个机器人的对话历史\n      const firstRobot = this.haveSubscribed[0];\n      this.$router.push({\n        name: 'ConversationHistory',\n        params: {\n          id: firstRobot.agent_id\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["user","mapActions","mapState","saveChatHistory","apisaveChatHistory","sendMessage","apisendMessage","createChat","apicreateChat","closeChat","apicloseChat","deleteChat","apideleteChat","data","selectedRobot","userInput","loading","computed","haveSubscribed","state","filteredSubscribedRobots","filter","robot","status","created","getUserSubscriptions","methods","user_id","userId","console","log","response","fetchUserSubscriptions","$store","agent","length","$message","info","success","agent_name","error","truncate","text","undefined","slice","sendMessageToRobot","trim","defaultName","Date","toLocaleDateString","replace","toLocaleTimeString","chat_id","createChatinHome","answer","sendMessageinHome","content","closeChatinHome","deleteChatinHome","role","responseFromSave","saveChatHistoryinHome","message","responseFromClose","handleReloadAndNavigate","warning","$router","name","params","id","location","reload","find","agent_id","payload","responseFromCreate","handleRobotSelect","tab","goToRobotMarket","push","goToSubscribedBots","goToCreateBots","goToConversationHistory","firstRobot"],"sources":["src/views/HomePage.vue"],"sourcesContent":["<!-- filepath: /d:/MyGitHub/razor-ai-frontend/src/views/HomePage.vue -->\n<template>\n  <div class=\"homepage\">\n    <!-- Logo 和名称 -->\n    <div class=\"header\">\n      <img src=\"@/assets/images/logo.png\" alt=\"Razor AI\" class=\"logo\" />\n      <h1 class=\"title\">Razor AI</h1>\n    </div>\n\n    <!-- 已经订阅的机器人选项卡和输入框 -->\n    <div class=\"subscribed-robots\">\n      <el-tabs\n        v-model=\"selectedRobot\"\n        class=\"subscribed-tabs\"\n        @tab-click=\"handleRobotSelect\"\n      >\n        <el-tab-pane\n          v-for=\"robot in filteredSubscribedRobots\"\n          :key=\"robot.agent_id\"\n          :label=\"robot.agent_name\"\n          :name=\"robot.agent_name\"\n        >\n        </el-tab-pane>\n      </el-tabs>\n      <div class=\"chat-input-section\">\n        <el-input\n          v-model=\"userInput\"\n          type=\"textarea\"\n          :autosize=\"{ minRows: 2, maxRows: 4 }\"\n          placeholder=\"选择机器人并输入您的问题...\"\n          class=\"chat-input\"\n          clearable\n        ></el-input>\n        <el-button\n          class=\"send-button\"\n          type=\"info\"\n          icon=\"el-icon-upload2\"\n          @click=\"sendMessageToRobot\"\n          >发送并创建对话</el-button\n        >\n      </div>\n    </div>\n\n    <!-- 快速访问区域 -->\n    <div class=\"quick-access-section\">\n      <h2 class=\"section-title\">快速访问</h2>\n      <div class=\"quick-access-cards\">\n        <el-card class=\"quick-access-card\" @click.native=\"goToRobotMarket\">\n          <div class=\"quick-access-icon\">\n            <i class=\"el-icon-goods\"></i>\n          </div>\n          <div class=\"quick-access-title\">机器人市场</div>\n          <div class=\"quick-access-description\">浏览和订阅AI机器人</div>\n        </el-card>\n\n        <el-card class=\"quick-access-card\" @click.native=\"goToSubscribedBots\">\n          <div class=\"quick-access-icon\">\n            <i class=\"el-icon-star-on\"></i>\n          </div>\n          <div class=\"quick-access-title\">我的订阅</div>\n          <div class=\"quick-access-description\">管理已订阅的机器人</div>\n        </el-card>\n\n        <el-card class=\"quick-access-card\" @click.native=\"goToCreateBots\">\n          <div class=\"quick-access-icon\">\n            <i class=\"el-icon-plus\"></i>\n          </div>\n          <div class=\"quick-access-title\">创建机器人</div>\n          <div class=\"quick-access-description\">创建自定义AI机器人</div>\n        </el-card>\n\n        <el-card\n          class=\"quick-access-card\"\n          @click.native=\"goToConversationHistory\"\n        >\n          <div class=\"quick-access-icon\">\n            <i class=\"el-icon-chat-line-round\"></i>\n          </div>\n          <div class=\"quick-access-title\">对话历史</div>\n          <div class=\"quick-access-description\">查看聊天记录</div>\n        </el-card>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport user from '@/store/user';\nimport { mapActions, mapState } from 'vuex';\nimport { saveChatHistory as apisaveChatHistory } from '../utils/api'; // 保存对话\nimport { sendMessage as apisendMessage } from '../utils/api'; // 发送消息\nimport { createChat as apicreateChat } from '../utils/api'; // 创建对话\nimport { closeChat as apicloseChat } from '../utils/api'; // 关闭对话\nimport { deleteChat as apideleteChat } from '../utils/api'; // 删除对话\nexport default {\n  data() {\n    return {\n      selectedRobot: null, // 当前选中的机器人\n      userInput: '', // 用户输入内容\n      loading: false, // 加载状态\n    };\n  },\n  computed: {\n    ...mapState('user', ['isLoggedIn', 'userName', 'userId', 'token']), // 绑定 Vuex 状态，当信息改变时，自动更新\n    ...mapState('agent', {\n      haveSubscribed: (state) => state.haveSubscribed,\n    }),\n    filteredSubscribedRobots() {\n      return this.haveSubscribed.filter((robot) => robot.status);\n    },\n  },\n  created() {\n    this.getUserSubscriptions(); // 获取用户订阅列表\n  },\n  methods: {\n    ...mapActions('agent', ['fetchUserSubscriptions']),\n    async getUserSubscriptions() {\n      try {\n        const user_id = user.state.userId;\n        console.log('user_id:', user_id);\n        const response = await this.fetchUserSubscriptions(user_id);\n        console.log(\n          'subscribed agents:',\n          this.$store.state.agent.haveSubscribed\n        );\n        if (this.$store.state.agent.haveSubscribed.length === 0) {\n          this.$message.info('您还没有订阅任何机器人');\n        } else {\n          this.$message.success('获取订阅机器人列表成功');\n          this.selectedRobot = this.haveSubscribed[0].agent_name; // 默认选择第一个机器人\n        }\n        console.log('response from getUserSubscriptions:', response);\n      } catch (error) {\n        console.error('error in getUserSubscriptions:', error);\n      }\n    },\n    truncate(text, length = 20) {\n      if (text === null || text === undefined) {\n        return '';\n      }\n      return text.length > length ? text.slice(0, length) + '...' : text;\n    },\n    async sendMessageToRobot() {\n      if (this.userInput.trim() && this.selectedRobot) {\n        // 名字为时间戳YMD+时间格式(精确到时分)\n        const defaultName =\n          new Date().toLocaleDateString().replace(/\\//g, '') +\n          new Date().toLocaleTimeString().slice(0, 5);\n\n        // 第一步，创造对话\n        // 第二步，发送消息\n        // 第三步, 保存用户发送消息和机器人回复消息\n        // 第四步，获取对话详细信息\n        // 第五步，更新对话列表\n        // 第六步，转到对话详细页面\n\n        // 第一步，创造对话, 获得chat_id\n        const chat_id = await this.createChatinHome(defaultName);\n        if (!chat_id) {\n          this.$message.error('无法创建对话，请稍后重试');\n          return;\n        }\n        // 第二步，发送消息\n        const answer = await this.sendMessageinHome(chat_id, this.userInput);\n        if (!answer || !answer.content) {\n          this.$message.error('无法发送消息，请稍后重试');\n          await this.closeChatinHome(chat_id);\n          await this.deleteChatinHome(chat_id);\n          return;\n        }\n        this.$message.success(\n          `已向机器人 ${this.selectedRobot} 发送消息: ${this.userInput} 名称: ${defaultName} chat_id: ${chat_id}`\n        );\n        console.log('answer.content:', answer.content);\n        console.log('answer.role:', answer.role);\n        this.userInput = '';\n\n        // 第三步，保存用户发送消息和机器人恢复信息到数据库\n        const responseFromSave = await this.saveChatHistoryinHome(chat_id);\n        if (responseFromSave.status === 200) {\n          console.log('保存对话成功:', responseFromSave);\n        } else {\n          this.$message.error('保存对话失败:', responseFromSave.message);\n          await this.closeChatinHome(chat_id);\n          await this.deleteChatinHome(chat_id);\n          return;\n        }\n        console.log('responseFromSave:', responseFromSave);\n\n        // 第四步，关闭会话\n        const responseFromClose = await this.closeChatinHome(chat_id);\n        if (responseFromClose.status === 200) {\n          this.$message.success('关闭对话成功:', responseFromClose.message);\n        } else {\n          this.$message.error('关闭对话失败:', responseFromClose.message);\n          await this.deleteChatinHome(chat_id);\n          return;\n        }\n\n        // 第五步，刷新并跳转到对话详情页面\n        await this.handleReloadAndNavigate(chat_id);\n        // await location.reload(); // 刷新页面\n        // await this.$router.replace({\n        //   name: 'ChatRobot',\n        //   params: { id: chat_id },\n        // });\n      } else {\n        this.$message.warning('请选择机器人并输入内容');\n      }\n    },\n\n    async handleReloadAndNavigate(chat_id) {\n      try {\n        // 跳转到目标页面，使用 replace 以替换当前历史记录\n        await this.$router.replace({\n          name: 'ChatRobot',\n          params: { id: chat_id },\n        });\n      } catch (error) {\n        console.error('导航失败:', error);\n      } finally {\n        // 刷新页面\n        this.$message.success('刷新页面');\n        location.reload(); // 刷新页面\n      }\n    },\n\n    async deleteChatinHome(id) {\n      try {\n        const response = await apideleteChat({ chat_id: id });\n        if (response.status === 200) {\n          console.log('删除对话成功:', response);\n        } else {\n          console.error('删除对话失败:', response);\n        }\n        return response;\n      } catch (error) {\n        console.error('error in deleteChatinHome:', error);\n      }\n    },\n\n    async createChatinHome(defaultName) {\n      try {\n        // 根据this.selectedRobot获取agent_id\n        const robot = this.haveSubscribed.find(\n          (robot) => robot.agent_name === this.selectedRobot\n        );\n        if (!robot || !robot.agent_id) {\n          this.$message.error('无法获取机器人信息，请稍后重试');\n          return;\n        } else {\n          console.log('robot:', robot);\n          const payload = {\n            agent_id: robot.agent_id,\n            user_id: user.state.userId,\n            name: defaultName,\n          };\n          console.log('xxxxxpayload:', payload);\n          const responseFromCreate = await apicreateChat(payload);\n          if (responseFromCreate.status === 200) {\n            console.log('创建对话成功:', responseFromCreate);\n            console.log(\n              'response.data.chat_id:',\n              responseFromCreate.data.chat_id\n            );\n            return responseFromCreate.data.chat_id;\n          } else {\n            console.error('创建对话失败:', responseFromCreate);\n          }\n        }\n      } catch (error) {\n        console.error('error in sendMessageToRobot:', error);\n      }\n    },\n    async sendMessageinHome(chat_id, content) {\n      // try {\n      //   const payload = {\n      //     chat_id: chat_id,\n      //     content: content,\n      //   };\n      //   console.log('xxxxxpayload:', payload);\n      //   const response = await apisendMessage(payload);\n      //   if (response.status === 200) {\n      //     console.log('发送消息成功:', response);\n      //     return response.data;\n      //   } else {\n      //     console.error('发送消息失败:', response);\n      //   }\n      //   console.log('test-response:', response);\n      // } catch (error) {\n      //   console.error('出错在sendMessageinHome:', error);\n      // }\n      const payload = {\n        chat_id: chat_id,\n        content: content,\n      };\n      console.log('xxxxxpayload:', payload);\n      const response = await apisendMessage(payload);\n      if (response.status === 200) {\n        console.log('发送消息成功:', response);\n        return response.data;\n      } else {\n        console.error('发送消息失败:', response);\n      }\n      console.log('test-response:', response);\n    },\n    async saveChatHistoryinHome(id) {\n      try {\n        const response = await apisaveChatHistory({ chat_id: id });\n        if (response.status === 200) {\n          console.log('保存对话成功:', response);\n        } else {\n          console.error('保存对话失败:', response);\n        }\n        return response;\n      } catch (error) {\n        console.error('error in saveChatHistoryinHome:', error);\n      }\n    },\n    async closeChatinHome(id) {\n      try {\n        const response = await apicloseChat({ chat_id: id });\n        if (response.status === 200) {\n          console.log('关闭对话成功:', response);\n        } else {\n          console.error('关闭对话失败:', response);\n        }\n        return response;\n      } catch (error) {\n        console.error('error in closeChatinHome:', error);\n      }\n    },\n\n    handleRobotSelect(tab) {\n      this.selectedRobot = tab.name; // 当前选择机器人\n      this.$message.info(`已切换至机器人: ${this.selectedRobot}`);\n    },\n\n    // 导航方法\n    goToRobotMarket() {\n      this.$router.push({ name: 'RobotMarket' });\n    },\n\n    goToSubscribedBots() {\n      this.$router.push({ name: 'SubscribedBots' });\n    },\n\n    goToCreateBots() {\n      this.$router.push({ name: 'CreateBots' });\n    },\n\n    goToConversationHistory() {\n      // 如果没有订阅的机器人，提示用户\n      if (this.haveSubscribed.length === 0) {\n        this.$message.warning('您还没有任何对话记录');\n        return;\n      }\n      // 跳转到第一个机器人的对话历史\n      const firstRobot = this.haveSubscribed[0];\n      this.$router.push({\n        name: 'ConversationHistory',\n        params: { id: firstRobot.agent_id },\n      });\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@use '@/assets/styles/variables.scss' as *;\n.homepage {\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  .header {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    margin-bottom: 20px;\n\n    .logo {\n      width: 100px;\n      height: 100px;\n    }\n\n    .title {\n      font-size: 2rem;\n      color: $primary-color;\n    }\n  }\n\n  .subscribed-robots {\n    width: 60%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    margin-bottom: 30px;\n\n    .subscribed-tabs {\n      width: 100%;\n    }\n\n    .chat-input-section {\n      display: flex;\n      align-items: center;\n      margin-top: 15px;\n      width: 100%;\n\n      .chat-input {\n        flex: 1;\n        margin-right: 15px;\n      }\n\n      .send-button {\n        width: 25%;\n        height: 100%;\n      }\n    }\n  }\n\n  .quick-access-section {\n    width: 100%;\n    max-width: 1200px;\n\n    .section-title {\n      font-size: 1.75rem;\n      margin-top: 0;\n      margin-bottom: 30px;\n      text-align: center;\n      color: $text-color;\n    }\n\n    .quick-access-cards {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n      gap: 20px;\n      margin-bottom: 30px;\n\n      .quick-access-card {\n        cursor: pointer;\n        transition: all 0.3s ease;\n        border: 1px solid $border-color;\n        text-align: center;\n        padding: 30px 20px;\n\n        &:hover {\n          transform: translateY(-5px);\n          box-shadow: $box-shadow-medium;\n          background-color: $hover-background-color;\n        }\n\n        .quick-access-icon {\n          font-size: 3rem;\n          color: $accent-color;\n          margin-bottom: 15px;\n\n          i {\n            display: block;\n          }\n        }\n\n        .quick-access-title {\n          font-size: 1.2rem;\n          font-weight: 600;\n          color: $text-color;\n          margin-bottom: 10px;\n        }\n\n        .quick-access-description {\n          font-size: 0.9rem;\n          color: $secondary-color;\n          line-height: 1.4;\n        }\n      }\n    }\n  }\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}