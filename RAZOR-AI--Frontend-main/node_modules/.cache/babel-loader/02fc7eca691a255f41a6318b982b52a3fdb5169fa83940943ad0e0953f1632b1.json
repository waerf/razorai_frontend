{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport LoginForm from '@/components/LoginForm.vue'; // 引入登录表单组件\nimport { mapGetters, mapState, mapActions } from 'vuex'; // 引入 mapGetters, mapActions\nimport user from '@/store/user';\nexport default {\n  components: {\n    LoginForm\n  },\n  data() {\n    return {\n      loginDialogVisible: false,\n      isSidebarHidden: false,\n      // 控制菜单栏是否隐藏\n      navigation: 'RAZOR-AI',\n      currentActiveTab: 'RAZOR-AI' // 添加当前激活标签状态\n    };\n  },\n  created() {\n    this.getAllChats();\n    // 根据当前路由设置初始激活状态\n    if (this.$route.path.includes('community')) {\n      this.currentActiveTab = 'Community';\n      this.navigation = 'Community';\n    } else {\n      this.currentActiveTab = 'RAZOR-AI';\n      this.navigation = 'RAZOR-AI';\n    }\n  },\n  computed: {\n    ...mapGetters('user', ['isLoggedIn', 'userId', 'userName']),\n    // 映射 getters\n    ...mapState('chat', {\n      chatlists: state => state.chats\n    }),\n    ...mapState('user', ['isLoggedIn', 'userName', 'userId', 'token']),\n    // 绑定 Vuex 状态，当信息改变时，自动更新\n    headername_withRazorAI() {\n      if (this.navigation != 'RAZOR-AI') return 'RAZOR-AI';\n      // 从当前路由的 meta 信息中获取标题\n      // console.log('当前路由：', this.$route);\n      this.$message('当前路由：' + this.$route.path);\n      return this.$route.meta.title;\n    },\n    headername_withCommunity() {\n      if (this.navigation != 'Community') return '社区';\n      // 从当前路由的 meta 信息中获取标题并修改前缀\n      // console.log('当前路由：', this.$route);\n      this.$message('当前路由：' + this.$route.path);\n      const fullTitle = this.$route.meta.title || '默认标题';\n      return '社区-' + fullTitle.replace(/^(RazorAI-|RAZOR-AI-)/i, '');\n    }\n  },\n  methods: {\n    ...mapActions('chat', ['fetchChats']),\n    // 映射 actions, 用于获取聊天列表\n    async getAllChats() {\n      try {\n        const response = await this.fetchChats({\n          user_id: user.state.userId\n        });\n        console.log('获取聊天列表成功：', response);\n      } catch (error) {\n        console.error('获取聊天列表失败：', error);\n      }\n    },\n    toggleSidebar() {\n      this.isSidebarHidden = !this.isSidebarHidden;\n    },\n    switchNavigationTo(navigation) {\n      // 更新当前激活的标签\n      this.currentActiveTab = navigation;\n      this.navigation = navigation;\n\n      // 根据不同的导航执行不同的逻辑\n      if (navigation === 'RAZOR-AI') {\n        this.navigateTo('Home');\n      } else if (navigation === 'Community') {\n        // 如果有Community页面的话\n        console.log('切换到Community页面');\n        // this.navigateTo('Community');\n      }\n\n      // 重置侧边栏状态\n      this.isSidebarHidden = false;\n    },\n    navigateTo(route) {\n      if (this.$route.name !== route) {\n        this.$router.push({\n          name: route\n        });\n      }\n    },\n    openLoginDialog() {\n      this.loginDialogVisible = true;\n    },\n    // 跳转到聊天详情页\n    navigateToChat(chatId) {\n      // 如果当前页面的id和chatId相同，则不跳转\n      if (this.$route.params.id === chatId) {\n        return;\n      }\n      this.$router.push({\n        name: 'ChatRobot',\n        params: {\n          id: chatId\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["LoginForm","mapGetters","mapState","mapActions","user","components","data","loginDialogVisible","isSidebarHidden","navigation","currentActiveTab","created","getAllChats","$route","path","includes","computed","chatlists","state","chats","headername_withRazorAI","$message","meta","title","headername_withCommunity","fullTitle","replace","methods","response","fetchChats","user_id","userId","console","log","error","toggleSidebar","switchNavigationTo","navigateTo","route","name","$router","push","openLoginDialog","navigateToChat","chatId","params","id"],"sources":["src/layouts/defaultLayout.vue"],"sourcesContent":["<template>\n  <div class=\"layout-container\">\n    <!-- 顶部导航栏 -->\n    <el-header class=\"ourHeader\">\n      <div class=\"logo-button-container\">\n        <img\n          @click=\"toggleSidebar\"\n          class=\"logo\"\n          src=\"@/assets/images/logo.png\"\n          alt=\"Logo\"\n        />\n        <div class=\"company-name\">RAZOR-AI</div>\n      </div>\n\n      <!-- 通过占位实现位置的偏移 -->\n      <h2 class=\"header-name-empty\">{{ ' ' }}</h2>\n      <h2 \n        class=\"header-name\" \n        :class=\"{ active: currentActiveTab === 'RAZOR-AI' }\"\n        @click=\"switchNavigationTo('RAZOR-AI')\"\n      >\n        {{ headername_withRazorAI }}\n      </h2>\n      <h2 \n        class=\"header-name\" \n        :class=\"{ active: currentActiveTab === 'Community' }\"\n        @click=\"switchNavigationTo('Community')\"\n      >\n        {{ headername_withCommunity }}\n      </h2>\n      <h2 class=\"header-name-empty\">{{ ' ' }}</h2>\n      <div class=\"user-info\">\n        <el-icon name=\"user\"></el-icon>\n        <span v-if=\"!isLoggedIn\" @click=\"openLoginDialog\">用户登录</span>\n        <span v-else @click=\"navigateTo('PersonalHome')\"\n          >你好，{{ userName }}</span\n        >\n      </div>\n    </el-header>\n\n    <!-- 下半部分：左右布局 -->\n    <!-- 左侧菜单栏 -->\n    <!-- 在导航为RAZOR-AI时 -->\n    <div class=\"main-content\">\n      <aside\n        v-if=\"navigation == 'RAZOR-AI'\"\n        class=\"sidebar\"\n        :class=\"{ hidden: isSidebarHidden }\"\n      >\n        <!-- 侧边栏显示隐藏按键 -->\n        <div\n          v-if=\"!isSidebarHidden\"\n          class=\"sidebar-button\"\n          @click=\"toggleSidebar\"\n        >\n          <el-icon name=\"s-fold\" class=\"sidebar-button-icon\"></el-icon>\n        </div>\n        <div\n          v-if=\"isSidebarHidden\"\n          class=\"sidebar-button\"\n          @click=\"toggleSidebar\"\n        >\n          <el-icon name=\"s-unfold\" class=\"sidebar-button-icon\"></el-icon>\n        </div>\n        <!-- 主要功能区域 -->\n        <div \n          class=\"menu-item\" \n          :class=\"{ active: $route.name === 'Home' }\"\n          @click=\"navigateTo('Home')\"\n        >\n          <el-icon name=\"s-home\" class=\"menu-item-icon\"></el-icon>首页\n        </div>\n        <div \n          class=\"menu-item\" \n          :class=\"{ active: $route.name === 'SubscribedBots' }\"\n          @click=\"navigateTo('SubscribedBots')\"\n        >\n          <el-icon name=\"s-opportunity\" class=\"menu-item-icon\"></el-icon>\n          已订阅机器人\n        </div>\n        <div \n          class=\"menu-item\" \n          :class=\"{ active: $route.name === 'RobotMarket' }\"\n          @click=\"navigateTo('RobotMarket')\"\n        >\n          <el-icon name=\"goods\" class=\"menu-item-icon\"></el-icon>机器人市场\n        </div>\n        <div \n          class=\"menu-item\" \n          :class=\"{ active: $route.name === 'CreateBots' }\"\n          @click=\"navigateTo('CreateBots')\"\n        >\n          <el-icon name=\"coordinate\" class=\"menu-item-icon\"></el-icon>创造机器人\n        </div>\n        <div \n          class=\"menu-item\" \n          :class=\"{ active: $route.name === 'ConversationHistory' }\"\n          @click=\"navigateTo('ConversationHistory')\"\n        >\n          <el-icon name=\"time\" class=\"menu-item-icon\"></el-icon>历史记录\n        </div>\n        <!-- <div class=\"menu-item\" @click=\"navigateTo('PersonalHome')\">\n          <el-icon name=\"s-custom\" class=\"menu-item-icon\"></el-icon>个人主页\n        </div> -->\n        <!-- <div class=\"menu-item\" @click=\"navigateTo('Test')\">\n          <el-icon name=\"chat-line-round\" class=\"menu-item-icon\"></el-icon\n          >睿择社区\n        </div> -->\n        <!-- <div class=\"menu-item\" @click=\"navigateTo('Setting')\">\n          <el-icon name=\"setting\" class=\"menu-item-icon\"></el-icon>系统设置\n        </div> -->\n        <!-- <div class=\"menu-item\" @click=\"navigateTo('About')\">\n          <el-icon name=\"info\" class=\"menu-item-icon\"></el-icon>关于我们\n        </div> -->\n        <!-- <div class=\"divider\">\n        </div> -->\n        <!-- <div class=\"menu-item\" @click=\"navigateTo('HelperCenter')\">\n          <el-icon name=\"question\" class=\"menu-item-icon\"></el-icon>帮助中心\n        </div> -->\n        <!-- <div class=\"menu-item\" @click=\"navigateTo('Explorer')\">\n          <el-icon name=\"goods\" class=\"menu-item-icon\"></el-icon>探索机器人\n        </div> -->\n        <!-- <div class=\"menu-item\" @click=\"navigateTo('DeveloperCenter')\">\n          <el-icon name=\"coordinate\" class=\"menu-item-icon\"></el-icon>开发者中心\n        </div> -->\n        <!-- <div class=\"menu-item\" @click=\"navigateTo('Test')\">\n          <el-icon name=\"loading\" class=\"menu-item-icon\"></el-icon>测试页面\n        </div> -->\n        <div class=\"chat-history\">\n          <div\n            class=\"chat-item\"\n            v-for=\"chat in chatlists\"\n            :key=\"chat.id\"\n            @click=\"navigateToChat(chat.id)\"\n          >\n            <el-icon name=\"chat-dot-square\" class=\"chat-icon\"></el-icon\n            >{{ chat.name }}\n            <span>{{ chat.agent_name }}</span>\n          </div>\n        </div>\n      </aside>\n\n      <aside\n        v-if=\"navigation == 'Community'\"\n        class=\"sidebar\"\n        :class=\"{ hidden: isSidebarHidden }\"\n      >\n        <!-- 主要功能区域 -->\n        <div class=\"menu-item\" @click=\"navigateTo('Home')\">\n          <el-icon name=\"s-home\" class=\"menu-item-icon\"></el-icon>首页\n        </div>\n      </aside>\n\n      <!-- 右侧内容区域 -->\n      <el-main>\n        <router-view></router-view>\n      </el-main>\n    </div>\n\n    <!-- 登录对话框 -->\n    <el-dialog\n      :visible.sync=\"loginDialogVisible\"\n      name=\"用户登录\"\n      :modal=\"true\"\n      :close-on-click-modal=\"false\"\n      center\n      width=\"40%\"\n    >\n      <LoginForm @close=\"loginDialogVisible = false\" />\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport LoginForm from '@/components/LoginForm.vue'; // 引入登录表单组件\nimport { mapGetters, mapState, mapActions } from 'vuex'; // 引入 mapGetters, mapActions\nimport user from '@/store/user';\nexport default {\n  components: {\n    LoginForm,\n  },\n  data() {\n    return {\n      loginDialogVisible: false,\n      isSidebarHidden: false, // 控制菜单栏是否隐藏\n      navigation: 'RAZOR-AI',\n      currentActiveTab: 'RAZOR-AI', // 添加当前激活标签状态\n    };\n  },\n  created() {\n    this.getAllChats();\n    // 根据当前路由设置初始激活状态\n    if (this.$route.path.includes('community')) {\n      this.currentActiveTab = 'Community';\n      this.navigation = 'Community';\n    } else {\n      this.currentActiveTab = 'RAZOR-AI';\n      this.navigation = 'RAZOR-AI';\n    }\n  },\n  computed: {\n    ...mapGetters('user', ['isLoggedIn', 'userId', 'userName']), // 映射 getters\n    ...mapState('chat', {\n      chatlists: (state) => state.chats,\n    }),\n    ...mapState('user', ['isLoggedIn', 'userName', 'userId', 'token']), // 绑定 Vuex 状态，当信息改变时，自动更新\n    headername_withRazorAI() {\n      if (this.navigation != 'RAZOR-AI') return 'RAZOR-AI';\n      // 从当前路由的 meta 信息中获取标题\n      // console.log('当前路由：', this.$route);\n      this.$message('当前路由：' + this.$route.path);\n      return this.$route.meta.title;\n    },\n    headername_withCommunity() {\n      if (this.navigation != 'Community') return '社区';\n      // 从当前路由的 meta 信息中获取标题并修改前缀\n      // console.log('当前路由：', this.$route);\n      this.$message('当前路由：' + this.$route.path);\n      const fullTitle = this.$route.meta.title || '默认标题';\n      return '社区-' + fullTitle.replace(/^(RazorAI-|RAZOR-AI-)/i, '');\n    },\n  },\n  methods: {\n    ...mapActions('chat', ['fetchChats']), // 映射 actions, 用于获取聊天列表\n    async getAllChats() {\n      try {\n        const response = await this.fetchChats({\n          user_id: user.state.userId,\n        });\n        console.log('获取聊天列表成功：', response);\n      } catch (error) {\n        console.error('获取聊天列表失败：', error);\n      }\n    },\n    toggleSidebar() {\n      this.isSidebarHidden = !this.isSidebarHidden;\n    },\n    switchNavigationTo(navigation) {\n      // 更新当前激活的标签\n      this.currentActiveTab = navigation;\n      this.navigation = navigation;\n      \n      // 根据不同的导航执行不同的逻辑\n      if (navigation === 'RAZOR-AI') {\n        this.navigateTo('Home');\n      } else if (navigation === 'Community') {\n        // 如果有Community页面的话\n        console.log('切换到Community页面');\n        // this.navigateTo('Community');\n      }\n      \n      // 重置侧边栏状态\n      this.isSidebarHidden = false;\n    },\n    navigateTo(route) {\n      if (this.$route.name !== route) {\n        this.$router.push({ name: route });\n      }\n    },\n    openLoginDialog() {\n      this.loginDialogVisible = true;\n    },\n    // 跳转到聊天详情页\n    navigateToChat(chatId) {\n      // 如果当前页面的id和chatId相同，则不跳转\n      if (this.$route.params.id === chatId) {\n        return;\n      }\n      this.$router.push({ name: 'ChatRobot', params: { id: chatId } });\n    },\n  },\n};\n</script>\n<style lang=\"scss\" scoped>\n@use '@/assets/styles/layout.scss' as *;\n</style>\n"],"mappings":";AA8KA,OAAAA,SAAA;AACA,SAAAC,UAAA,EAAAC,QAAA,EAAAC,UAAA;AACA,OAAAC,IAAA;AACA;EACAC,UAAA;IACAL;EACA;EACAM,KAAA;IACA;MACAC,kBAAA;MACAC,eAAA;MAAA;MACAC,UAAA;MACAC,gBAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,WAAA;IACA;IACA,SAAAC,MAAA,CAAAC,IAAA,CAAAC,QAAA;MACA,KAAAL,gBAAA;MACA,KAAAD,UAAA;IACA;MACA,KAAAC,gBAAA;MACA,KAAAD,UAAA;IACA;EACA;EACAO,QAAA;IACA,GAAAf,UAAA;IAAA;IACA,GAAAC,QAAA;MACAe,SAAA,EAAAC,KAAA,IAAAA,KAAA,CAAAC;IACA;IACA,GAAAjB,QAAA;IAAA;IACAkB,uBAAA;MACA,SAAAX,UAAA;MACA;MACA;MACA,KAAAY,QAAA,gBAAAR,MAAA,CAAAC,IAAA;MACA,YAAAD,MAAA,CAAAS,IAAA,CAAAC,KAAA;IACA;IACAC,yBAAA;MACA,SAAAf,UAAA;MACA;MACA;MACA,KAAAY,QAAA,gBAAAR,MAAA,CAAAC,IAAA;MACA,MAAAW,SAAA,QAAAZ,MAAA,CAAAS,IAAA,CAAAC,KAAA;MACA,eAAAE,SAAA,CAAAC,OAAA;IACA;EACA;EACAC,OAAA;IACA,GAAAxB,UAAA;IAAA;IACA,MAAAS,YAAA;MACA;QACA,MAAAgB,QAAA,cAAAC,UAAA;UACAC,OAAA,EAAA1B,IAAA,CAAAc,KAAA,CAAAa;QACA;QACAC,OAAA,CAAAC,GAAA,cAAAL,QAAA;MACA,SAAAM,KAAA;QACAF,OAAA,CAAAE,KAAA,cAAAA,KAAA;MACA;IACA;IACAC,cAAA;MACA,KAAA3B,eAAA,SAAAA,eAAA;IACA;IACA4B,mBAAA3B,UAAA;MACA;MACA,KAAAC,gBAAA,GAAAD,UAAA;MACA,KAAAA,UAAA,GAAAA,UAAA;;MAEA;MACA,IAAAA,UAAA;QACA,KAAA4B,UAAA;MACA,WAAA5B,UAAA;QACA;QACAuB,OAAA,CAAAC,GAAA;QACA;MACA;;MAEA;MACA,KAAAzB,eAAA;IACA;IACA6B,WAAAC,KAAA;MACA,SAAAzB,MAAA,CAAA0B,IAAA,KAAAD,KAAA;QACA,KAAAE,OAAA,CAAAC,IAAA;UAAAF,IAAA,EAAAD;QAAA;MACA;IACA;IACAI,gBAAA;MACA,KAAAnC,kBAAA;IACA;IACA;IACAoC,eAAAC,MAAA;MACA;MACA,SAAA/B,MAAA,CAAAgC,MAAA,CAAAC,EAAA,KAAAF,MAAA;QACA;MACA;MACA,KAAAJ,OAAA,CAAAC,IAAA;QAAAF,IAAA;QAAAM,MAAA;UAAAC,EAAA,EAAAF;QAAA;MAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}