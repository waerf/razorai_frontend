{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mapActions, mapState } from 'vuex';\nimport { getUserInfo, updateUserInfo, getUserPoints, getPointsHistory, rechargePoints } from '@/utils/api';\nexport default {\n  name: 'UserProfile',\n  data() {\n    return {\n      avatar: 'https://via.placeholder.com/150',\n      loading: true,\n      userInfo: {\n        user_id: null,\n        user_name: '',\n        email: '',\n        phone: '',\n        gender: null,\n        age: null,\n        birthday: null,\n        organization: '',\n        profile: '',\n        points: 0,\n        created_at: null,\n        updated_at: null\n      },\n      interestModules: ['编程', '旅游', '健身'],\n      friends: ['何雯宏', '许昕格', '王加添'],\n      favoriteRobots: ['R2-D2', 'C-3PO', 'Optimus Prime'],\n      favoriteTools: ['VS Code', 'Sublime Text', 'WebStorm'],\n      // 编辑对话框相关\n      editDialogVisible: false,\n      saveLoading: false,\n      editForm: {\n        UserName: '',\n        Email: '',\n        Phone: '',\n        Gender: null,\n        Age: null,\n        Birthday: null,\n        Organization: '',\n        Profile: '',\n        Password: '' // 添加密码字段\n      },\n      editRules: {\n        UserName: [{\n          required: true,\n          message: '请输入用户名',\n          trigger: 'blur'\n        }, {\n          min: 3,\n          max: 20,\n          message: '用户名长度应为3-20个字符',\n          trigger: 'blur'\n        }],\n        Organization: [{\n          max: 100,\n          message: '机构名称不能超过100个字符',\n          trigger: 'blur'\n        }],\n        Profile: [{\n          max: 500,\n          message: '个人简介不能超过500个字符',\n          trigger: 'blur'\n        }],\n        Password: [{\n          required: true,\n          message: '请输入当前密码',\n          trigger: 'blur'\n        }, {\n          min: 6,\n          message: '密码长度至少6位',\n          trigger: 'blur'\n        }]\n      },\n      // 积分明细相关\n      pointsHistoryDialogVisible: false,\n      pointsLoading: false,\n      currentPointsTab: 'all',\n      // 当前选中的积分标签页\n      currentPointsPage: 1,\n      // 当前页码\n      pointsPageSize: 5,\n      // 每页显示的记录数\n      pointsData: [],\n      // 积分记录数据\n\n      // 充值积分相关\n      rechargeDialogVisible: false,\n      rechargeLoading: false,\n      rechargeForm: {\n        points: 100,\n        description: '用户充值积分'\n      },\n      rechargeRules: {\n        points: [{\n          required: true,\n          message: '请输入充值积分数量',\n          trigger: 'blur'\n        }, {\n          type: 'number',\n          min: 10,\n          max: 10000,\n          message: '充值积分需在10-10000之间',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  computed: {\n    ...mapState('user', ['userId', 'userName']),\n    // 积分明细相关计算属性\n    filteredPointsData() {\n      if (this.currentPointsTab === 'all') {\n        return this.pointsData;\n      } else if (this.currentPointsTab === 'in') {\n        return this.pointsData.filter(item => item.badge === 'in');\n      } else if (this.currentPointsTab === 'out') {\n        return this.pointsData.filter(item => item.badge === 'out');\n      }\n      return this.pointsData;\n    },\n    paginatedPointsData() {\n      const start = (this.currentPointsPage - 1) * this.pointsPageSize;\n      const end = start + this.pointsPageSize;\n      return this.filteredPointsData.slice(start, end);\n    },\n    totalPointsPages() {\n      return Math.ceil(this.filteredPointsData.length / this.pointsPageSize);\n    }\n  },\n  async created() {\n    await this.loadUserInfo();\n  },\n  methods: {\n    ...mapActions('user', ['logout']),\n    // 登出功能\n    handleLogout() {\n      this.$confirm('确定要退出登录吗？', '确认退出', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(async () => {\n        try {\n          // 调用store中的logout action\n          await this.logout();\n          this.$message.success('已成功退出登录');\n\n          // 跳转到登录页面或首页\n          this.$router.push('/').catch(() => {\n            // 如果没有登录页面，跳转到首页\n            this.$router.push('/');\n          });\n        } catch (error) {\n          console.error('退出登录失败:', error);\n          this.$message.error('退出登录失败，请重试');\n        }\n      }).catch(() => {\n        // 用户取消登出，不需要处理\n      });\n    },\n    async loadUserInfo() {\n      try {\n        this.loading = true;\n        console.log('当前用户状态:', {\n          userId: this.userId,\n          userName: this.userName,\n          isLoggedIn: this.$store.state.user.isLoggedIn\n        });\n        if (this.userId) {\n          // 加载用户基本信息\n          const response = await getUserInfo(this.userId);\n          this.userInfo = response.data;\n          console.log('用户信息加载成功:', this.userInfo);\n\n          // 单独加载积分信息（根据后端文档，积分需要单独获取）\n          try {\n            const pointsResponse = await getUserPoints();\n            this.userInfo.points = this.validateAndFormatPoints(pointsResponse.data.points);\n            console.log('积分信息加载成功:', this.userInfo.points);\n          } catch (pointsError) {\n            console.warn('积分信息加载失败，使用默认值0:', pointsError);\n            this.userInfo.points = 0;\n          }\n        } else {\n          console.log('userId为空，当前store状态:', this.$store.state.user);\n          this.$message.error('用户ID不存在，请重新登录');\n        }\n      } catch (error) {\n        console.error('加载用户信息失败:', error);\n        this.$message.error('加载用户信息失败：' + (error.message || '未知错误'));\n      } finally {\n        this.loading = false;\n      }\n    },\n    validateAndFormatPoints(points) {\n      // 验证和格式化积分数据\n      if (typeof points === 'number' && points >= 0) {\n        return Math.floor(points); // 确保是整数\n      }\n      return 0; // 默认值\n    },\n    getGenderText(gender) {\n      const genderMap = {\n        1: '男',\n        2: '女',\n        0: '其他'\n      };\n      return genderMap[gender] || '未设置';\n    },\n    formatDate(dateString) {\n      if (!dateString) return '未知';\n      return new Date(dateString).toLocaleString('zh-CN');\n    },\n    formatBirthday(dateString) {\n      if (!dateString) return '未设置';\n      return new Date(dateString).toLocaleDateString('zh-CN');\n    },\n    // 积分相关方法 - 仅用于购买机器人\n    // 已删除会员等级相关方法\n\n    earnPointsDialog() {\n      this.$msgbox({\n        title: '积分用途',\n        message: `\n          <div>\n            <p>� <strong>积分可用于：</strong></p>\n            <ul>\n              <li>🤖 购买机器人功能</li>\n              <li>🛒 机器人市场消费</li>\n              <li>⭐ 解锁高级机器人</li>\n            </ul>\n            <br>\n            <p>�💡 <strong>如何获取积分：</strong></p>\n            <ul>\n              <li>🤖 创建机器人：+50积分</li>\n              <li>💬 发表评论：+10积分</li>\n              <li>👍 获得点赞：+5积分</li>\n              <li>📝 发表文章：+30积分</li>\n              <li>📅 每日签到：+10积分</li>\n            </ul>\n          </div>\n        `,\n        dangerouslyUseHTMLString: true,\n        showCancelButton: false,\n        confirmButtonText: '知道了'\n      });\n    },\n    // 编辑用户信息相关方法\n    openEditDialog() {\n      this.editForm = {\n        UserName: this.userInfo.user_name || '',\n        Email: this.userInfo.email || '',\n        Phone: this.userInfo.phone || '',\n        Gender: this.userInfo.gender,\n        Age: this.userInfo.age,\n        Birthday: this.userInfo.birthday || null,\n        Organization: this.userInfo.organization || '',\n        Profile: this.userInfo.profile || '',\n        Password: '' // 重置密码字段\n      };\n      this.editDialogVisible = true;\n    },\n    resetEditForm() {\n      if (this.$refs.editForm) {\n        this.$refs.editForm.resetFields();\n      }\n    },\n    async saveUserInfo() {\n      try {\n        await this.$refs.editForm.validate();\n        this.saveLoading = true;\n\n        // 转换为后端期望的格式\n        const updateData = {\n          NewUsername: this.editForm.UserName,\n          NewGender: this.editForm.Gender,\n          NewAge: this.editForm.Age,\n          Password: this.editForm.Password // 需要添加密码字段\n        };\n        console.log('准备更新的数据:', updateData);\n        console.log('用户ID:', this.userId);\n        const response = await updateUserInfo(this.userId, updateData);\n        console.log('API响应:', response);\n\n        // 检查不同的响应格式\n        if (response && response.data) {\n          // 如果有data字段，检查data中的success\n          if (response.data.success !== false) {\n            this.$message.success('个人信息更新成功！');\n            this.editDialogVisible = false;\n            await this.loadUserInfo(); // 重新加载用户信息\n            return;\n          } else {\n            throw new Error(response.data.message || response.data.error || '更新失败');\n          }\n        } else if (response && response.success !== false && response.status !== 'error') {\n          // 直接检查响应对象\n          this.$message.success('个人信息更新成功！');\n          this.editDialogVisible = false;\n          await this.loadUserInfo();\n          return;\n        } else {\n          throw new Error(response.message || response.error || '服务器返回更新失败');\n        }\n      } catch (error) {\n        console.error('保存用户信息详细错误:', error);\n        console.error('错误响应:', error.response);\n        let errorMessage = '请检查网络连接';\n        if (error.response) {\n          // 服务器返回了错误状态码\n          if (error.response.data) {\n            errorMessage = error.response.data.message || error.response.data.error || `服务器错误 (${error.response.status})`;\n          } else {\n            errorMessage = `网络错误 (${error.response.status})`;\n          }\n        } else if (error.message) {\n          // 其他错误（包括我们手动抛出的错误）\n          errorMessage = error.message;\n        }\n        this.$message.error('保存失败：' + errorMessage);\n      } finally {\n        this.saveLoading = false;\n      }\n    },\n    // 积分明细相关方法\n    viewPointsHistory() {\n      this.pointsHistoryDialogVisible = true;\n      this.loadPointsHistory();\n    },\n    async loadPointsHistory() {\n      this.pointsLoading = true;\n      try {\n        // 调用真实的API获取积分记录\n        const response = await getPointsHistory(this.currentPointsPage, this.pointsPageSize);\n        console.log('积分记录API响应:', response);\n        if (response && response.data) {\n          // 处理API返回的数据\n          let records = response.data.records || response.data || [];\n          console.log('原始记录数据:', records);\n          console.log('第一条记录结构:', records[0]);\n\n          // 如果API返回的是数组，直接使用\n          if (Array.isArray(records)) {\n            // 转换数据格式以匹配模板\n            this.pointsData = records.map(record => {\n              console.log('正在处理记录:', record);\n\n              // 根据后端API返回的字段名获取值\n              const pointsChange = record.points_change || record.change_amount || record.amount || record.points || 0;\n              const transactionType = record.transaction_type || record.change_type || record.type || 'unknown';\n\n              // 判断是获取还是消耗积分\n              const isEarn = pointsChange > 0 || transactionType === 'earn' || transactionType === 'PURCHASE';\n              return {\n                id: record.transaction_id || record.id || record.point_id || Math.random(),\n                type: isEarn ? '获取' : '消耗',\n                badge: isEarn ? 'in' : 'out',\n                change: pointsChange > 0 ? `+${pointsChange}` : pointsChange.toString(),\n                desc: record.source_description || record.description || record.reason || record.desc || '积分变动',\n                time: record.transaction_date || record.created_at || record.timestamp || record.time || new Date().toLocaleString()\n              };\n            });\n            console.log('转换后的积分数据:', this.pointsData);\n          } else {\n            console.warn('API返回的数据格式不是数组:', records);\n            this.pointsData = this.getMockPointsData();\n          }\n        } else {\n          console.warn('API返回数据为空，使用模拟数据');\n          this.pointsData = this.getMockPointsData();\n        }\n      } catch (error) {\n        console.error('加载积分记录失败:', error);\n        console.error('错误详情:', error.response);\n\n        // API调用失败时才使用模拟数据\n        this.$message.warning('无法加载积分记录，显示示例数据');\n        this.pointsData = this.getMockPointsData();\n      } finally {\n        this.pointsLoading = false;\n      }\n    },\n    switchPointsTab(tabName) {\n      this.currentPointsTab = tabName;\n      this.currentPointsPage = 1; // 切换标签页时重置页码\n      this.loadPointsHistory();\n    },\n    handlePointsPageChange(page) {\n      this.currentPointsPage = page;\n      this.loadPointsHistory();\n    },\n    getMockPointsData() {\n      const allData = [{\n        id: 1,\n        type: '获取',\n        badge: 'in',\n        change: '+50',\n        desc: '创建机器人奖励',\n        time: '2024-01-15 10:30:00'\n      }, {\n        id: 2,\n        type: '消耗',\n        badge: 'out',\n        change: '-30',\n        desc: '购买高级功能',\n        time: '2024-01-14 15:45:00'\n      }, {\n        id: 3,\n        type: '获取',\n        badge: 'in',\n        change: '+10',\n        desc: '每日签到奖励',\n        time: '2024-01-14 09:00:00'\n      }, {\n        id: 4,\n        type: '获取',\n        badge: 'in',\n        change: '+30',\n        desc: '发表文章奖励',\n        time: '2024-01-13 14:20:00'\n      }, {\n        id: 5,\n        type: '消耗',\n        badge: 'out',\n        change: '-20',\n        desc: '购买机器人',\n        time: '2024-01-12 11:10:00'\n      }, {\n        id: 6,\n        type: '获取',\n        badge: 'in',\n        change: '+5',\n        desc: '获得点赞奖励',\n        time: '2024-01-11 16:30:00'\n      }];\n\n      // 根据当前标签页过滤数据\n      if (this.currentPointsTab === 'in') {\n        return allData.filter(item => item.badge === 'in');\n      } else if (this.currentPointsTab === 'out') {\n        return allData.filter(item => item.badge === 'out');\n      }\n      return allData;\n    },\n    formatPointsAmount(amount) {\n      return amount > 0 ? `+${amount}` : amount.toString();\n    },\n    getPointsTypeClass(type) {\n      return type === 'in' ? 'points-in' : 'points-out';\n    },\n    // 积分对话框相关方法\n    resetPointsHistory() {\n      this.currentPointsPage = 1;\n      this.currentPointsTab = 'all';\n      this.pointsData = [];\n    },\n    changePointsPage(page) {\n      this.currentPointsPage = page;\n    },\n    // 充值积分相关方法\n    openRechargeDialog() {\n      this.rechargeDialogVisible = true;\n      this.resetRechargeForm();\n    },\n    resetRechargeForm() {\n      if (this.$refs.rechargeForm) {\n        this.$refs.rechargeForm.resetFields();\n      }\n      this.rechargeForm = {\n        points: 100,\n        description: '用户充值积分'\n      };\n    },\n    setQuickAmount(amount) {\n      this.rechargeForm.points = amount;\n    },\n    async submitRecharge() {\n      try {\n        await this.$refs.rechargeForm.validate();\n        this.rechargeLoading = true;\n        console.log('准备充值积分:', this.rechargeForm);\n        const response = await rechargePoints(this.rechargeForm.points, this.rechargeForm.description);\n        console.log('充值响应:', response);\n        if (response && response.data) {\n          this.$message.success(`充值成功！获得 ${this.rechargeForm.points} 积分，当前余额: ${response.data.new_balance}`);\n\n          // 更新用户积分显示\n          this.userInfo.points = response.data.new_balance;\n\n          // 关闭对话框\n          this.rechargeDialogVisible = false;\n\n          // 如果积分明细对话框是打开的，刷新数据\n          if (this.pointsHistoryDialogVisible) {\n            this.loadPointsHistory();\n          }\n        } else {\n          throw new Error('服务器返回数据格式错误');\n        }\n      } catch (error) {\n        console.error('充值失败:', error);\n        let errorMessage = '充值失败，请重试';\n        if (error.response && error.response.data) {\n          errorMessage = error.response.data.message || errorMessage;\n        } else if (error.message) {\n          errorMessage = error.message;\n        }\n        this.$message.error(errorMessage);\n      } finally {\n        this.rechargeLoading = false;\n      }\n    }\n  }\n};","map":{"version":3,"names":["mapActions","mapState","getUserInfo","updateUserInfo","getUserPoints","getPointsHistory","rechargePoints","name","data","avatar","loading","userInfo","user_id","user_name","email","phone","gender","age","birthday","organization","profile","points","created_at","updated_at","interestModules","friends","favoriteRobots","favoriteTools","editDialogVisible","saveLoading","editForm","UserName","Email","Phone","Gender","Age","Birthday","Organization","Profile","Password","editRules","required","message","trigger","min","max","pointsHistoryDialogVisible","pointsLoading","currentPointsTab","currentPointsPage","pointsPageSize","pointsData","rechargeDialogVisible","rechargeLoading","rechargeForm","description","rechargeRules","type","computed","filteredPointsData","filter","item","badge","paginatedPointsData","start","end","slice","totalPointsPages","Math","ceil","length","created","loadUserInfo","methods","handleLogout","$confirm","confirmButtonText","cancelButtonText","then","logout","$message","success","$router","push","catch","error","console","log","userId","userName","isLoggedIn","$store","state","user","response","pointsResponse","validateAndFormatPoints","pointsError","warn","floor","getGenderText","genderMap","formatDate","dateString","Date","toLocaleString","formatBirthday","toLocaleDateString","earnPointsDialog","$msgbox","title","dangerouslyUseHTMLString","showCancelButton","openEditDialog","resetEditForm","$refs","resetFields","saveUserInfo","validate","updateData","NewUsername","NewGender","NewAge","Error","status","errorMessage","viewPointsHistory","loadPointsHistory","records","Array","isArray","map","record","pointsChange","points_change","change_amount","amount","transactionType","transaction_type","change_type","isEarn","id","transaction_id","point_id","random","change","toString","desc","source_description","reason","time","transaction_date","timestamp","getMockPointsData","warning","switchPointsTab","tabName","handlePointsPageChange","page","allData","formatPointsAmount","getPointsTypeClass","resetPointsHistory","changePointsPage","openRechargeDialog","resetRechargeForm","setQuickAmount","submitRecharge","new_balance"],"sources":["src/views/PersonalHomePage.vue"],"sourcesContent":["<template>\n  <div class=\"personal-page\">\n    <!-- 用户头像和基本信息卡片 -->\n    <el-card class=\"profile-card\" v-loading=\"loading\">\n      <div class=\"profile-header\">\n        <div class=\"avatar-section\">\n          <img\n            :src=\"avatar\"\n            alt=\"用户头像\"\n            class=\"user-avatar\"\n            @error=\"avatar = 'https://via.placeholder.com/150'\"\n          />\n          <el-button size=\"mini\" type=\"text\" class=\"change-avatar-btn\">\n            更换头像\n          </el-button>\n        </div>\n\n        <div class=\"user-info\">\n          <h2 class=\"username\">{{ userInfo.user_name || '未知用户' }}</h2>\n          <div class=\"user-details\">\n            <div class=\"info-item\">\n              <span class=\"label\">邮箱:</span>\n              <span class=\"value\">{{ userInfo.email || '未设置' }}</span>\n            </div>\n            <div class=\"info-item\">\n              <span class=\"label\">手机:</span>\n              <span class=\"value\">{{ userInfo.phone || '未设置' }}</span>\n            </div>\n            <div class=\"info-item\">\n              <span class=\"label\">性别:</span>\n              <span class=\"value\">{{ getGenderText(userInfo.gender) }}</span>\n            </div>\n            <div class=\"info-item\">\n              <span class=\"label\">年龄:</span>\n              <span class=\"value\">{{ userInfo.age || '未设置' }}</span>\n            </div>\n            <div class=\"info-item\">\n              <span class=\"label\">生日:</span>\n              <span class=\"value\">{{ formatBirthday(userInfo.birthday) }}</span>\n            </div>\n            <div class=\"info-item\">\n              <span class=\"label\">机构:</span>\n              <span class=\"value\">{{ userInfo.organization || '未设置' }}</span>\n            </div>\n            <div class=\"info-item\">\n              <span class=\"label\">个人简介:</span>\n              <span class=\"value profile-text\">{{\n                userInfo.profile || '未设置'\n              }}</span>\n            </div>\n            <div class=\"info-item\">\n              <span class=\"label\">注册时间:</span>\n              <span class=\"value\">{{ formatDate(userInfo.created_at) }}</span>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"action-buttons\">\n          <el-button type=\"primary\" size=\"small\" @click=\"openEditDialog\">\n            编辑资料\n          </el-button>\n          <el-button type=\"danger\" size=\"small\" @click=\"handleLogout\">\n            退出登录\n          </el-button>\n        </div>\n      </div>\n    </el-card>\n\n    <!-- 积分信息卡片 -->\n    <el-card class=\"points-card\">\n      <div slot=\"header\" class=\"clearfix\">\n        <span class=\"card-title\">我的积分</span>\n        <el-button\n          style=\"float: right; padding: 3px 0\"\n          type=\"text\"\n          @click=\"viewPointsHistory\"\n        >\n          查看记录\n        </el-button>\n      </div>\n      <div class=\"points-info\">\n        <div class=\"points-details\">\n          <div class=\"points-item\">\n            <span class=\"points-label\">当前积分:</span>\n            <span class=\"points-value\">{{ userInfo.points || 0 }}</span>\n          </div>\n        </div>\n\n        <!-- 积分操作按钮 -->\n        <div class=\"points-actions\">\n          <el-button size=\"small\" type=\"primary\" @click=\"earnPointsDialog\">\n            积分说明\n          </el-button>\n          <el-button size=\"small\" type=\"info\" @click=\"viewPointsHistory\">\n            积分明细\n          </el-button>\n          <el-button size=\"small\" type=\"success\" @click=\"openRechargeDialog\">\n            充值积分\n          </el-button>\n        </div>\n      </div>\n    </el-card>\n\n    <!-- 兴趣模块 -->\n    <el-card class=\"interest-card\">\n      <div slot=\"header\" class=\"clearfix\">\n        <span class=\"card-title\">兴趣模块</span>\n      </div>\n      <div class=\"interest-content\">\n        <el-tag\n          v-for=\"module in interestModules\"\n          :key=\"module\"\n          type=\"info\"\n          class=\"interest-tag\"\n        >\n          {{ module }}\n        </el-tag>\n      </div>\n    </el-card>\n\n    <!-- 编辑资料对话框 -->\n    <el-dialog\n      title=\"编辑个人信息\"\n      :visible.sync=\"editDialogVisible\"\n      width=\"500px\"\n      @close=\"resetEditForm\"\n    >\n      <el-form\n        ref=\"editForm\"\n        :model=\"editForm\"\n        :rules=\"editRules\"\n        label-width=\"80px\"\n        v-loading=\"saveLoading\"\n      >\n        <el-form-item label=\"用户名\" prop=\"UserName\">\n          <el-input v-model=\"editForm.UserName\" placeholder=\"请输入用户名\" />\n        </el-form-item>\n\n        <el-form-item label=\"邮箱\" prop=\"Email\">\n          <el-input\n            type=\"email\"\n            v-model=\"editForm.Email\"\n            placeholder=\"邮箱不可修改\"\n            readonly\n            disabled\n          />\n        </el-form-item>\n\n        <el-form-item label=\"手机\" prop=\"Phone\">\n          <el-input\n            v-model=\"editForm.Phone\"\n            placeholder=\"手机号不可修改\"\n            maxlength=\"11\"\n            readonly\n            disabled\n          />\n        </el-form-item>\n\n        <el-form-item label=\"性别\" prop=\"Gender\">\n          <el-select v-model=\"editForm.Gender\" placeholder=\"请选择性别\">\n            <el-option label=\"男\" :value=\"1\"></el-option>\n            <el-option label=\"女\" :value=\"2\"></el-option>\n            <el-option label=\"其他\" :value=\"0\"></el-option>\n          </el-select>\n        </el-form-item>\n\n        <el-form-item label=\"年龄\" prop=\"Age\">\n          <el-input-number\n            v-model=\"editForm.Age\"\n            :min=\"1\"\n            :max=\"120\"\n            placeholder=\"请输入年龄\"\n            style=\"width: 100%\"\n          />\n        </el-form-item>\n\n        <el-form-item label=\"生日\" prop=\"Birthday\">\n          <el-date-picker\n            v-model=\"editForm.Birthday\"\n            type=\"date\"\n            placeholder=\"请选择生日\"\n            style=\"width: 100%\"\n            format=\"yyyy-MM-dd\"\n            value-format=\"yyyy-MM-dd\"\n          />\n        </el-form-item>\n\n        <el-form-item label=\"机构\" prop=\"Organization\">\n          <el-input\n            v-model=\"editForm.Organization\"\n            placeholder=\"请输入所属机构\"\n            maxlength=\"100\"\n            show-word-limit\n          />\n        </el-form-item>\n\n        <el-form-item label=\"个人简介\" prop=\"Profile\">\n          <el-input\n            type=\"textarea\"\n            v-model=\"editForm.Profile\"\n            placeholder=\"请输入个人简介\"\n            :rows=\"3\"\n            maxlength=\"500\"\n            show-word-limit\n          />\n        </el-form-item>\n\n        <el-form-item label=\"验证密码\" prop=\"Password\">\n          <el-input\n            type=\"password\"\n            v-model=\"editForm.Password\"\n            placeholder=\"请输入当前密码以验证身份\"\n            show-password\n          />\n        </el-form-item>\n      </el-form>\n\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"editDialogVisible = false\">取消</el-button>\n        <el-button type=\"primary\" @click=\"saveUserInfo\" :loading=\"saveLoading\">\n          保存\n        </el-button>\n      </div>\n    </el-dialog>\n\n    <!-- 积分明细对话框 -->\n    <el-dialog\n      title=\"积分明细\"\n      :visible.sync=\"pointsHistoryDialogVisible\"\n      width=\"800px\"\n      @close=\"resetPointsHistory\"\n    >\n      <div class=\"points-dialog-content\" v-loading=\"pointsLoading\">\n        <!-- 当前积分显示 -->\n        <div class=\"current-points\">\n          <h3>\n            当前积分：<span class=\"points-highlight\">{{\n              userInfo.points || 0\n            }}</span>\n          </h3>\n        </div>\n\n        <!-- 积分说明 -->\n        <div class=\"points-info-section\">\n          <h4>积分说明</h4>\n          <ul class=\"points-info-list\">\n            <li>• 积分主要用于购买机器人功能和服务</li>\n            <li>• 通过贡献内容（如开发AI机器人）可获得激励积分奖励</li>\n            <li>• 每日签到和参与活动也可获取积分</li>\n            <li>• 积分可用于解锁高级机器人、购买机器人服务等</li>\n          </ul>\n        </div>\n\n        <!-- 标签页切换 -->\n        <div class=\"points-tabs\">\n          <el-button\n            :type=\"currentPointsTab === 'all' ? 'primary' : 'default'\"\n            size=\"small\"\n            @click=\"switchPointsTab('all')\"\n          >\n            全部\n          </el-button>\n          <el-button\n            :type=\"currentPointsTab === 'in' ? 'success' : 'default'\"\n            size=\"small\"\n            @click=\"switchPointsTab('in')\"\n          >\n            获取\n          </el-button>\n          <el-button\n            :type=\"currentPointsTab === 'out' ? 'danger' : 'default'\"\n            size=\"small\"\n            @click=\"switchPointsTab('out')\"\n          >\n            消耗\n          </el-button>\n        </div>\n\n        <!-- 积分记录表格 -->\n        <div class=\"points-table-container\">\n          <el-table\n            :data=\"paginatedPointsData\"\n            style=\"width: 100%\"\n            stripe\n            v-if=\"paginatedPointsData.length > 0\"\n          >\n            <el-table-column prop=\"time\" label=\"时间\" width=\"180\">\n            </el-table-column>\n            <el-table-column prop=\"type\" label=\"类型\" width=\"100\">\n              <template slot-scope=\"scope\">\n                <el-tag\n                  :type=\"scope.row.badge === 'in' ? 'success' : 'danger'\"\n                  size=\"small\"\n                >\n                  {{ scope.row.type }}\n                </el-tag>\n              </template>\n            </el-table-column>\n            <el-table-column prop=\"desc\" label=\"描述\"> </el-table-column>\n            <el-table-column prop=\"change\" label=\"变动\" width=\"100\">\n              <template slot-scope=\"scope\">\n                <span\n                  :class=\"scope.row.badge === 'in' ? 'text-green' : 'text-red'\"\n                >\n                  {{ scope.row.change }}\n                </span>\n              </template>\n            </el-table-column>\n          </el-table>\n\n          <!-- 空状态 -->\n          <div v-if=\"paginatedPointsData.length === 0\" class=\"empty-state\">\n            <i class=\"el-icon-document\"></i>\n            <p>暂无积分记录</p>\n          </div>\n        </div>\n\n        <!-- 分页 -->\n        <div class=\"points-pagination\" v-if=\"totalPointsPages > 1\">\n          <el-pagination\n            @current-change=\"changePointsPage\"\n            :current-page=\"currentPointsPage\"\n            :page-size=\"pointsPageSize\"\n            layout=\"prev, pager, next\"\n            :total=\"filteredPointsData.length\"\n          >\n          </el-pagination>\n        </div>\n      </div>\n    </el-dialog>\n\n    <!-- 充值积分对话框 -->\n    <el-dialog\n      title=\"充值积分\"\n      :visible.sync=\"rechargeDialogVisible\"\n      width=\"500px\"\n      @close=\"resetRechargeForm\"\n    >\n      <el-form\n        ref=\"rechargeForm\"\n        :model=\"rechargeForm\"\n        :rules=\"rechargeRules\"\n        label-width=\"100px\"\n        v-loading=\"rechargeLoading\"\n      >\n        <div class=\"recharge-info\">\n          <div class=\"current-balance\">\n            <span class=\"label\">当前积分：</span>\n            <span class=\"balance\">{{ userInfo.points || 0 }}</span>\n          </div>\n\n          <div class=\"recharge-rates\">\n            <h4>充值说明</h4>\n            <ul>\n              <li>• 最低充值10积分，最高单次充值10000积分</li>\n              <li>• 充值的积分立即到账，可用于购买各种服务</li>\n              <li>• 充值记录可在积分明细中查看</li>\n            </ul>\n          </div>\n        </div>\n\n        <el-form-item label=\"充值数量\" prop=\"points\">\n          <el-input-number\n            v-model=\"rechargeForm.points\"\n            :min=\"10\"\n            :max=\"10000\"\n            :step=\"10\"\n            style=\"width: 100%\"\n            placeholder=\"请输入充值积分数量\"\n          />\n        </el-form-item>\n\n        <el-form-item label=\"充值说明\" prop=\"description\">\n          <el-input\n            v-model=\"rechargeForm.description\"\n            placeholder=\"可选择添加充值说明\"\n            maxlength=\"100\"\n            show-word-limit\n          />\n        </el-form-item>\n\n        <div class=\"quick-amounts\">\n          <span class=\"quick-label\">快速选择：</span>\n          <el-button size=\"mini\" @click=\"setQuickAmount(100)\">100</el-button>\n          <el-button size=\"mini\" @click=\"setQuickAmount(500)\">500</el-button>\n          <el-button size=\"mini\" @click=\"setQuickAmount(1000)\">1000</el-button>\n          <el-button size=\"mini\" @click=\"setQuickAmount(5000)\">5000</el-button>\n        </div>\n\n        <div class=\"recharge-preview\" v-if=\"rechargeForm.points > 0\">\n          <div class=\"preview-item\">\n            <span>充值后积分：</span>\n            <span class=\"new-balance\">{{\n              (userInfo.points || 0) + rechargeForm.points\n            }}</span>\n          </div>\n        </div>\n      </el-form>\n\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"rechargeDialogVisible = false\">取消</el-button>\n        <el-button\n          type=\"primary\"\n          @click=\"submitRecharge\"\n          :loading=\"rechargeLoading\"\n        >\n          确认充值\n        </el-button>\n      </div>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport { mapActions, mapState } from 'vuex';\nimport {\n  getUserInfo,\n  updateUserInfo,\n  getUserPoints,\n  getPointsHistory,\n  rechargePoints,\n} from '@/utils/api';\n\nexport default {\n  name: 'UserProfile',\n  data() {\n    return {\n      avatar: 'https://via.placeholder.com/150',\n      loading: true,\n      userInfo: {\n        user_id: null,\n        user_name: '',\n        email: '',\n        phone: '',\n        gender: null,\n        age: null,\n        birthday: null,\n        organization: '',\n        profile: '',\n        points: 0,\n        created_at: null,\n        updated_at: null,\n      },\n      interestModules: ['编程', '旅游', '健身'],\n      friends: ['何雯宏', '许昕格', '王加添'],\n      favoriteRobots: ['R2-D2', 'C-3PO', 'Optimus Prime'],\n      favoriteTools: ['VS Code', 'Sublime Text', 'WebStorm'],\n\n      // 编辑对话框相关\n      editDialogVisible: false,\n      saveLoading: false,\n      editForm: {\n        UserName: '',\n        Email: '',\n        Phone: '',\n        Gender: null,\n        Age: null,\n        Birthday: null,\n        Organization: '',\n        Profile: '',\n        Password: '', // 添加密码字段\n      },\n      editRules: {\n        UserName: [\n          { required: true, message: '请输入用户名', trigger: 'blur' },\n          {\n            min: 3,\n            max: 20,\n            message: '用户名长度应为3-20个字符',\n            trigger: 'blur',\n          },\n        ],\n        Organization: [\n          {\n            max: 100,\n            message: '机构名称不能超过100个字符',\n            trigger: 'blur',\n          },\n        ],\n        Profile: [\n          {\n            max: 500,\n            message: '个人简介不能超过500个字符',\n            trigger: 'blur',\n          },\n        ],\n        Password: [\n          { required: true, message: '请输入当前密码', trigger: 'blur' },\n          {\n            min: 6,\n            message: '密码长度至少6位',\n            trigger: 'blur',\n          },\n        ],\n      },\n\n      // 积分明细相关\n      pointsHistoryDialogVisible: false,\n      pointsLoading: false,\n      currentPointsTab: 'all', // 当前选中的积分标签页\n      currentPointsPage: 1, // 当前页码\n      pointsPageSize: 5, // 每页显示的记录数\n      pointsData: [], // 积分记录数据\n\n      // 充值积分相关\n      rechargeDialogVisible: false,\n      rechargeLoading: false,\n      rechargeForm: {\n        points: 100,\n        description: '用户充值积分',\n      },\n      rechargeRules: {\n        points: [\n          { required: true, message: '请输入充值积分数量', trigger: 'blur' },\n          {\n            type: 'number',\n            min: 10,\n            max: 10000,\n            message: '充值积分需在10-10000之间',\n            trigger: 'blur',\n          },\n        ],\n      },\n    };\n  },\n\n  computed: {\n    ...mapState('user', ['userId', 'userName']),\n\n    // 积分明细相关计算属性\n    filteredPointsData() {\n      if (this.currentPointsTab === 'all') {\n        return this.pointsData;\n      } else if (this.currentPointsTab === 'in') {\n        return this.pointsData.filter((item) => item.badge === 'in');\n      } else if (this.currentPointsTab === 'out') {\n        return this.pointsData.filter((item) => item.badge === 'out');\n      }\n      return this.pointsData;\n    },\n\n    paginatedPointsData() {\n      const start = (this.currentPointsPage - 1) * this.pointsPageSize;\n      const end = start + this.pointsPageSize;\n      return this.filteredPointsData.slice(start, end);\n    },\n\n    totalPointsPages() {\n      return Math.ceil(this.filteredPointsData.length / this.pointsPageSize);\n    },\n  },\n\n  async created() {\n    await this.loadUserInfo();\n  },\n\n  methods: {\n    ...mapActions('user', ['logout']),\n\n    // 登出功能\n    handleLogout() {\n      this.$confirm('确定要退出登录吗？', '确认退出', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning',\n      })\n        .then(async () => {\n          try {\n            // 调用store中的logout action\n            await this.logout();\n\n            this.$message.success('已成功退出登录');\n\n            // 跳转到登录页面或首页\n            this.$router.push('/').catch(() => {\n              // 如果没有登录页面，跳转到首页\n              this.$router.push('/');\n            });\n          } catch (error) {\n            console.error('退出登录失败:', error);\n            this.$message.error('退出登录失败，请重试');\n          }\n        })\n        .catch(() => {\n          // 用户取消登出，不需要处理\n        });\n    },\n\n    async loadUserInfo() {\n      try {\n        this.loading = true;\n        console.log('当前用户状态:', {\n          userId: this.userId,\n          userName: this.userName,\n          isLoggedIn: this.$store.state.user.isLoggedIn,\n        });\n\n        if (this.userId) {\n          // 加载用户基本信息\n          const response = await getUserInfo(this.userId);\n          this.userInfo = response.data;\n          console.log('用户信息加载成功:', this.userInfo);\n\n          // 单独加载积分信息（根据后端文档，积分需要单独获取）\n          try {\n            const pointsResponse = await getUserPoints();\n            this.userInfo.points = this.validateAndFormatPoints(\n              pointsResponse.data.points\n            );\n            console.log('积分信息加载成功:', this.userInfo.points);\n          } catch (pointsError) {\n            console.warn('积分信息加载失败，使用默认值0:', pointsError);\n            this.userInfo.points = 0;\n          }\n        } else {\n          console.log('userId为空，当前store状态:', this.$store.state.user);\n          this.$message.error('用户ID不存在，请重新登录');\n        }\n      } catch (error) {\n        console.error('加载用户信息失败:', error);\n        this.$message.error(\n          '加载用户信息失败：' + (error.message || '未知错误')\n        );\n      } finally {\n        this.loading = false;\n      }\n    },\n\n    validateAndFormatPoints(points) {\n      // 验证和格式化积分数据\n      if (typeof points === 'number' && points >= 0) {\n        return Math.floor(points); // 确保是整数\n      }\n      return 0; // 默认值\n    },\n\n    getGenderText(gender) {\n      const genderMap = { 1: '男', 2: '女', 0: '其他' };\n      return genderMap[gender] || '未设置';\n    },\n\n    formatDate(dateString) {\n      if (!dateString) return '未知';\n      return new Date(dateString).toLocaleString('zh-CN');\n    },\n\n    formatBirthday(dateString) {\n      if (!dateString) return '未设置';\n      return new Date(dateString).toLocaleDateString('zh-CN');\n    },\n\n    // 积分相关方法 - 仅用于购买机器人\n    // 已删除会员等级相关方法\n\n    earnPointsDialog() {\n      this.$msgbox({\n        title: '积分用途',\n        message: `\n          <div>\n            <p>� <strong>积分可用于：</strong></p>\n            <ul>\n              <li>🤖 购买机器人功能</li>\n              <li>🛒 机器人市场消费</li>\n              <li>⭐ 解锁高级机器人</li>\n            </ul>\n            <br>\n            <p>�💡 <strong>如何获取积分：</strong></p>\n            <ul>\n              <li>🤖 创建机器人：+50积分</li>\n              <li>💬 发表评论：+10积分</li>\n              <li>👍 获得点赞：+5积分</li>\n              <li>📝 发表文章：+30积分</li>\n              <li>📅 每日签到：+10积分</li>\n            </ul>\n          </div>\n        `,\n        dangerouslyUseHTMLString: true,\n        showCancelButton: false,\n        confirmButtonText: '知道了',\n      });\n    },\n\n    // 编辑用户信息相关方法\n    openEditDialog() {\n      this.editForm = {\n        UserName: this.userInfo.user_name || '',\n        Email: this.userInfo.email || '',\n        Phone: this.userInfo.phone || '',\n        Gender: this.userInfo.gender,\n        Age: this.userInfo.age,\n        Birthday: this.userInfo.birthday || null,\n        Organization: this.userInfo.organization || '',\n        Profile: this.userInfo.profile || '',\n        Password: '', // 重置密码字段\n      };\n      this.editDialogVisible = true;\n    },\n\n    resetEditForm() {\n      if (this.$refs.editForm) {\n        this.$refs.editForm.resetFields();\n      }\n    },\n\n    async saveUserInfo() {\n      try {\n        await this.$refs.editForm.validate();\n        this.saveLoading = true;\n\n        // 转换为后端期望的格式\n        const updateData = {\n          NewUsername: this.editForm.UserName,\n          NewGender: this.editForm.Gender,\n          NewAge: this.editForm.Age,\n          Password: this.editForm.Password, // 需要添加密码字段\n        };\n\n        console.log('准备更新的数据:', updateData);\n        console.log('用户ID:', this.userId);\n\n        const response = await updateUserInfo(this.userId, updateData);\n        console.log('API响应:', response);\n\n        // 检查不同的响应格式\n        if (response && response.data) {\n          // 如果有data字段，检查data中的success\n          if (response.data.success !== false) {\n            this.$message.success('个人信息更新成功！');\n            this.editDialogVisible = false;\n            await this.loadUserInfo(); // 重新加载用户信息\n            return;\n          } else {\n            throw new Error(\n              response.data.message || response.data.error || '更新失败'\n            );\n          }\n        } else if (\n          response &&\n          response.success !== false &&\n          response.status !== 'error'\n        ) {\n          // 直接检查响应对象\n          this.$message.success('个人信息更新成功！');\n          this.editDialogVisible = false;\n          await this.loadUserInfo();\n          return;\n        } else {\n          throw new Error(\n            response.message || response.error || '服务器返回更新失败'\n          );\n        }\n      } catch (error) {\n        console.error('保存用户信息详细错误:', error);\n        console.error('错误响应:', error.response);\n\n        let errorMessage = '请检查网络连接';\n\n        if (error.response) {\n          // 服务器返回了错误状态码\n          if (error.response.data) {\n            errorMessage =\n              error.response.data.message ||\n              error.response.data.error ||\n              `服务器错误 (${error.response.status})`;\n          } else {\n            errorMessage = `网络错误 (${error.response.status})`;\n          }\n        } else if (error.message) {\n          // 其他错误（包括我们手动抛出的错误）\n          errorMessage = error.message;\n        }\n\n        this.$message.error('保存失败：' + errorMessage);\n      } finally {\n        this.saveLoading = false;\n      }\n    },\n\n    // 积分明细相关方法\n    viewPointsHistory() {\n      this.pointsHistoryDialogVisible = true;\n      this.loadPointsHistory();\n    },\n\n    async loadPointsHistory() {\n      this.pointsLoading = true;\n      try {\n        // 调用真实的API获取积分记录\n        const response = await getPointsHistory(\n          this.currentPointsPage,\n          this.pointsPageSize\n        );\n\n        console.log('积分记录API响应:', response);\n\n        if (response && response.data) {\n          // 处理API返回的数据\n          let records = response.data.records || response.data || [];\n\n          console.log('原始记录数据:', records);\n          console.log('第一条记录结构:', records[0]);\n\n          // 如果API返回的是数组，直接使用\n          if (Array.isArray(records)) {\n            // 转换数据格式以匹配模板\n            this.pointsData = records.map((record) => {\n              console.log('正在处理记录:', record);\n\n              // 根据后端API返回的字段名获取值\n              const pointsChange =\n                record.points_change ||\n                record.change_amount ||\n                record.amount ||\n                record.points ||\n                0;\n              const transactionType =\n                record.transaction_type ||\n                record.change_type ||\n                record.type ||\n                'unknown';\n\n              // 判断是获取还是消耗积分\n              const isEarn =\n                pointsChange > 0 ||\n                transactionType === 'earn' ||\n                transactionType === 'PURCHASE';\n\n              return {\n                id:\n                  record.transaction_id ||\n                  record.id ||\n                  record.point_id ||\n                  Math.random(),\n                type: isEarn ? '获取' : '消耗',\n                badge: isEarn ? 'in' : 'out',\n                change:\n                  pointsChange > 0\n                    ? `+${pointsChange}`\n                    : pointsChange.toString(),\n                desc:\n                  record.source_description ||\n                  record.description ||\n                  record.reason ||\n                  record.desc ||\n                  '积分变动',\n                time:\n                  record.transaction_date ||\n                  record.created_at ||\n                  record.timestamp ||\n                  record.time ||\n                  new Date().toLocaleString(),\n              };\n            });\n\n            console.log('转换后的积分数据:', this.pointsData);\n          } else {\n            console.warn('API返回的数据格式不是数组:', records);\n            this.pointsData = this.getMockPointsData();\n          }\n        } else {\n          console.warn('API返回数据为空，使用模拟数据');\n          this.pointsData = this.getMockPointsData();\n        }\n      } catch (error) {\n        console.error('加载积分记录失败:', error);\n        console.error('错误详情:', error.response);\n\n        // API调用失败时才使用模拟数据\n        this.$message.warning('无法加载积分记录，显示示例数据');\n        this.pointsData = this.getMockPointsData();\n      } finally {\n        this.pointsLoading = false;\n      }\n    },\n\n    switchPointsTab(tabName) {\n      this.currentPointsTab = tabName;\n      this.currentPointsPage = 1; // 切换标签页时重置页码\n      this.loadPointsHistory();\n    },\n\n    handlePointsPageChange(page) {\n      this.currentPointsPage = page;\n      this.loadPointsHistory();\n    },\n\n    getMockPointsData() {\n      const allData = [\n        {\n          id: 1,\n          type: '获取',\n          badge: 'in',\n          change: '+50',\n          desc: '创建机器人奖励',\n          time: '2024-01-15 10:30:00',\n        },\n        {\n          id: 2,\n          type: '消耗',\n          badge: 'out',\n          change: '-30',\n          desc: '购买高级功能',\n          time: '2024-01-14 15:45:00',\n        },\n        {\n          id: 3,\n          type: '获取',\n          badge: 'in',\n          change: '+10',\n          desc: '每日签到奖励',\n          time: '2024-01-14 09:00:00',\n        },\n        {\n          id: 4,\n          type: '获取',\n          badge: 'in',\n          change: '+30',\n          desc: '发表文章奖励',\n          time: '2024-01-13 14:20:00',\n        },\n        {\n          id: 5,\n          type: '消耗',\n          badge: 'out',\n          change: '-20',\n          desc: '购买机器人',\n          time: '2024-01-12 11:10:00',\n        },\n        {\n          id: 6,\n          type: '获取',\n          badge: 'in',\n          change: '+5',\n          desc: '获得点赞奖励',\n          time: '2024-01-11 16:30:00',\n        },\n      ];\n\n      // 根据当前标签页过滤数据\n      if (this.currentPointsTab === 'in') {\n        return allData.filter((item) => item.badge === 'in');\n      } else if (this.currentPointsTab === 'out') {\n        return allData.filter((item) => item.badge === 'out');\n      }\n      return allData;\n    },\n\n    formatPointsAmount(amount) {\n      return amount > 0 ? `+${amount}` : amount.toString();\n    },\n\n    getPointsTypeClass(type) {\n      return type === 'in' ? 'points-in' : 'points-out';\n    },\n\n    // 积分对话框相关方法\n    resetPointsHistory() {\n      this.currentPointsPage = 1;\n      this.currentPointsTab = 'all';\n      this.pointsData = [];\n    },\n\n    changePointsPage(page) {\n      this.currentPointsPage = page;\n    },\n\n    // 充值积分相关方法\n    openRechargeDialog() {\n      this.rechargeDialogVisible = true;\n      this.resetRechargeForm();\n    },\n\n    resetRechargeForm() {\n      if (this.$refs.rechargeForm) {\n        this.$refs.rechargeForm.resetFields();\n      }\n      this.rechargeForm = {\n        points: 100,\n        description: '用户充值积分',\n      };\n    },\n\n    setQuickAmount(amount) {\n      this.rechargeForm.points = amount;\n    },\n\n    async submitRecharge() {\n      try {\n        await this.$refs.rechargeForm.validate();\n        this.rechargeLoading = true;\n\n        console.log('准备充值积分:', this.rechargeForm);\n\n        const response = await rechargePoints(\n          this.rechargeForm.points,\n          this.rechargeForm.description\n        );\n\n        console.log('充值响应:', response);\n\n        if (response && response.data) {\n          this.$message.success(\n            `充值成功！获得 ${this.rechargeForm.points} 积分，当前余额: ${response.data.new_balance}`\n          );\n\n          // 更新用户积分显示\n          this.userInfo.points = response.data.new_balance;\n\n          // 关闭对话框\n          this.rechargeDialogVisible = false;\n\n          // 如果积分明细对话框是打开的，刷新数据\n          if (this.pointsHistoryDialogVisible) {\n            this.loadPointsHistory();\n          }\n        } else {\n          throw new Error('服务器返回数据格式错误');\n        }\n      } catch (error) {\n        console.error('充值失败:', error);\n\n        let errorMessage = '充值失败，请重试';\n        if (error.response && error.response.data) {\n          errorMessage = error.response.data.message || errorMessage;\n        } else if (error.message) {\n          errorMessage = error.message;\n        }\n\n        this.$message.error(errorMessage);\n      } finally {\n        this.rechargeLoading = false;\n      }\n    },\n  },\n};\n</script>\n\n<style scoped lang=\"scss\">\n.personal-page {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 20px;\n  background: #f5f7fa;\n  min-height: 100vh;\n}\n\n.profile-card,\n.points-card,\n.interest-card {\n  margin-bottom: 20px;\n  border-radius: 8px;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.1);\n  border: 1px solid #e4e7ed;\n  background: #ffffff;\n}\n\n.profile-header {\n  display: flex;\n  align-items: flex-start;\n  gap: 30px;\n  flex-wrap: wrap;\n}\n\n.avatar-section {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 10px;\n}\n\n.user-avatar {\n  width: 120px;\n  height: 120px;\n  border-radius: 50%;\n  object-fit: cover;\n  border: 4px solid #409eff;\n  box-shadow: 0 2px 8px rgba(64, 158, 255, 0.3);\n}\n\n.change-avatar-btn {\n  color: #409eff;\n  font-size: 12px;\n}\n\n.user-info {\n  flex: 1;\n  min-width: 300px;\n}\n\n.username {\n  color: #303133;\n  margin-bottom: 20px;\n  font-size: 2em;\n  font-weight: bold;\n}\n\n.user-details {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: 15px;\n}\n\n.info-item {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  padding: 12px;\n  background: #f8f9fa;\n  border-radius: 6px;\n  border: 1px solid #e4e7ed;\n}\n\n.label {\n  font-weight: bold;\n  color: #606266;\n  min-width: 80px;\n}\n\n.value {\n  color: #303133;\n  flex: 1;\n}\n\n.profile-text {\n  word-wrap: break-word;\n  white-space: pre-wrap;\n  max-height: 60px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  display: -webkit-box;\n  -webkit-line-clamp: 3;\n  -webkit-box-orient: vertical;\n}\n\n.action-buttons {\n  display: flex;\n  flex-direction: row;\n  gap: 10px;\n  align-items: center;\n  justify-content: center;\n}\n\n// 积分卡片样式\n.points-card {\n  background: #ffffff;\n  border-left: 4px solid #409eff;\n}\n\n.card-title {\n  font-size: 1.2em;\n  font-weight: bold;\n  color: #303133;\n}\n\n.points-info {\n  padding: 10px 0;\n}\n\n.points-details {\n  margin-bottom: 15px;\n}\n\n.points-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 8px;\n  padding: 8px 0;\n  border-bottom: 1px solid #f0f0f0;\n}\n\n.points-label {\n  color: #606266;\n  font-size: 1em;\n}\n\n.points-value {\n  color: #409eff;\n  font-weight: bold;\n  font-size: 1.2em;\n}\n\n.points-actions {\n  margin-top: 15px;\n  display: flex;\n  justify-content: space-between;\n  gap: 8px;\n}\n\n.points-actions .el-button {\n  flex: 1;\n  min-width: 0; // 允许按钮缩小\n}\n\n// 兴趣模块样式\n.interest-card {\n  background: #ffffff;\n  border-left: 4px solid #67c23a;\n}\n\n.interest-content {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n}\n\n.interest-tag {\n  margin: 0;\n  border-radius: 4px;\n  padding: 6px 12px;\n  background: #ecf5ff;\n  border: 1px solid #d9ecff;\n  color: #409eff;\n}\n\n// 响应式设计\n@media (max-width: 768px) {\n  .personal-page {\n    padding: 10px;\n  }\n\n  .profile-header {\n    flex-direction: column;\n    align-items: center;\n    text-align: center;\n  }\n\n  .user-details {\n    grid-template-columns: 1fr;\n  }\n\n  .points-actions {\n    flex-direction: column;\n  }\n}\n\n// 对话框样式优化\n.el-dialog {\n  border-radius: 8px;\n}\n\n.dialog-footer {\n  text-align: center;\n}\n\n// 积分明细样式\n.points-dialog {\n  .el-tabs__header {\n    margin-bottom: 20px;\n  }\n\n  .points-table {\n    .points-in {\n      color: #67c23a;\n      font-weight: bold;\n    }\n\n    .points-out {\n      color: #f56c6c;\n      font-weight: bold;\n    }\n  }\n\n  .empty-state {\n    text-align: center;\n    padding: 40px 0;\n    color: #999;\n\n    .el-icon-document {\n      font-size: 64px;\n      margin-bottom: 16px;\n    }\n  }\n\n  .pagination-wrapper {\n    display: flex;\n    justify-content: center;\n    padding: 20px 0;\n  }\n}\n\n// 积分明细对话框特定样式\n.points-dialog-content {\n  .current-points {\n    text-align: center;\n    margin-bottom: 20px;\n\n    h3 {\n      margin: 0;\n      color: #303133;\n    }\n\n    .points-highlight {\n      color: #409eff;\n      font-size: 1.2em;\n      font-weight: bold;\n    }\n  }\n\n  .points-info-section {\n    margin-bottom: 20px;\n\n    h4 {\n      margin: 0 0 10px 0;\n      color: #606266;\n    }\n\n    .points-info-list {\n      margin: 0;\n      padding-left: 20px;\n      color: #909399;\n\n      li {\n        margin-bottom: 5px;\n      }\n    }\n  }\n\n  .points-tabs {\n    margin-bottom: 20px;\n    text-align: center;\n\n    .el-button {\n      margin: 0 5px;\n    }\n  }\n\n  .points-table-container {\n    margin-bottom: 20px;\n  }\n\n  .text-green {\n    color: #67c23a;\n    font-weight: bold;\n  }\n\n  .text-red {\n    color: #f56c6c;\n    font-weight: bold;\n  }\n\n  .points-pagination {\n    text-align: center;\n  }\n}\n\n// 充值对话框样式\n.recharge-info {\n  margin-bottom: 20px;\n\n  .current-balance {\n    padding: 15px;\n    background: #f5f7fa;\n    border-radius: 6px;\n    margin-bottom: 15px;\n    text-align: center;\n\n    .label {\n      color: #606266;\n      margin-right: 10px;\n    }\n\n    .balance {\n      color: #409eff;\n      font-size: 24px;\n      font-weight: bold;\n    }\n  }\n\n  .recharge-rates {\n    h4 {\n      margin: 0 0 10px 0;\n      color: #303133;\n      font-size: 14px;\n    }\n\n    ul {\n      margin: 0;\n      padding-left: 20px;\n      color: #909399;\n      font-size: 13px;\n\n      li {\n        margin-bottom: 5px;\n      }\n    }\n  }\n}\n\n.quick-amounts {\n  margin: 15px 0;\n  display: flex;\n  align-items: center;\n  gap: 10px;\n\n  .quick-label {\n    color: #606266;\n    font-size: 14px;\n    margin-right: 10px;\n  }\n\n  .el-button {\n    min-width: 60px;\n  }\n}\n\n.recharge-preview {\n  margin-top: 20px;\n  padding: 15px;\n  background: #f0f9ff;\n  border: 1px solid #b3d8ff;\n  border-radius: 6px;\n\n  .preview-item {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    color: #303133;\n\n    .new-balance {\n      color: #67c23a;\n      font-size: 18px;\n      font-weight: bold;\n    }\n  }\n}\n\n// 禁用字段样式\n.el-form-item {\n  .el-input.is-disabled .el-input__inner {\n    background-color: #f5f7fa;\n    color: #909399;\n    cursor: not-allowed;\n  }\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}