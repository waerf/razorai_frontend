{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nexport default {\n  name: 'DeveloperCenterPage',\n  data() {\n    return {\n      robots: [{\n        id: 1,\n        name: 'AI助手机器人',\n        description: '一个提供智能助手功能的机器人。',\n        icon: '/assets/icons/assistant.png',\n        usageStats: {\n          users: 124,\n          feedback: 98\n        }\n      }, {\n        id: 2,\n        name: '翻译机器人',\n        description: '多语言实时翻译机器人。',\n        icon: '/assets/icons/translator.png',\n        usageStats: {\n          users: 215,\n          feedback: 185\n        }\n      }\n      // 示例数据\n      ],\n      totalUsers: 339,\n      // 所有机器人累计用户数\n      rank: 12 // 开发者在平台中的排名\n    };\n  },\n  methods: {\n    createNewRobot() {\n      this.$router.push({\n        name: 'CreateBots'\n      }); // 跳转到新机器人配置页面\n    },\n    viewTemplates() {\n      this.$router.push('/templates'); // 跳转到快速发布模板页面\n    },\n    viewRobotDetails(robotId) {\n      this.$router.push(`/robot-details/${robotId}`); // 跳转到机器人详情页面\n    },\n    testRobot(robotId) {\n      console.log(`测试机器人 ${robotId}`); // 实际开发中需要调用API\n      this.$message({\n        message: `机器人 ${robotId} 正在测试中！`,\n        type: 'info'\n      });\n    },\n    debugRobot(robotId) {\n      console.log(`调试机器人 ${robotId}`);\n      this.$message({\n        message: `进入机器人 ${robotId} 的调试模式！`,\n        type: 'info'\n      });\n    },\n    publishRobot(robotId) {\n      console.log(`发布机器人 ${robotId}`);\n      this.$message({\n        message: `机器人 ${robotId} 已成功发布！`,\n        type: 'success'\n      });\n    },\n    deleteRobot(robotId) {\n      this.robots = this.robots.filter(robot => robot.id !== robotId);\n      this.$message({\n        message: `机器人 ${robotId} 已删除！`,\n        type: 'warning'\n      });\n    }\n  }\n};","map":{"version":3,"names":["name","data","robots","id","description","icon","usageStats","users","feedback","totalUsers","rank","methods","createNewRobot","$router","push","viewTemplates","viewRobotDetails","robotId","testRobot","console","log","$message","message","type","debugRobot","publishRobot","deleteRobot","filter","robot"],"sources":["src/views/DeveloperCenterPage.vue"],"sourcesContent":["<!--src/views/DeveloperCenterPage.vue 这个页面展示开发者中心的信息-->\n<template>\n  <div class=\"developer-center-page\">\n    <!-- 动态背景 -->\n    <div id=\"background\"></div>\n\n    <!-- 页面标题 -->\n    <header class=\"page-header\">\n      <h1>开发者中心</h1>\n    </header>\n\n    <!-- 开发者统计信息 -->\n    <div class=\"developer-stats\">\n      <div class=\"stat-card\">\n        <h2>{{ robots.length }}</h2>\n        <p>开发机器人数量</p>\n      </div>\n      <div class=\"stat-card\">\n        <h2>{{ totalUsers }}</h2>\n        <p>累计用户数</p>\n      </div>\n      <div class=\"stat-card\">\n        <h2>#{{ rank }}</h2>\n        <p>平台排名</p>\n      </div>\n    </div>\n\n    <!-- 操作功能 -->\n    <div class=\"actions\">\n      <button class=\"action-button\" @click=\"createNewRobot\">\n        创建新机器人\n      </button>\n      <button class=\"action-button\" @click=\"viewTemplates\">快速发布模板</button>\n    </div>\n\n    <!-- 机器人列表 -->\n    <div class=\"robot-list\">\n      <h2>我的机器人</h2>\n      <div class=\"robot-grid\">\n        <div v-for=\"robot in robots\" :key=\"robot.id\" class=\"robot-card\">\n          <div class=\"robot-header\">\n            <img :src=\"robot.icon\" alt=\"robot icon\" class=\"robot-icon\" />\n            <h3 class=\"robot-name\">{{ robot.name }}</h3>\n          </div>\n          <p class=\"robot-description\">{{ robot.description }}</p>\n          <div class=\"robot-actions\">\n            <button @click=\"viewRobotDetails(robot.id)\">查看详情</button>\n            <button @click=\"testRobot(robot.id)\">测试</button>\n            <button @click=\"debugRobot(robot.id)\">调试</button>\n            <button @click=\"publishRobot(robot.id)\">发布</button>\n            <button @click=\"deleteRobot(robot.id)\">删除</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'DeveloperCenterPage',\n  data() {\n    return {\n      robots: [\n        {\n          id: 1,\n          name: 'AI助手机器人',\n          description: '一个提供智能助手功能的机器人。',\n          icon: '/assets/icons/assistant.png',\n          usageStats: { users: 124, feedback: 98 },\n        },\n        {\n          id: 2,\n          name: '翻译机器人',\n          description: '多语言实时翻译机器人。',\n          icon: '/assets/icons/translator.png',\n          usageStats: { users: 215, feedback: 185 },\n        },\n        // 示例数据\n      ],\n      totalUsers: 339, // 所有机器人累计用户数\n      rank: 12, // 开发者在平台中的排名\n    };\n  },\n  methods: {\n    createNewRobot() {\n      this.$router.push({ name: 'CreateBots' }); // 跳转到新机器人配置页面\n    },\n    viewTemplates() {\n      this.$router.push('/templates'); // 跳转到快速发布模板页面\n    },\n    viewRobotDetails(robotId) {\n      this.$router.push(`/robot-details/${robotId}`); // 跳转到机器人详情页面\n    },\n    testRobot(robotId) {\n      console.log(`测试机器人 ${robotId}`); // 实际开发中需要调用API\n      this.$message({\n        message: `机器人 ${robotId} 正在测试中！`,\n        type: 'info',\n      });\n    },\n    debugRobot(robotId) {\n      console.log(`调试机器人 ${robotId}`);\n      this.$message({\n        message: `进入机器人 ${robotId} 的调试模式！`,\n        type: 'info',\n      });\n    },\n    publishRobot(robotId) {\n      console.log(`发布机器人 ${robotId}`);\n      this.$message({\n        message: `机器人 ${robotId} 已成功发布！`,\n        type: 'success',\n      });\n    },\n    deleteRobot(robotId) {\n      this.robots = this.robots.filter((robot) => robot.id !== robotId);\n      this.$message({\n        message: `机器人 ${robotId} 已删除！`,\n        type: 'warning',\n      });\n    },\n  },\n};\n</script>\n<style scoped>\n/* 整体页面样式 */\n.developer-center-page {\n  position: relative; /* 相对定位，用于层叠上下文 */\n  padding: 20px; /* 内边距为20px */\n  font-family:\n    'Poppins', sans-serif; /* 字体设置为Poppins，如果没有则使用无衬线字体 */\n  color: #fff; /* 文本颜色为白色 */\n  background: transparent; /* 背景透明，以便动态背景覆盖 */\n  min-height: 100vh; /* 最小高度为视窗高度的100% */\n  overflow: hidden; /* 隐藏溢出的内容 */\n}\n\n/* 动态背景样式 */\n#background {\n  position: absolute; /* 绝对定位，覆盖整个父元素 */\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: radial-gradient(circle, #1e3c72, #2a5298); /* 径向渐变背景 */\n  animation: gradient-anim 8s infinite; /* 应用渐变动画，无限循环 */\n  z-index: -1; /* 层级设置为-1，确保在内容之下 */\n}\n\n@keyframes gradient-anim {\n  0% {\n    background: radial-gradient(\n      circle,\n      #1e3c72,\n      #2a5298\n    ); /* 动画开始时的背景 */\n  }\n  50% {\n    background: radial-gradient(\n      circle,\n      #2a5298,\n      #1e3c72\n    ); /* 动画中间时的背景 */\n  }\n  100% {\n    background: radial-gradient(\n      circle,\n      #1e3c72,\n      #2a5298\n    ); /* 动画结束时的背景 */\n  }\n}\n\n/* 标题动画样式 */\n.page-header h1 {\n  font-size: 3em; /* 字体大小为3em */\n  color: #fff; /* 文本颜色为白色 */\n  text-align: center; /* 文本居中 */\n  animation: slide-in 1.5s ease-out; /* 应用滑动动画，持续1.5秒，缓动效果为ease-out */\n}\n\n@keyframes slide-in {\n  from {\n    transform: translateY(-50px); /* 动画开始时向上移动50px */\n    opacity: 0; /* 动画开始时透明度为0 */\n  }\n  to {\n    transform: translateY(0); /* 动画结束时回到原位 */\n    opacity: 1; /* 动画结束时透明度为1 */\n  }\n}\n\n/* 开发者统计信息样式 */\n.developer-stats {\n  display: flex; /* 弹性盒子布局 */\n  justify-content: space-around; /* 子项平均分布 */\n  margin-bottom: 30px; /* 底部外边距为30px */\n}\n\n.stat-card {\n  background: rgba(255, 255, 255, 0.1); /* 背景颜色为半透明白色 */\n  border: 1px solid rgba(255, 255, 255, 0.3); /* 边框颜色为半透明白色 */\n  border-radius: 10px; /* 边框圆角为10px */\n  padding: 20px; /* 内边距为20px */\n  text-align: center; /* 文本居中 */\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3); /* 阴影效果 */\n  width: 30%; /* 宽度为容器的30% */\n  transition:\n    transform 0.3s,\n    box-shadow 0.3s; /* 变换和阴影的过渡效果 */\n}\n\n.stat-card:hover {\n  transform: translateY(-10px); /* 鼠标悬停时向上移动10px */\n  box-shadow: 0 8px 12px rgba(0, 0, 0, 0.5); /* 鼠标悬停时阴影效果增强 */\n}\n\n.stat-card h2 {\n  font-size: 2.5em; /* 字体大小为2.5em */\n  color: #ffcc00; /* 文本颜色为黄色 */\n  margin: 0; /* 外边距为0 */\n}\n\n.stat-card p {\n  font-size: 1.2em; /* 字体大小为1.2em */\n  margin-top: 10px; /* 顶部外边距为10px */\n}\n\n/* 操作按钮样式 */\n.actions {\n  text-align: center; /* 文本居中 */\n  margin-bottom: 30px; /* 底部外边距为30px */\n}\n\n.action-button {\n  padding: 12px 25px; /* 内边距为12px 25px */\n  margin: 0 10px; /* 外边距为0 10px */\n  font-size: 1.2em; /* 字体大小为1.2em */\n  background: linear-gradient(\n    to right,\n    #4caf50,\n    #81c784\n  ); /* 背景为从左到右的线性渐变 */\n  color: #fff; /* 文本颜色为白色 */\n  border: none; /* 无边框 */\n  border-radius: 25px; /* 边框圆角为25px */\n  cursor: pointer; /* 鼠标悬停时显示指针 */\n  transition:\n    transform 0.3s,\n    background 0.3s; /* 变换和背景的过渡效果 */\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* 阴影效果 */\n}\n\n.action-button:hover {\n  transform: scale(1.1); /* 鼠标悬停时放大1.1倍 */\n  background: linear-gradient(\n    to right,\n    #81c784,\n    #4caf50\n  ); /* 鼠标悬停时渐变方向相反 */\n}\n\n/* 机器人网格布局样式 */\n.robot-grid {\n  display: grid; /* 网格布局 */\n  grid-template-columns: repeat(\n    auto-fit,\n    minmax(300px, 1fr)\n  ); /* 列定义为自动适应，最小宽度300px */\n  gap: 20px; /* 网格间距为20px */\n}\n\n/* 机器人卡片样式 */\n.robot-card {\n  background: rgba(255, 255, 255, 0.1); /* 背景颜色为半透明白色 */\n  border: 1px solid rgba(255, 255, 255, 0.3); /* 边框颜色为半透明白色 */\n  border-radius: 15px; /* 边框圆角为15px */\n  padding: 20px; /* 内边距为20px */\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3); /* 阴影效果 */\n  transition:\n    transform 0.3s,\n    box-shadow 0.3s; /* 变换和阴影的过渡效果 */\n}\n\n.robot-card:hover {\n  transform: scale(1.05); /* 鼠标悬停时放大1.05倍 */\n  box-shadow: 0 8px 12px rgba(0, 0, 0, 0.5); /* 鼠标悬停时阴影效果增强 */\n}\n\n/* 机器人操作按钮样式 */\n.robot-actions button {\n  padding: 8px 12px; /* 内边距为8px 12px */\n  margin: 5px 0; /* 外边距为5px 0 */\n  font-size: 1em; /* 字体大小为1em */\n  background: linear-gradient(\n    to right,\n    #1e90ff,\n    #87cefa\n  ); /* 背景为从左到右的线性渐变 */\n  color: white; /* 文本颜色为白色 */\n  border: none; /* 无边框 */\n  border-radius: 5px; /* 边框圆角为5px */\n  cursor: pointer; /* 鼠标悬停时显示指针 */\n  transition:\n    background 0.3s,\n    transform 0.3s; /* 背景和变换的过渡效果 */\n}\n\n.robot-actions button:hover {\n  background: linear-gradient(\n    to right,\n    #87cefa,\n    #1e90ff\n  ); /* 鼠标悬停时渐变方向相反 */\n  transform: translateY(-2px); /* 鼠标悬停时向上移动2px */\n}\n</style>\n"],"mappings":";;;AA2DA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,MAAA,GACA;QACAC,EAAA;QACAH,IAAA;QACAI,WAAA;QACAC,IAAA;QACAC,UAAA;UAAAC,KAAA;UAAAC,QAAA;QAAA;MACA,GACA;QACAL,EAAA;QACAH,IAAA;QACAI,WAAA;QACAC,IAAA;QACAC,UAAA;UAAAC,KAAA;UAAAC,QAAA;QAAA;MACA;MACA;MAAA,CACA;MACAC,UAAA;MAAA;MACAC,IAAA;IACA;EACA;EACAC,OAAA;IACAC,eAAA;MACA,KAAAC,OAAA,CAAAC,IAAA;QAAAd,IAAA;MAAA;IACA;IACAe,cAAA;MACA,KAAAF,OAAA,CAAAC,IAAA;IACA;IACAE,iBAAAC,OAAA;MACA,KAAAJ,OAAA,CAAAC,IAAA,mBAAAG,OAAA;IACA;IACAC,UAAAD,OAAA;MACAE,OAAA,CAAAC,GAAA,UAAAH,OAAA;MACA,KAAAI,QAAA;QACAC,OAAA,SAAAL,OAAA;QACAM,IAAA;MACA;IACA;IACAC,WAAAP,OAAA;MACAE,OAAA,CAAAC,GAAA,UAAAH,OAAA;MACA,KAAAI,QAAA;QACAC,OAAA,WAAAL,OAAA;QACAM,IAAA;MACA;IACA;IACAE,aAAAR,OAAA;MACAE,OAAA,CAAAC,GAAA,UAAAH,OAAA;MACA,KAAAI,QAAA;QACAC,OAAA,SAAAL,OAAA;QACAM,IAAA;MACA;IACA;IACAG,YAAAT,OAAA;MACA,KAAAf,MAAA,QAAAA,MAAA,CAAAyB,MAAA,CAAAC,KAAA,IAAAA,KAAA,CAAAzB,EAAA,KAAAc,OAAA;MACA,KAAAI,QAAA;QACAC,OAAA,SAAAL,OAAA;QACAM,IAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}